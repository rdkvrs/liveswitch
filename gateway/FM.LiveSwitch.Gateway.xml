<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FM.LiveSwitch.Gateway</name>
    </assembly>
    <members>
        <member name="T:FM.LiveSwitch.Gateway.AuthInfo">
            <summary>
            The authentication information for external components.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.AuthInfo.ApplicationId">
            <summary>
            Gets the application id for this auth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.AuthInfo.SharedSecret">
            <summary>
            Gets the shared secret to be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.AuthInfo.PublicKey">
            <summary>
            Gets the rsa public key to be used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.AuthInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new AuthInfo using a shared secret.
            </summary>
            <param name="applicationId">The application id</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.AuthInfo.#ctor(System.String)">
            <summary>
            Creates a new AuthInfo using a shared secret.
            </summary>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.AuthInfo.#ctor(FM.LiveSwitch.RsaKey)">
            <summary>
            Creates a new AuthInfo using a rsa public key.
            </summary>
            <param name="publicKey">The RSA public key.</param>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Broker">
            <summary>
            The gateway message broker.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Broker.DataStore">
            <summary>
            Gets the data store used.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Broker.#ctor(FM.LiveSwitch.Gateway.Data.IDataStore,FM.LiveSwitch.Gateway.Utilities.IActivityLedger,FM.LiveSwitch.Gateway.Utilities.IActivityRecordUploader,FM.LiveSwitch.Gateway.Services.IHookService,FM.LiveSwitch.Service.Licensing.ILicenseKeyService,FM.LiveSwitch.Gateway.Services.IHandlerDiscoveryService,FM.LiveSwitch.IAsyncTimerFactory,OpenTracing.ITracer)">
            <summary>
            Creates a new instance of the gateway.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Data.IDataStore">
            <summary>
            Interface for a data store.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.RegisterGateway(System.Guid,FM.LiveSwitch.Server.GatewayInfo,System.TimeSpan)">
            <summary>
            Registers the gateway. If the gateway is already registered, renews the record.
            </summary>
            <param name="id">The gateway id.</param>
            <param name="info">Metadata of the gateway.</param>
            <param name="recordExpiry">How long until the record expires.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetGateways">
            <summary>
            Gets a list of gateways currently registered in the cluster.
            </summary>
            <returns>An <seealso cref="T:System.Collections.Generic.IEnumerable`1"/> of <seealso cref="T:FM.LiveSwitch.Server.GatewayInfo"/>s.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.SetConnectionState(System.Guid,System.String,System.String,System.String,System.String,System.DateTime,FM.LiveSwitch.ConnectionStatus)">
            <summary>
            Sets the status of a connection in order to keep track of real time connection stats.
            </summary>
            <param name="mediaServerId">The media server id the connection is associated with.</param>
            <param name="applicationId">The application id of the connection's client.</param>
            <param name="channelId">The channel that the connection is in.</param>
            <param name="clientId">The client id of the connections owner.</param>
            <param name="connectionId">The connection id.</param>
            <param name="eventTime">The time this event occurred.</param>
            <param name="state">The state of the connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetConnections(System.Guid,System.String,System.String)">
            <summary>
            Gets a list of all the connections for an applicationId and channel id filtered to a single media server.
            </summary>
            <param name="mediaServerId">The media server id.</param>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetConnections(System.String,System.String)">
            <summary>
            Gets a list of all the connections for an applicationId and channel id 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientRegistered(System.String,FM.LiveSwitch.ClientInfo,FM.LiveSwitch.Server.ServerChannelClaim[])">
            <summary>
            A new client has connected to an application id. Stores the client info to the data store.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientInfo">The client that just registered.</param>
            <param name="claims">The channel claims used by the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientSetBinding(System.String,System.String,System.String,System.String)">
            <summary>
            Sets a binding for a specific client. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
            <param name="value">The binding value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientSetBindings(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sets multiple binding for a specific client. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="bindings">The bindings</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientRemoveBinding(System.String,System.String,System.String)">
            <summary>
            Removes a client binding. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientGetBinding(System.String,System.String,System.String)">
            <summary>
            Gets a binding for a specific client.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
            <returns>A task that resolves with the binding value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientGetBindings(System.String,System.String)">
            <summary>
            Gets the bindings for a specific client.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <returns>A task that resolves with the binding values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientUnregistered(System.String,System.String)">
            <summary>
            A client has unregistered to an application id. Removes the client info from the data store.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientUpdated(System.String,System.String,FM.LiveSwitch.ClientConfig)">
            <summary>
            A client has updated their information.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client to update.</param>
            <param name="clientConfig">The new client config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetClients(System.String)">
            <summary>
            Gets all the clients joined to an application id.
            </summary>
            <param name="applicationId">The application Id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetClient(System.String,System.String)">
            <summary>
            Gets a specific client joined to an application id.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FM.LiveSwitch.Gateway.Data.IDataStore.UpdateClaims(System.String,System.String,FM.LiveSwitch.Server.ServerChannelClaim[])" -->
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetApplications">
            <summary>
            Gets an array of active application ids.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetApplicationChannelReports(System.String)">
            <summary>
            Aggregates all the channel reports from all media servers for a specific application id.
            </summary>
            <param name="applicationId">The application id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientJoined(System.String,System.String,System.String,System.Boolean)">
            <summary>
            A client as joined a channel. Associates the client to the channel id in the data store.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client joined.</param>
            <param name="clientId">The client that just joined the channel.</param>
            <param name="returnExisting">True if should return the existing clients in the channel.</param>
            <returns>An array of clients currently in the channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetChannels(System.String)">
            <summary>
            Get all channels for a application id.
            </summary>
            <param name="applicationId">The application id.</param>
            <returns>An array of channels in the application id.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClientLeft(System.String,System.String,System.String,System.Boolean)">
            <summary>
            A client has just left a channel. Deassociates the client to the channel id in the data store.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client just left.</param>
            <param name="clientId">The client that is leaving the channel.</param>
            <param name="returnExistingCount">True if should return the existing client count in the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetClientsInChannel(System.String,System.String)">
            <summary>
            Gets all the clients in a specific application id and channel.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client joined.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetClientChannels(System.String,System.String)">
            <summary>
            Gets all the channels that the client is joined to.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.MediaServerRegistered(System.Guid,FM.LiveSwitch.Models.AvailabilityThresholdsConfig,System.Guid,System.String,System.String[],System.Int32,System.String[],System.Int32,System.Boolean)">
            <summary>
            A new media server has just connected. Store the id in the data store.
            </summary>
            <param name="mediaServerId">The id of the media server that just connected.</param>
            <param name="thresholds">The media server's thresholds.</param>
            <param name="deploymentId">The deployment guid.</param>
            <param name="region">The region of the media server.</param>
            <param name="ipAddresses">The ip addresses of the media server.</param>
            <param name="port">The port that the media server listens on for cluster messages.</param>
            <param name="iceServerUris">The ICE servers URIs of the media server.</param>
            <param name="coreCount">The core count of the media server.</param>
            <param name="active">Whether the media server is initially active.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ActivateMediaServer(System.Guid)">
            <summary>
            Sets a media server to the active status.
            </summary>
            <param name="mediaServerId">The id of the media server to be activated.</param>
            <returns>True if media server activated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.DeactivateMediaServer(System.Guid)">
            <summary>
            Sets a media server to the inactive status.
            </summary>
            <param name="mediaServerId">The id of the media server to be deactivated.</param>
            <returns>True if media server deactivated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.SetMediaServerDraining(System.Guid,System.DateTime)">
            <summary>
            Sets a media server to the draining state. This is one-way.
            </summary>
            <param name="mediaServerId">The id of the media server to change.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.SetMediaServerOverCapacity(System.Guid,System.String,System.DateTime)">
            <summary>
            Temporarily disables the media server when over capacity so that no new peers will join.
            </summary>
            <param name="mediaServerId">The id of the media server to disable.</param>
            <param name="reason">The reason why the media server is overcapacity.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
            <returns>True if media server got updated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.UnsetMediaServerOverCapacity(System.Guid,System.DateTime)">
            <summary>
            Brings the media server back into active status.
            </summary>
            <param name="mediaServerId">The id of the media server to enable.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
            <returns>True if media server got updated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.IsMediaServerAvailable(System.Guid)">
            <summary>
            Checks if a media server is active and not over capacity.
            </summary>
            <param name="mediaServerId">The media server to check.</param>
            <returns>True if media server is active and available to take new peers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServerReports">
            <summary>
            Gets an array of reports from active servers and an array of reports from inactive servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServerReport(System.Guid)">
            <summary>
            Gets a specific media server's report.
            </summary>
            <param name="mediaServerId">The id of the media server.</param>
            <returns>The media server report.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.UpdateMediaServerReport(System.Guid,FM.LiveSwitch.Service.MediaServerReport.MediaServerReport,FM.LiveSwitch.Models.AvailabilityThresholdsConfig)">
            <summary>
            Updates the server report for a specific media server.
            </summary>
            <param name="mediaServerId">The id of the media server from which the report came from.</param>
            <param name="report">The media server report.</param>
            <param name="thresholds">The currently applied thresholds for this media server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ActiveServerCount(System.String)">
            <summary>
            Gets the number of media servers online.
            </summary>
            <param name="region">The region.</param>
            <returns>A int representing the number of online media servers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.MediaServerUnregistered(System.Guid)">
            <summary>
            A media server has just disconnected. Removes the id from the data store.
            </summary>
            <param name="mediaServerId">The id of the media server that just disconnected.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.AllocateMediaServerForChannel(System.String,System.String,System.String,FM.LiveSwitch.AllocationStrategy)">
            <summary>
            Returns the id of the media server that is associated with the channel id. If none are currently
            associated, associates a new one at random if allocate is true.
            </summary>
            <param name="region">The region to find a media server in.</param>
            <param name="applicationId">The application id of the channel to return.</param>
            <param name="channelId">The channel id that is mapped to a media server.</param>
            <param name="allocationStrategy">The allocation strategy to use.</param>
            <returns>The media server id that was allocated to the channel request.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServersServingChannel(System.String,System.String)">
            <summary>
            Returns a list of media servers currently taking part in a channel regardless of region.
            </summary>
            <param name="applicationId">The application id of the channel.</param>
            <param name="channelId">The channel to lookup.</param>
            <returns>IEnumerable of guid-string pairs. The guid is the media server id and the string is the ip address.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServers">
            <summary>
            Returns a list of the media servers and their statuses.
            </summary>
            <returns>An IEnumerable of media servers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServerIds">
            <summary>
            Returns the number of media servers registered.
            </summary>
            <returns>The number of media servers registered.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServer(System.Guid)">
            <summary>
            Returns the statuses of a media server.
            </summary>
            <param name="mediaServerId"></param>
            <returns>A model of the media server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServerChannels(System.Guid)">
            <summary>
            Returns a list of tuples containing the applicationIds and channelIds considered active on the media server.
            </summary>
            <param name="mediaServerId">The media server id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetMediaServerStats(System.Guid)">
            <summary>
            Gets the connection stats for a media server.
            </summary>
            <param name="mediaserverId">The media server to get stats for.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.AppendActivityRecord(FM.LiveSwitch.ActivityRecord)">
            <summary>
            Adds a new usage record to the ledger.
            </summary>
            <param name="activityRecord">The activity record to store.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetActivityRecordBatch(System.Int32)">
            <summary>
            Returns up to <paramref name="maxAmount"/> of records.
            </summary>
            <param name="maxAmount">The max amount of records to return.</param>
            <returns>The activity records to be uploaded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.ClearActivityRecordBatch(System.Int32)">
            <summary>
            Clears <paramref name="amount"/> records after upload.
            </summary>
            <param name="amount">The amount of records to clear.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.CreateDistributedLock(System.String,System.TimeSpan)">
            <summary>
            Creates a distributed lock on <paramref name="resource"/> that expires <paramref name="expiry"/> if not renewed.
            </summary>
            <param name="resource">The resource to lock on.</param>
            <param name="expiry">When the lock will expire if not renewed.</param>
            <returns>The lock.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.RegisterConnector(FM.LiveSwitch.Server.ConnectorInfo)">
            <summary>
            Registers a connector and any protocols it is capable of using.
            </summary>
            <param name="connectorInfo">The metadata for the connector.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.UnregisterConnector(System.Guid)">
            <summary>
            Unregisters a connector from the server.
            </summary>
            <param name="connectorId">The connector id to unregister.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetConnectors">
            <summary>
            Gets a list of connectors registered.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.IDataStore.GetConnectorForProtocol(System.String)">
            <summary>
            Gets a connector capable of handling the passed in protocol.
            </summary>
            <param name="protocol">The protocol.</param>
            <returns>The connector id of the connector capable of handling the protocol.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Data.Models.MediaServer">
            <summary>
            The model holding data for a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.Id">
            <summary>
            The media server id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.Available">
            <summary>
            True if the media server is available for mapping.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.Active">
            <summary>
            True if the media server hasn't been manually deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.CoreCount">
            <summary>
            The media server core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.OverCapacity">
            <summary>
            True if the media server reached its capacity thresholds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.OverCapacityReason">
            <summary>
            The reason why a media server was over capacity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.Draining">
            <summary>
            True if the media server is draining it's connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.LastStateChange">
            <summary>
            The time that state was last changed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.IPAddresses">
            <summary>
            The list of ip addresses associated with a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.Region">
            <summary>
            The region for this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.DeploymentId">
            <summary>
            The deployment id for this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServer.CurrentThresholds">
            <summary>
            The thresholds that were last applied to this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.MediaServerId">
            <summary>
            The id of the media server these stats belong to.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.PendingConnections">
            <summary>
            The total number of pending connections on a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.ActiveConnections">
            <summary>
            The total amount of active connections on a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.TotalClosedConnections">
            <summary>
            The total amount of connections that were closed on a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.TotalFailedConnections">
            <summary>
            The total number of failed connections on a media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.DurationFailedConnections">
            <summary>
            The number of failed connections within a specific duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.Models.MediaServerStats.DurationSeconds">
            <summary>
            How long the duration is for DurationFailedConnections in seconds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Data.RedisStore">
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
            <summary>
            A Redis data store.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetApplications">
            <summary>
            Gets an array of active application ids.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetApplicationChannelReports(System.String)">
            <summary>
            Aggregates all the channel reports from all media servers for a specific application id.
            </summary>
            <param name="applicationId">The application id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetChannels(System.String)">
            <summary>
            Get all channels for a application id.
            </summary>
            <param name="applicationId">The application id.</param>
            <returns>An array of channels in the application id.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientJoined(System.String,System.String,System.String,System.Boolean)">
            <summary>
            A client has joined a channel. Associates the client to the channel id in the data store.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client joined.</param>
            <param name="clientId">The client that just joined the channel.</param>
            <param name="returnExisting">True if should return the existing clients in the channel.</param>
            <returns>An array of clients currently in the channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientLeft(System.String,System.String,System.String,System.Boolean)">
            <summary>
            A client has just left a channel. Deassociates the client to the channel id in the data store.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client just left.</param>
            <param name="clientId">The client that is leaving the channel.</param>
            <param name="returnExistingCount">True if should return the existing client count in the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetClientChannels(System.String,System.String)">
            <summary>
            Gets all the channels that the client is joined to.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetClientsInChannel(System.String,System.String)">
            <summary>
            Gets all the clients in a specific application id and channel.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id the client joined.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientRegistered(System.String,FM.LiveSwitch.ClientInfo,FM.LiveSwitch.Server.ServerChannelClaim[])">
            <summary>
            A new client has connected to an application id. Stores the client info to the data store.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientInfo">The client that just registered.</param>
            <param name="claims">The channel claims used by the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.UpdateClaims(System.String,System.String,FM.LiveSwitch.Server.ServerChannelClaim[])">
            <summary>
            Update a client's channel claims.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="newClaims">The new claims.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientUpdated(System.String,System.String,FM.LiveSwitch.ClientConfig)">
            <summary>
            A client has updated their information.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client to update.</param>
            <param name="clientConfig">The new client config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientUnregistered(System.String,System.String)">
            <summary>
            A client has unregistered to an application id. Removes the client info from the data store.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetClients(System.String)">
            <summary>
            Gets all the clients joined to an application id.
            </summary>
            <param name="applicationId">The application Id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetClient(System.String,System.String)">
            <summary>
            Gets a specific client joined to an application id.
            </summary>
            <param name="applicationId">The application Id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientSetBinding(System.String,System.String,System.String,System.String)">
            <summary>
            Sets a binding for a specific client. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
            <param name="value">The binding value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientSetBindings(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sets multiple binding for a specific client. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="bindings">The bindings</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientRemoveBinding(System.String,System.String,System.String)">
            <summary>
            Removes a client binding. 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientGetBinding(System.String,System.String,System.String)">
            <summary>
            Gets a binding for a specific client.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <param name="key">The binding key.</param>
            <returns>A task that resolves with the binding value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClientGetBindings(System.String,System.String)">
            <summary>
            Gets the bindings for a specific client.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="clientId">The client id.</param>
            <returns>A task that resolves with the binding values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.SetConnectionState(System.Guid,System.String,System.String,System.String,System.String,System.DateTime,FM.LiveSwitch.ConnectionStatus)">
            <summary>
            Sets the status of a connection in order to keep track of real time connection stats.
            </summary>
            <param name="mediaServerId">The media server id the connection is associated with.</param>
            <param name="applicationId">The application id of the connection's client.</param>
            <param name="channelId">The channel that the connection is in.</param>
            <param name="clientId">The client id of the connections owner.</param>
            <param name="connectionId">The connection id.</param>
            <param name="eventTime">The time this event occurred.</param>
            <param name="state">The state of the connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetConnections(System.Guid,System.String,System.String)">
            <summary>
            Gets a list of all the connections in a media server for a specific applicationId and channelId.
            </summary>
            <param name="mediaServerId">The media server id.</param>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetConnections(System.String,System.String)">
            <summary>
            Gets a list of all the connections for an applicationId and channel id 
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.RegisterConnector(FM.LiveSwitch.Server.ConnectorInfo)">
            <summary>
            Registers a connector and any protocols it is capable of using.
            </summary>
            <param name="connectorInfo">The metadata for the connector.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.UnregisterConnector(System.Guid)">
            <summary>
            Unregisters a connector from the server.
            </summary>
            <param name="connectorId">The connector id to unregister.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetConnectors">
            <summary>
            Gets a list of connectors registered.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetConnectorForProtocol(System.String)">
            <summary>
            Gets a connector capable of handling the passed in protocol.
            </summary>
            <param name="protocol">The protocol.</param>
            <returns>The connector id of the connector capable of handling the protocol.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.RegisterGateway(System.Guid,FM.LiveSwitch.Server.GatewayInfo,System.TimeSpan)">
            <summary>
            Registers the gateway. If the gateway is already registered, renews the record.
            </summary>
            <param name="id">The gateway id.</param>
            <param name="info">Metadata of the gateway.</param>
            <param name="recordExpiry">How long until the record expires.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetGateways">
            <summary>
            Gets a list of gateways currently registered in the cluster.
            </summary>
            <returns>An <seealso cref="T:System.Collections.Generic.IEnumerable`1"/> of <seealso cref="T:FM.LiveSwitch.Server.GatewayInfo"/>s.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.MediaServerRegistered(System.Guid,FM.LiveSwitch.Models.AvailabilityThresholdsConfig,System.Guid,System.String,System.String[],System.Int32,System.String[],System.Int32,System.Boolean)">
            <summary>
            A new media server has just connected. Store the id in the data store.
            </summary>
            <param name="mediaServerId">The id of the media server that just connected.</param>
            <param name="deploymentId">The deployment guid.</param>
            <param name="region">The region of the media server.</param>
            <param name="thresholds">The media server's thresholds.</param>
            <param name="ipAddresses">The ip addresses of the media server.</param>
            <param name="port">The port that the media server listens on for cluster messages.</param>
            <param name="iceServerUris">The ICE server URIs of the media server.</param>
            <param name="coreCount">The core count of the media server.</param>
            <param name="active">Whether the media server is initially active.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.MediaServerUnregistered(System.Guid)">
            <summary>
            A media server has just disconnected. Removes the id from the data store.
            </summary>
            <param name="mediaServerId">The id of the media server that just disconnected.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServer(System.Guid)">
            <summary>
            Returns the statuses of a media server.
            </summary>
            <param name="mediaServerId"></param>
            <returns>A model of the media server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServers">
            <summary>
            Returns a list of the media servers and their statuses.
            </summary>
            <returns>An IEnumerable of media servers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ActiveServerCount(System.String)">
            <summary>
            Gets the number of active media servers online.
            </summary>
            <param name="region">The region.</param>
            <returns>A int representing the number of active online media servers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServerChannels(System.Guid)">
            <summary>
            Returns a list of tuples containing the applicationIds and channelIds considered active on the media server.
            </summary>
            <param name="mediaServerId">The media server id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ActivateMediaServer(System.Guid)">
            <summary>
            Sets a media server to the active status.
            </summary>
            <param name="mediaServerId">The id of the media server to be activated.</param>
            <returns>True if media server activated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.SetMediaServerDraining(System.Guid,System.DateTime)">
            <summary>
            Sets a media server to the draining state. This is one-way.
            </summary>
            <param name="mediaServerId">The id of the media server to change.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.SetMediaServerOverCapacity(System.Guid,System.String,System.DateTime)">
            <summary>
            Temporarily disables the media server when over capacity so that no new peers will join.
            </summary>
            <param name="mediaServerId">The id of the media server to disable.</param>
            <param name="reason">The reason why the media server is overcapacity.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
            <returns>True if media server got updated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.UnsetMediaServerOverCapacity(System.Guid,System.DateTime)">
            <summary>
            Brings the media server back into active status.
            </summary>
            <param name="mediaServerId">The id of the media server to enable.</param>
            <param name="stateChangedTime">The time that the state got changed.</param>
            <returns>True if media server got updated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.DeactivateMediaServer(System.Guid)">
            <summary>
            Sets a media server to the inactive status.
            </summary>
            <param name="mediaServerId">The id of the media server to be deactivated.</param>
            <returns>True if media server deactivated; false if not found.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServersServingChannel(System.String,System.String)">
            <summary>
            Returns a list of media servers currently taking part in a channel.
            </summary>
            <param name="applicationId">The application id of the channel.</param>
            <param name="channelId">The channel to lookup.</param>
            <returns>IEnumerable of guid,string pairs. The guid is the media server id and the string is the ip address.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServerIds">
            <summary>
            Returns the ids of all registered media servers.
            </summary>
            <returns>An IEnumerable containin the guids of all the registered media servers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.AllocateMediaServerForChannel(System.String,System.String,System.String,FM.LiveSwitch.AllocationStrategy)">
            <summary>
            Returns the id of the media server that is associated with the channel id. If none are currently
            associated, associates a new one at random if allocate is true.
            </summary>
            <param name="region">The region to find a media server in.</param>
            <param name="applicationId">The application id of the channel to return.</param>
            <param name="channelId">The channel id that is mapped to a media server.</param>
            <param name="allocationStrategy">The allocation strategy to use.</param>
            <returns>The media server id that was allocated to the channel request.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.UpdateMediaServerReport(System.Guid,FM.LiveSwitch.Service.MediaServerReport.MediaServerReport,FM.LiveSwitch.Models.AvailabilityThresholdsConfig)">
            <summary>
            Updates the server report for a specific media server.
            Returns an enumerable of channels that are no longer on the media server.
            </summary>
            <param name="mediaServerId">The id of the media server from which the report came from.</param>
            <param name="report">The media server report.</param>
            <param name="thresholds">The currently applied thresholds for this media server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServerReports">
            <summary>
            Gets an array of reports from active servers and an array of reports from inactive servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServerReport(System.Guid)">
            <summary>
            Gets a specific media server's report.
            </summary>
            <param name="mediaServerId">The id of the media server.</param>
            <returns>The media server report.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.IsMediaServerAvailable(System.Guid)">
            <summary>
            Checks if a media server is active and not over capacity.
            </summary>
            <param name="mediaServerId">The media server to check.</param>
            <returns>True if media server is active and available to take new peers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetMediaServerStats(System.Guid)">
            <summary>
            Gets the connection stats for a media server.
            </summary>
            <param name="mediaServerId">The media server to get stats for.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Data.RedisStore.Redis">
            <summary>
            Gets the redis connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.#ctor(StackExchange.Redis.IConnectionMultiplexer,OpenTracing.ITracer)">
            <summary>
            Creates a redis store with a specific connection string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.Initialize">
            <summary>
            Initializes our redis connection. Connects if unconnected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetClusterId">
            <summary>
            Returns a unique id that identifiers the data cluster.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.AppendActivityRecord(FM.LiveSwitch.ActivityRecord)">
            <summary>
            Adds a new usage record to the ledger.
            </summary>
            <param name="activityRecord">The activity record to store.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.GetActivityRecordBatch(System.Int32)">
            <summary>
            Returns up to <paramref name="maxAmount"/> of records.
            </summary>
            <param name="maxAmount">The max amount of records to return.</param>
            <returns>The activity records to be uploaded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.ClearActivityRecordBatch(System.Int32)">
            <summary>
            Clears <paramref name="amount"/> records after upload.
            </summary>
            <param name="amount">The amount of records to clear.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisStore.CreateDistributedLock(System.String,System.TimeSpan)">
            <summary>
            Creates a distributed lock on <paramref name="resource"/> that expires <paramref name="expiry"/> if not renewed.
            </summary>
            <param name="resource">The resource to lock on.</param>
            <param name="expiry">When the lock will expire if not renewed.</param>
            <returns>The lock.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisKeys.ClusterKey">
            <summary>
            Gets the key where the Redis String containing the cluster id is stored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisKeys.ChannelMediaServersKey(System.String,System.String)">
            <summary>
            Gets the key for the Redis Set where the media server ids used in a channel are stored.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisKeys.MediaServerKey(System.Guid)">
            <summary>
            Gets the key where a Redis Hash is stored containing media server details.
            </summary>
            <param name="mediaServerId"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Data.RedisKeys.MediaServerChannelsKey(System.Guid)">
            <summary>
            Gets the key where a Redis Set is stored containing the application/channel pair currently active on a media server.
            </summary>
            <param name="mediaServerId"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.ConfigureSwaggerOptions.#ctor(Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.ConfigureSwaggerOptions"/> class.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider">provider</see> used to generate Swagger documents.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.ConfigureSwaggerOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <inheritdoc />
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ApplicationsController">
            <summary>
            Operations that return Application information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ApplicationsController.GetApplicationSnapshot(System.String)">
            <summary>
            Gets high level snapshot of application information.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ApplicationsController.GetApplications">
            <summary>
            Gets a list of application ids currently in use.
            </summary>
            <response code="200">successful operation</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController">
            <summary>
            Operations that return Channel information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.GetActiveChannels(System.String)">
            <summary>
            Gets of list of active channels.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.KickChannelClients(System.String,System.String)">
            <summary>
            Kick everyone out of a channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <response code="204">successful operation</response>
            <response code="404">channel does not exist.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.UpdateChannelConfig(System.String,System.String,FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConfig)">
            <summary>
            Update channel config.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="config">The new channel config.</param>
            <response code="204">successful operation</response>
            <response code="404">channel does not exist.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.GetChannel(System.String,System.String)">
            <summary>
            Gets a high level snapshot of channel information.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel Id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.GetClientChannels(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a list of all channels that a specific client has joined.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ChannelsController.SendChannelMessage(System.String,System.String,FM.LiveSwitch.Server.ServerMessage)">
            <summary>
            Sends a message to the channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="message">The message.</param>
            <response code="204">successful operation</response>
            <response code="404">channel does not exist.</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController">
            <summary>
            Operations that return Client information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.GetChannelClients(System.String,System.String)">
            <summary>
            Gets a list of all clients in a channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.UpdateClientRecords(System.String,System.String,System.String,System.String,FM.LiveSwitch.ClientConfig)">
            <summary>
            Updates the client config and sends out notifications to update other clients.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <param name="newConfig">The new config to apply to the client.</param>
            <response code="204">successful operation</response>
            <response code="404">client not found.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.UpdateChannelInformation(System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientSettings)">
            <summary>
            Updates the channel claim or other settings.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <param name="channelSettings">The new claims and other information to apply to the client.</param>
            <response code="204">successful operation</response>
            <response code="404">client not found.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.KickChannelClient(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Kick a client out of a channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <response code="204">successful operation</response>
            <response code="404">client was not in channel.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.GetChannelDeviceClient(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets a high level snapshot of a client in a channel owned by a specific device.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.GetChannelDeviceClients(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a list of clients in a channel owned by a specific device.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.GetUserDeviceClients(System.String,System.String,System.String)">
            <summary>
            Gets a list of all clients owned by a device.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.GetUserClient(System.String,System.String,System.String,System.String)">
            <summary>
            Gets information about a specific client owned by a specific user.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ClientsController.SendChannelClientMessage(System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Server.ServerMessage)">
            <summary>
            Sends a message to a client in the channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <param name="message">The message.</param>
            <response code="204">successful operation</response>
            <response code="404">client was not in channel.</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectionsController">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectionsController.GetChannelConnections(System.String,System.String)">
            <summary>
            Gets a list of all connections in a channel.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectionsController.UpdateConnectionConfig(System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConfig)">
            <summary>
            Update connection config.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <param name="connectionId">The connection id.</param>
            <param name="config">The new connection config.</param>
            <response code="204">successful operation</response>
            <response code="404">user, device, client, connection, or channel does not exist.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectionsController.GetChannelClientConnections(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets a list of connections in a channel owned by a specific client.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectionsController.GetChannelClientConnection(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Queries the reports to get the connection info for a connection in a channel owned by a specific client.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
            <param name="connectionId">The connection id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectorController">
            <summary>
            Operations that return information on Connectors.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.ConnectorController.GetConnectors">
            <summary>
            Get a list of all registered connectors.
            </summary>
            <remarks></remarks>
            <response code="200">successful operation</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.GetChannelDevices(System.String,System.String)">
            <summary>
            Gets a list of all devices in a channel.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.KickChannelDevice(System.String,System.String,System.String,System.String)">
            <summary>
            Kick a device out of a channel.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <response code="204">successful operation</response>
            <response code="404">device was not in channel.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.UpdateDeviceConfig(System.String,System.String,System.String,System.String,FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceConfig)">
            <summary>
            Update device config settings.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="config">The new device config config.</param>
            <response code="204">successful operation</response>
            <response code="404">user, device, or channel does not exist.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.GetChannelUserDevice(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a high level snapshot of a device in a channel owned by a specific user.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <response code="200">successful operation</response>
            <response code="404">device not found in this channel</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.GetChannelUserDevices(System.String,System.String,System.String)">
            <summary>
            Gets a list of devices in a channel owned by a specific user.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <response code="200">successful operation</response>
            <response code="404">device not found in this channel</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.GetUserDevice(System.String,System.String,System.String)">
            <summary>
            Gets information about a specific device owned by a specific user.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.GetUserDevices(System.String,System.String)">
            <summary>
            Gets a list of all devices owned by a user.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DevicesController.SendChannelDeviceMessage(System.String,System.String,System.String,System.String,FM.LiveSwitch.Server.ServerMessage)">
            <summary>
            Sends a message to a device in the channel.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="message">The message.</param>
            <response code="204">successful operation</response>
            <response code="404">device was not in channel.</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DiagnosticsController">
            <summary>
            Operations that return Application information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.DiagnosticsController.DumpDatastore">
            <summary>
            Gets a dump of the raw datastore data.
            </summary>
            <response code="200">successful operation</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController">
            <summary>
            Operations that return information on Media Servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController.GetMediaServer(System.Guid)">
            <summary>
            Get the connection information for a specific Media Server.
            </summary>        
            <param name="mediaServerId">ID of media server to return</param>
            <response code="200">successful operation</response>
            <response code="404">Media Server not found</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController.GetMediaServers">
            <summary>
            Get a list of all active and inactive media servers.
            </summary>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController.UpdateMediaServer(System.Guid,FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate)">
            <summary>
            Update a Media Server by it's ID
            </summary>
            <param name="mediaServerId">ID of media server to update</param>
            <param name="body"></param>
            <response code="200">successful operation</response>
            <response code="404">media server not found.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController.GetMediaServerConnectionStats(System.Guid)">
            <summary>
            Get the connection information for a specific Media Server.
            </summary>
            <param name="mediaServerId">ID of media server to return</param>
            <response code="200">successful operation</response>
            <response code="404">Media Server not found</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.MediaServersController.GetAllMediaServerConnectionStats">
            <summary>
            Get the connection information for all Media Servers.
            </summary>
            <response code="200">successful operation</response>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.GetChannelUsers(System.String,System.String)">
            <summary>
            Gets a list of users in the channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.UpdateUserConfig(System.String,System.String,System.String,FM.LiveSwitch.Gateway.Http.Admin.Models.UserConfig)">
            <summary>
            Update user config.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="config">The new user recording config.</param>
            <response code="204">successful operation</response>
            <response code="404">user or channel does not exist.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.KickChannelUser(System.String,System.String,System.String)">
            <summary>
            Kick a user out of a channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The userid.</param>
            <response code="204">successful operation</response>
            <response code="404">user was not in channel.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.GetChannelUser(System.String,System.String,System.String)">
            <summary>
            Gets a high level snapshot of a user in the channel.
            </summary>
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.GetApplicationUsers(System.String)">
            <summary>
            Gets a list of all users for this application.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.GetApplicationUser(System.String,System.String)">
            <summary>
            Gets information about a specific user.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="userId">The user id.</param>
            <response code="200">successful operation</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V1.UsersController.SendChannelUserMessage(System.String,System.String,System.String,FM.LiveSwitch.Server.ServerMessage)">
            <summary>
            Sends a message to a user in the channel.
            </summary>        
            <param name="applicationId">Id of the application.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="message">The message.</param>
            <response code="204">successful operation</response>
            <response code="404">user was not in channel.</response>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.CertificateController.Upload(Microsoft.AspNet.OData.ODataActionParameters)">
            <summary>
            Uploads a new binary certificate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.ConnectorController.GetAll">
            <summary>
            Gets a queryable list of entities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.ConnectorController.Get(System.Guid)">
            <summary>
            Gets the single entity that matches the key.
            </summary>
            <param name="key">The guid id of the entity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.ConnectorController.GetFromSipConnectorInfo(Microsoft.AspNet.OData.Query.ODataQueryOptions{FM.LiveSwitch.Server.SipConnectorInfo})">
            <summary>
            Gets the queryable entities that are of type `FM.LiveSwitch.Model.DeploymentWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.EntityODataController`2.GetAll(Microsoft.AspNet.OData.Query.ODataQueryOptions{`1})">
            <summary>
            Gets a queryable list of entities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.EntityODataController`2.Get(System.Guid)">
            <summary>
            Gets the single entity that matches the key.
            </summary>
            <param name="key">The guid id of the entity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.EntityODataController`2.Post(`1)">
            <summary>
            Creates a new entity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.EntityODataController`2.Patch(System.Guid,Microsoft.AspNet.OData.Delta{`1})">
            <summary>
            Updates the entity located at the key.
            </summary>
            <param name="key">The guid id of the entity to update.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.EntityODataController`2.Delete(System.Guid)">
            <summary>
            Deletes the entity that matches the key.
            </summary>
            <param name="key">The guid id of the entity to delete.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.GatewayController.GetGateways">
            <summary>
            Gets a queryable list of entities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.GatewayController.GetGateway(System.Guid)">
            <summary>
            Gets the single entity that matches the key.
            </summary>
            <param name="key">The guid id of the entity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.MappingController.GetFromSipInboundMappingConfig(Microsoft.AspNet.OData.Query.ODataQueryOptions{FM.LiveSwitch.Models.SipInboundMappingConfig})">
            <summary>
            Gets the queryable entities that are of type `FM.LiveSwitch.Model.SipInboundMappingConfig`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SipConnectorController.GetSipConnectors">
            <summary>
            Gets a queryable list of entities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SipConnectorController.GetSipConnector(System.Guid)">
            <summary>
            Gets the single entity that matches the key.
            </summary>
            <param name="key">The guid id of the entity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SiteController.GetSite">
            <summary>
            Gets the singleton Site entity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SiteController.PatchSite(Microsoft.AspNet.OData.Delta{FM.LiveSwitch.Models.SiteConfig})">
            <summary>
            Patches the singleton Site entity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SiteController.IsInitialized">
            <summary>
            Gets the Initialization state of the LiveSwitch system.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.SiteController.Initialize(Microsoft.AspNet.OData.ODataActionParameters)">
            <summary>
            Initializes the LiveSwitch system by setting the license key and the default admin account.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.UserController.Me">
            <summary>
            Gets the user entity matching the currently logged in user.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.UserController.ChangePassword(System.Guid,Microsoft.AspNet.OData.ODataActionParameters)">
            <summary>
            Changes the password of a user. Key must match current user.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.UserController.Create(System.String,System.String)">
            <summary>
            Creates a new user.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.UserController.CreateApiKey(System.Guid,Microsoft.AspNet.OData.ODataActionParameters)">
            <summary>
            Creates an api key for a user. Key must match current user.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetFromDeploymentWebhook(Microsoft.AspNet.OData.Query.ODataQueryOptions{FM.LiveSwitch.Models.DeploymentWebhook})">
            <summary>
            Gets the queryable entities that are of type `FM.LiveSwitch.Model.DeploymentWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetDeploymentWebhook(System.Guid)">
            <summary>
            Gets a specific `FM.LiveSwitch.Model.DeploymentWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetFromApplicationWebhook(Microsoft.AspNet.OData.Query.ODataQueryOptions{FM.LiveSwitch.Models.ApplicationWebhook})">
            <summary>
            Gets the queryable entities that are of type `FM.LiveSwitch.Model.ApplicationWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetApplicationWebhook(System.Guid)">
            <summary>
            Gets a specific `FM.LiveSwitch.Model.ApplicationWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetFromChannelWebhook(Microsoft.AspNet.OData.Query.ODataQueryOptions{FM.LiveSwitch.Models.ChannelWebhook})">
            <summary>
            Gets the queryable entities that are of type `FM.LiveSwitch.Model.ChannelWebhook`.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Controllers.V2.WebhookController.GetChannelWebhook(System.Guid)">
            <summary>
            Gets a specific `FM.LiveSwitch.Model.ChannelWebhook`.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.LogMiddleware">
            <summary>
            Log request and response bodies.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Application">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Application" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="ChannelCount">ChannelCount.</param>
            <param name="UserCount">UserCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.UserCount">
            <summary>
            Gets or Sets UserCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.Application)">
            <summary>
            Returns true if Application instances are equal
            </summary>
            <param name="other">Instance of Application to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Application.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationCollectionItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.#ctor(System.String,System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Channels">Channels.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.Channels">
            <summary>
            Gets or Sets Channels
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport)">
            <summary>
            Returns true if ApplicationReport instances are equal
            </summary>
            <param name="other">Instance of ApplicationReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserCount">UserCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.UserCount">
            <summary>
            Gets or Sets UserCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Channel.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.#ctor(System.String,System.String,System.String,System.String[],System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="DeviceId">DeviceId.</param>
            <param name="Roles">Roles.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.DeviceId">
            <summary>
            Gets or Sets DeviceId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.Roles">
            <summary>
            Gets or Sets Roles
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient)">
            <summary>
            Returns true if ChannelClient instances are equal
            </summary>
            <param name="other">Instance of ChannelClient to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClient.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="DeviceId">DeviceId.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.DeviceId">
            <summary>
            Gets or Sets DeviceId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem)">
            <summary>
            Returns true if ChannelClientCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ChannelClientCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientSettings.Claim">
            <summary>
            Gets or sets the channel claim.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelClientSettings.Recording">
            <summary>
            Gets or sets whether to enable recording.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserCount">UserCount.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.UserCount">
            <summary>
            Gets or Sets UserCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem)">
            <summary>
            Returns true if ChannelCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ChannelCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConfig.Recording">
            <summary>
            True if to enable recording, false if to disable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="DeviceId">DeviceId.</param>
            <param name="ClientId">ClientId.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.DeviceId">
            <summary>
            Gets or Sets DeviceId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.ClientId">
            <summary>
            Gets or Sets ClientId
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem)">
            <summary>
            Returns true if ChannelConnectionCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ChannelConnectionCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelConnectionCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="Alias">Alias.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.Alias">
            <summary>
            Gets or Sets Alias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice)">
            <summary>
            Returns true if ChannelDevice instances are equal
            </summary>
            <param name="other">Instance of ChannelDevice to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDevice.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem)">
            <summary>
            Returns true if ChannelDeviceCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ChannelDeviceCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelDeviceCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.#ctor(System.String,System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Users">Users.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.Users">
            <summary>
            Gets or Sets Users
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport)">
            <summary>
            Returns true if ChannelReport instances are equal
            </summary>
            <param name="other">Instance of ChannelReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Alias">Alias.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.Alias">
            <summary>
            Gets or Sets Alias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser)">
            <summary>
            Returns true if ChannelUser instances are equal
            </summary>
            <param name="other">Instance of ChannelUser to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUser.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ConnectionCount">ConnectionCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.ConnectionCount">
            <summary>
            Gets or Sets ConnectionCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem)">
            <summary>
            Returns true if ChannelUserCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ChannelUserCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ChannelUserCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Client">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Client" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Tag">Tag.</param>
            <param name="UserId">UserId.</param>
            <param name="UserAlias">UserAlias.</param>
            <param name="DeviceId">DeviceId.</param>
            <param name="DeviceAlias">DeviceAlias.</param>
            <param name="Roles">Roles.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.Tag">
            <summary>
            Gets or Sets Tag
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.UserAlias">
            <summary>
            Gets or Sets UserAlias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.DeviceId">
            <summary>
            Gets or Sets DeviceId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.DeviceAlias">
            <summary>
            Gets or Sets DeviceAlias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.Roles">
            <summary>
            Gets or Sets Roles
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.Client)">
            <summary>
            Returns true if Client instances are equal
            </summary>
            <param name="other">Instance of Client to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Client.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientChannelCollectionItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientChannelCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientChannelCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="DeviceId">DeviceId.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.DeviceId">
            <summary>
            Gets or Sets DeviceId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem)">
            <summary>
            Returns true if ClientCollectionItem instances are equal
            </summary>
            <param name="other">Instance of ClientCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.#ctor(System.String,System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Connections">Connections.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.Connections">
            <summary>
            Gets or Sets Connections
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport)">
            <summary>
            Returns true if ClientReport instances are equal
            </summary>
            <param name="other">Instance of ClientReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.#ctor(System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer" /> class.
            </summary>
            <param name="CpuUsage">CpuUsage.</param>
            <param name="MemoryUsage">Memory usage in KB..</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.CpuUsage">
            <summary>
            Gets or Sets CpuUsage
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.MemoryUsage">
            <summary>
            Memory usage in KB.
            </summary>
            <value>Memory usage in KB.</value>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.Computer)">
            <summary>
            Returns true if Computer instances are equal
            </summary>
            <param name="other">Instance of Computer to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Computer.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionConfig.Recording">
            <summary>
            True if to enable recording, false if to disable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Type">Type.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport)">
            <summary>
            Returns true if ConnectionReport instances are equal
            </summary>
            <param name="other">Instance of ConnectionReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.ConnectionReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Device">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.Device" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="Alias">Alias.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.Alias">
            <summary>
            Gets or Sets Alias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.Device)">
            <summary>
            Returns true if Device instances are equal
            </summary>
            <param name="other">Instance of Device to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.Device.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="UserId">UserId.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.UserId">
            <summary>
            Gets or Sets UserId
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem)">
            <summary>
            Returns true if DeviceCollectionItem instances are equal
            </summary>
            <param name="other">Instance of DeviceCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceConfig.Recording">
            <summary>
            True if to enable recording, false if to disable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.#ctor(System.String,System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.ClientReport})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Clients">Clients.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.Clients">
            <summary>
            Gets or Sets Clients
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport)">
            <summary>
            Returns true if DeviceReport instances are equal
            </summary>
            <param name="other">Instance of DeviceReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.#ctor(System.String,System.Nullable{System.Boolean},System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.ApplicationReport},FM.LiveSwitch.Gateway.Http.Admin.Models.Computer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Active">Active.</param>
            <param name="Applications">Applications.</param>
            <param name="Computer">Computer.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Active">
            <summary>
            Gets or Sets Active
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Applications">
            <summary>
            Gets or Sets Applications
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Computer">
            <summary>
            Gets or Sets Computer
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport)">
            <summary>
            Returns true if MediaServerReport instances are equal
            </summary>
            <param name="other">Instance of MediaServerReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate" /> class.
            </summary>
            <param name="Active">True to enable the media server; false to disable..</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.Active">
            <summary>
            True to enable the media server; false to disable.
            </summary>
            <value>True to enable the media server; false to disable.</value>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate)">
            <summary>
            Returns true if MediaServerUpdate instances are equal
            </summary>
            <param name="other">Instance of MediaServerUpdate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.MediaServerUpdate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.User">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.User" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Alias">Alias.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.User.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.User.Alias">
            <summary>
            Gets or Sets Alias
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.User.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.User.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.User.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.User)">
            <summary>
            Returns true if User instances are equal
            </summary>
            <param name="other">Instance of User to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.User.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="DeviceCount">DeviceCount.</param>
            <param name="ClientCount">ClientCount.</param>
            <param name="ChannelCount">ChannelCount.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.DeviceCount">
            <summary>
            Gets or Sets DeviceCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.ClientCount">
            <summary>
            Gets or Sets ClientCount
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.ChannelCount">
            <summary>
            Gets or Sets ChannelCount
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem)">
            <summary>
            Returns true if UserCollectionItem instances are equal
            </summary>
            <param name="other">Instance of UserCollectionItem to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserCollectionItem.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserConfig.Recording">
            <summary>
            True if to enable recording, false if to disable.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.#ctor(System.String,System.Collections.Generic.List{FM.LiveSwitch.Gateway.Http.Admin.Models.DeviceReport})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Devices">Devices.</param>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.Devices">
            <summary>
            Gets or Sets Devices
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.Equals(FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport)">
            <summary>
            Returns true if UserReport instances are equal
            </summary>
            <param name="other">Instance of UserReport to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Http.Admin.Models.UserReport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:FM.LiveSwitch.Gateway.Services.HookService.RegisterHook(FM.LiveSwitch.Models.AdvancedWebhook)">
            <summary>
            Registers a new hook to the gateway.
            </summary>
            <param name="hook">The hook to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Server.PropertySpec.#ctor(System.String,FM.LiveSwitch.Server.PropertySpec)">
            <summary>
            Make a new PropertySpec for a property named 'propertyName'. 
            For convenience you can set he 'next' field to form a linked
            list of PropertySpecs. 
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Server.PropertySpec.Fetch(System.Object)">
            <summary>
            Given an object fetch the property that this PropertySpec represents.  
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Server.PropertySpec.Next">
            <summary>
            A public field that can be used to form a linked list.   
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.PropertySpec.PropertyFetch">
            <summary>
            PropertyFetch is a helper class.  It takes a PropertyInfo and then knows how
            to efficiently fetch that property from a .NET object (See Fetch method).  
            It hides some slightly complex generic code.  
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Server.PropertySpec.PropertyFetch.FetcherForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Create a property fetcher from a .NET Reflection PropertyInfo class that
            represents a property of a particular type.  
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Server.PropertySpec.PropertyFetch.Fetch(System.Object)">
            <summary>
            Given an object, fetch the property that this propertyFech represents. 
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.ConnectorInfo">
            <summary>
            Connector information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ConnectorInfo.Protocols">
            <summary>
            Gets or sets the connector protocols.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ConnectorInfo.Region">
            <summary>
            Gets or sets the connector region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.Id">
            <summary>
            Gets the id of the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.Name">
            <summary>
            Gets the name of the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.BytesSent">
            <summary>
            Gets the number of bytes that were sent on the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.BytesReceived">
            <summary>
            Gets the number of bytes that were received on the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.PacketsSent">
            <summary>
            Gets the number of unicast packets that were sent on the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.PacketsReceived">
            <summary>
            Gets the number of unicast packets that were received on the interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.InterfaceReport.OutputQueueLength">
            <summary>
            Gets the length of the output queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.NonpagedSystemMemorySize">
            <summary>
            The amount of system memory, in bytes, allocated for this process that cannot be written to the virtual memory paging file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PagedMemorySize">
            <summary>
            The amount of memory, in bytes, allocated in the virtual memory paging file for this process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PagedSystemMemorySize">
            <summary>
            The amount of system memory, in bytes, allocated for this process that can be written to the virtual memory paging file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PeakPagedMemorySize">
            <summary>
            The maximum amount of memory, in bytes, allocated in the virtual memory paging file for this process since it was started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PeakVirtualMemorySize">
            <summary>
            The maximum amount of virtual memory, in bytes, allocated for this process since it was started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PeakWorkingSet">
            <summary>
            The maximum amount of physical memory, in bytes, allocated for this process since it was started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.PrivateMemorySize">
            <summary>
            The amount of memory, in bytes, allocated for this process that cannot be shared with other processes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.VirtualMemorySize">
            <summary>
            The amount of virtual memory, in bytes, allocated for this process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MemoryReport.WorkingSet">
            <summary>
            The amount of physical memory, in bytes, allocated for this process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.NetworkReport.TotalBytesSent">
            <summary>
            Gets the total number of bytes sent across all interfaces.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.NetworkReport.TotalBytesReceived">
            <summary>
            Gets the total number of bytes received across all interfaces.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.NetworkReport.InterfaceReports">
            <summary>
            Reports generated from the local network interfaces.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ProcessorReport.TotalProcessorTime">
            <summary>
            The amount of time, in seconds, that this process has spent utilizing the CPU. This value is the sum of the UserProcessorTime and the PrivilegedProcessorTime.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ProcessorReport.UserProcessorTime">
            <summary>
            The the amount of time, in seconds, that this process has spent running code inside the application portion of the process (not inside the operating system core).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ProcessorReport.PrivilegedProcessorTime">
            <summary>
            The amount of time, in seconds, that this process has spent running code inside the application portion of the process (not inside the operating system core).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ProcessorReport.CpuPercentage">
            <summary>
            The calculated percentage of CPU usage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ProcessorReport.ThreadCount">
            <summary>
            The number of threads currently in use by this process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.ClientTag">
            <summary>
            The client tag to use for the sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.ClientRoles">
            <summary>
            The client roles to use for the sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.DeviceId">
            <summary>
            The device ID to use for the sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.DeviceAlias">
            <summary>
            The device alias to use for the sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.UserId">
            <summary>
            The user ID to use for the sender.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServerMessage.UserAlias">
            <summary>
            The user alias to use for the sender.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.ServiceBaseInfo">
            <summary>
            Service base information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.Id">
            <summary>
            Gets or sets the service identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.Version">
            <summary>
            Gets or sets the service version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.ServiceReport">
            <summary>
            Gets or sets the service report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.Tag">
            <summary>
            Gets or sets the service tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.MachineName">
            <summary>
            Gets or sets the service machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.CoreCount">
            <summary>
            Gets or sets the service core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.PhysicalMemory">
            <summary>
            Gets or sets the service physical memory.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.OperatingSystem">
            <summary>
            Gets or sets the service operating system.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.OperatingSystemVersion">
            <summary>
            Gets or sets the service operating system version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.Architecture">
            <summary>
            Gets or sets the service architecture.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.NetworkInterfaces">
            <summary>
            Gets or sets the service network interfaces.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceBaseInfo.DeploymentId">
            <summary>
            Gets or sets the service deployment identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.GatewayInfo">
            <summary>
            Gateway information.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.MediaServerInfo">
            <summary>
            Media server information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MediaServerInfo.IceServerUris">
            <summary>
            Gets or sets the media server ICE server URIs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.MediaServerInfo.Region">
            <summary>
            Gets or sets the media server region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceReport.ProcessorReport">
            <summary>
            Gets or sets the processor report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceReport.MemoryReport">
            <summary>
            Gets or sets the memory report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.ServiceReport.NetworkReport">
            <summary>
            Gets or sets the network report.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Server.SipConnectorInfo">
            <summary>
            SIP connector information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Server.SignallingClient.UnregisterException">
            <summary>
            Gets the unregister exception, which is set if
            registration is reset abnormally.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BouncyCastle.EcdsaCrypto">
            <summary>
            Elliptic-curve-based cryptographic functions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.CreateKey(FM.LiveSwitch.EcdsaNamedCurve)">
            <summary>
            Creates an ECDSA key.
            </summary>
            <param name="namedCurve">The named curve.</param>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.Sign(System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Signs data using a specified key.
            </summary>
            <param name="data">The data.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BouncyCastle.EcdsaCrypto.Verify(System.Byte[],System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Verifies a signature using a specified key and data.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.CryptoLibrary">
            <summary>
            A crypto library.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CryptoLibrary.BouncyCastle">
            <summary>
            Indicates that the BouncyCastle library should be used.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferPoolTracer">
            <summary>
            A data buffer pool tracer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Pool">
            <summary>
            Gets the underlying pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Tag">
            <summary>
            Gets the tag that identifies requests to the underlying pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPoolTracer.Statistics">
            <summary>
            Gets the traced usage statistics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.#ctor(System.String,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPoolTracer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPoolTracer.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.IDataBufferPool">
            <summary>
            A data buffer pool interface.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDataBufferPool.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.IDispatchQueue`1">
            <summary>
            A dispatch queue interface.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IDispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.IDispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ISystemClock">
            <summary>
            A system clock interface.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ISystemClock.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            10,000 ticks is equal to 1 millisecond.
            </summary>
            <returns>The current system timestamp in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedAutoReleasePool">
            <summary>
            Managed auto-release pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoReleasePool.LoopBegin">
            <summary>
            Should be invoked when the loop begins before other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoReleasePool.LoopEnd">
            <summary>
            Should be invoked when the loop ends after other code.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PendingPromise">
            <summary>
            Pending promise and result.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.SystemClock">
            <summary>
            A system clock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SystemClock.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            10,000 ticks is equal to 1 millisecond.
            </summary>
            <returns>The current system timestamp in ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ThreadDispatchQueue`1">
            <summary>
            A single-thread dispatch queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ThreadDispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ThreadDispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.WaitForCompletion">
            <summary>
            Blocks until the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ThreadDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FM.LiveSwitch.EcdsaCrypto">
            <summary>
            Elliptic-curve-based cryptographic functions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaCrypto.DefaultNamedCurve">
            <summary>
            Gets or sets the default curve.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.CreateKey">
            <summary>
            Creates an ECDSA key.
            </summary>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.CreateKey(FM.LiveSwitch.EcdsaNamedCurve)">
            <summary>
            Creates an ECDSA key.
            </summary>
            <param name="namedCurve">The named curve.</param>
            <returns>An ECDSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.Sign(System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Signs data using a specified key.
            </summary>
            <param name="data">The data.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaCrypto.Verify(System.Byte[],System.Byte[],FM.LiveSwitch.EcdsaKey)">
            <summary>
            Verifies a signature using a specified key and data.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.MD5Managed">
            <summary>
            MD5Managed: A HashAlgorithm implementation that acts as a thin wrapper
            around a C# translation of the MD5 reference implementation. The C code
            has been translated as closely as possible so that most of the original
            structure remains and comparisons between the two are straightforward.
            </summary>
            <remarks>
            Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm.
            
            Specification:
            RFC1321 - The MD5 Message-Digest Algorithm
            http://www.faqs.org/rfcs/rfc1321.html
            
            Original license:
            Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
            rights reserved.
            
            License to copy and use this software is granted provided that it
            is identified as the "RSA Data Security, Inc. MD5 Message-Digest
            Algorithm" in all material mentioning or referencing this software
            or this function.
            
            License is also granted to make and use derivative works provided
            that such works are identified as "derived from the RSA Data
            Security, Inc. MD5 Message-Digest Algorithm" in all material
            mentioning or referencing the derived work.
            
            RSA Data Security, Inc. makes no representations concerning either
            the merchantability of this software or the suitability of this
            software for any particular purpose. It is provided "as is"
            without express or implied warranty of any kind.
            
            These notices must be retained in any copies of any part of this
            documentation and/or software.
            </remarks>
            
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.Initialize">
            <summary>
            Initializes internal state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.InitializeVariables">
            <summary>
            Initializes variables.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the hash code with the data provided.
            </summary>
            <param name="array">Data to hash.</param>
            <param name="ibStart">Start position.</param>
            <param name="cbSize">Number of bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.MD5Managed.HashFinal">
            <summary>
            Finalizes the hash code and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.MD5Managed.Hash">
            <summary>
            Returns the hash as an array of bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MD5Managed.HashSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Native">
            <summary>
            Base class for native interop.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Native.AllocCallbackDelegate">
            <summary>
            An alloc callback delegate.
            </summary>
            <param name="size">The size.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Native.ReleaseCallbackDelegate">
            <summary>
            A release callback delegate.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.ErrorLogCallbackDelegate">
            <summary>
            An error log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.WarnLogCallbackDelegate">
            <summary>
            A warn log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.InfoLogCallbackDelegate">
            <summary>
            An info log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.DebugLogCallbackDelegate">
            <summary>
            A debug log callback delegate.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.ErrorLogWithScopeCallbackDelegate">
            <summary>
            An error log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.WarnLogWithScopeCallbackDelegate">
            <summary>
            A warn log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.InfoLogWithScopeCallbackDelegate">
            <summary>
            An info log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.Native.DebugLogWithScopeCallbackDelegate">
            <summary>
            A debug log with scope callback delegate.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="F:FM.LiveSwitch.Native.AllocCallback">
            <summary>
            A static alloc callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.Alloc64Callback">
            <summary>
            A static alloc callback (64-bit aligned).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ReleaseCallback">
            <summary>
            A static release callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ErrorLogCallback">
            <summary>
            A static error log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.WarnLogCallback">
            <summary>
            A static warn log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.InfoLogCallback">
            <summary>
            A static info log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.DebugLogCallback">
            <summary>
            A static debug log callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.ErrorLogWithScopeCallback">
            <summary>
            A static error log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.WarnLogWithScopeCallback">
            <summary>
            A static warn log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.InfoLogWithScopeCallback">
            <summary>
            A static info log with scope callback.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Native.DebugLogWithScopeCallback">
            <summary>
            A static debug log with scope callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Native.Alloc64Align(System.Int32)">
            <summary>
            Allocates 64-bit aligned memory from the data buffer pool.
            </summary>
            <param name="size">The number of bytes to allocate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.Alloc(System.Int32)">
            <summary>
            Allocates memory from the data buffer pool.
            </summary>
            <param name="size">The number of bytes to allocate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.Release(System.IntPtr)">
            <summary>
            Releases memory to the data buffer pool.
            </summary>
            <param name="pointer">The native pointer.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.PullBuffer(System.IntPtr)">
            <summary>
            Gets the data buffer associated with a pointer.
            This buffer MUST be freed later.
            </summary>
            <param name="pointer">The native pointer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Native.ErrorLog(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.WarnLog(System.String)">
            <summary>
            Logs a warn message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.InfoLog(System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.DebugLog(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.ErrorLogWithScope(System.String,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.WarnLogWithScope(System.String,System.String)">
            <summary>
            Logs a warn message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.InfoLogWithScope(System.String,System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Native.DebugLogWithScope(System.String,System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:FM.LiveSwitch.ProxyCredentialsCache">
            <summary>
            Proxy credentials cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentialsCache.Cache">
            <summary>
            Gets the underlying cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentialsCache.DefaultCredentials">
            <summary>
            Gets or sets the default credentials.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyCredentialsCache"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.GetCredentials(System.String)">
            <summary>
            Gets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <returns>The proxy credentials, if they exist, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.SetCredentials(System.String,FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.SetCredentials(System.String[],FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP addresss.
            </summary>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.ToJson(FM.LiveSwitch.ProxyCredentialsCache)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentialsCache.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ProxyCredentials">
            <summary>
            Proxy credentials.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyCredentials"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.ToJson(FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ProxyCredentials.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ProxyAuthCheckResult">
            <summary>
            Proxy authentication check result.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.NeedsAuthentication">
            <summary>
            Gets or sets whether the proxy needs authentication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.ProxyIPAddress">
            <summary>
            Gets or sets the first proxy IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ProxyAuthCheckResult.ProxyIPAddresses">
            <summary>
            Gets or sets the proxy IP addresses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ProxyAuthCheckResult.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ProxyAuthCheckResult"/> class.
            </summary>
            <param name="needsAuthentication">Whether the proxy needs authentication.</param>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Proxy">
            <summary>
            Proxy utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.GetCredentials(System.String)">
            <summary>
            Gets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <returns>The proxy credentials, if they exist, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.SetCredentials(System.String,FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP address.
            </summary>
            <param name="proxyIPAddress">The proxy IP address.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.SetCredentials(System.String[],FM.LiveSwitch.ProxyCredentials)">
            <summary>
            Sets the proxy credentials for the given proxy IP addresss.
            </summary>
            <param name="proxyIPAddresses">The proxy IP addresses.</param>
            <param name="proxyCredentials">The proxy credentials.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.ImportCredentials(System.String)">
            <summary>
            Imports credentials from JSON.
            </summary>
            <param name="credentialsJson">The credentials in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.ExportCredentials">
            <summary>
            Exports the credentials to JSON.
            </summary>
            <returns>The credentials in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Proxy.AuthCheck(System.String)">
            <summary>
            Checks if proxy authentication is required to access a given URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:FM.LiveSwitch.Action0">
            <summary>
            Generic method signature for callbacks with no parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action1`1">
            <summary>
            Generic method signature for callbacks with one parameter.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action10`10">
            <summary>
            Generic method signature for callbacks with ten parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action2`2">
            <summary>
            Generic method signature for callbacks with two parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action3`3">
            <summary>
            Generic method signature for callbacks with three parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action4`4">
            <summary>
            Generic method signature for callbacks with four parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action5`5">
            <summary>
            Generic method signature for callbacks with five parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action6`6">
            <summary>
            Generic method signature for callbacks with six parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action7`7">
            <summary>
            Generic method signature for callbacks with seven parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action8`8">
            <summary>
            Generic method signature for callbacks with eight parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Action9`9">
            <summary>
            Generic method signature for callbacks with nice parameters.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AddressType">
            <summary>
            Address types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.IPv4">
            <summary>
            Indicates an IP version 4 address.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.IPv6">
            <summary>
            Indicates an IP version 6 address.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AddressType.Unknown">
            <summary>
            Indicates an unknown address type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Ascii">
            <summary>
            ASCII encoding/decoding utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Encode(System.String)">
            <summary>
            Encodes a string to a UTF-8 byte array.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.GetByteCount(System.String)">
            <summary>
            Gets the number of bytes that would be returned by
            a call to encode.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Decode(System.Byte[])">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Ascii.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="index">The index to start reading.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Any">
            <summary>
            An ASN.1 "any".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Any.SourceData">
            <summary>
            Gets the source data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBuffer">
            <summary>
            Gets the buffer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBytes(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="any">Any.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetBuffer(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="any">Any.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBytes(System.Byte[])">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Parses the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="byteCount">The byte count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.ParseBuffer(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="byteCount">The byte count.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Pad(System.Byte[],System.Int32)">
            <summary>
            Pads the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Pad(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[])">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[],System.Int32)">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="minLength">The minimum length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Trim(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Trims the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128(System.Byte[])">
            <summary>
            Encodes a value (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128(System.Byte[])">
            <summary>
            Decodes a value (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a value (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.GetLength128(System.Byte[],System.Int32)">
            <summary>
            Gets the length (base 128).
            </summary>
            <param name="encoded">The encoded data.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Long(System.Int64)">
            <summary>
            Encodes a length (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Long(System.Byte[])">
            <summary>
            Decodes a length (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Long(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a length (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Integer(System.Int32)">
            <summary>
            Encodes an integer (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Integer(System.Byte[])">
            <summary>
            Decodes an integer (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Integer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes an integer (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Encode128Short(System.Int16)">
            <summary>
            Encodes a short (base 128).
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Short(System.Byte[])">
            <summary>
            Decodes a short (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.Decode128Short(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a short (base 128).
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.SerializeTimestamp(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Serializes a timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="yearLength">Length of the year.</param>
            <param name="monthLength">Length of the month.</param>
            <param name="dayLength">Length of the day.</param>
            <param name="hourLength">Length of the hour.</param>
            <param name="minuteLength">Length of the minute.</param>
            <param name="secondLength">Length of the second.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Any.DeserializeTimestamp(System.String)">
            <summary>
            Deserializes a timestamp.
            </summary>
            <param name="timestampString">The timestamp string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Array">
            <summary>
            An ASN.1 array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Array.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ArrayElement">
            <summary>
            An ASN.1 array element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ArrayElement.#ctor(System.Type,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ArrayElement"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ArrayOf`1">
            <summary>
            An ASN.1 typed array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ArrayOf`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.BitString">
            <summary>
            An ASN.1 bit string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BitString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BitString.ValueBytes">
            <summary>
            Gets or sets the value bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BitString"/> class.
            </summary>
            <param name="valueBytes">The value bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BitString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.BmpString">
            <summary>
            ASN.1 BMP (basic multilingual plane) string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.BmpString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BmpString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.BmpString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.BmpString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Boolean">
            <summary>
            An ASN.1 boolean.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Boolean.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Boolean"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Boolean"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Boolean.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Class">
            <summary>
            ASN.1 class constants.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Universal">
            <summary>
            Indicates a universal class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Application">
            <summary>
            Indicates an application class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.ContextSpecific">
            <summary>
            Indicates a context-specific class.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.Class.Private">
            <summary>
            Indicates a private class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Explicit`1">
            <summary>
            An ASN.1 explicit value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Explicit`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Explicit`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Explicit`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Explicit`1.Wrap``1(System.Int32,``0)">
            <summary>
            Wraps an explicit value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GeneralizedTime">
            <summary>
            An ASN.1 generalized time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GeneralizedTime.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralizedTime"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralizedTime"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralizedTime.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GeneralString">
            <summary>
            An ASN.1 general string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GeneralString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GeneralString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GeneralString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.GraphicString">
            <summary>
            An ASN.1 graphic string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.GraphicString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GraphicString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.GraphicString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.GraphicString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Ia5String">
            <summary>
            An ASN.1 IA5 (ASCII) string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Ia5String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Ia5String"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Ia5String"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Ia5String.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Implicit`1">
            <summary>
            An ASN.1 implicit value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Implicit`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Implicit`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Implicit`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Implicit`1.Wrap``1(System.Int32,``0)">
            <summary>
            Wraps an implicit value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Integer">
            <summary>
            An ASN.1 integer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Integer.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Integer.LongValue">
            <summary>
            Gets or sets the long value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Integer"/> class.
            </summary>
            <param name="longValue">The long value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Integer.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Null">
            <summary>
            An ASN.1 null value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Null.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.NumericString">
            <summary>
            An ASN.1 numeric string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.NumericString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.NumericString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.NumericString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.NumericString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.ObjectIdentifier">
            <summary>
            An ASN.1 object identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.ObjectIdentifier.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ObjectIdentifier"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.ObjectIdentifier"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.AreEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks if two long arrays are equal.
            </summary>
            <param name="values1">The first long array.</param>
            <param name="values2">The second long array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.ObjectIdentifier.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.OctetString">
            <summary>
            An ASN.1 octet string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.OctetString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.OctetString.ValueBytes">
            <summary>
            Gets or sets the value bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.OctetString"/> class.
            </summary>
            <param name="valueBytes">The value bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.OctetString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.PrintableString">
            <summary>
            An ASN.1 printable string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.PrintableString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.PrintableString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.PrintableString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.PrintableString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Sequence">
            <summary>
            An ASN.1 sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Sequence"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.#ctor(FM.LiveSwitch.Asn1.Any[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Sequence"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Sequence.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SequenceElement">
            <summary>
            An ASN.1 sequence element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SequenceElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SequenceOf`1">
            <summary>
            An ASN.1 typed sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceOf`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SequenceOf`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SequenceOf`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Set">
            <summary>
            An ASN.1 set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Set"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.#ctor(FM.LiveSwitch.Asn1.Any[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Set"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Set.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SetElement">
            <summary>
            An ASN.1 set element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Optional">
            <summary>
            Gets or sets a value indicating whether this element is optional.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Default">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.SetElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetElement.#ctor(FM.LiveSwitch.Asn1.Any,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetElement"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultt">The default value.</param>
            <param name="optional">Whether this element is optional.</param>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.SetOf`1">
            <summary>
            An ASN.1 typed set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetOf`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.SetOf`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.SetOf`1.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UniversalString">
            <summary>
            An ASN.1 universal string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.UniversalString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UniversalString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UniversalString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UniversalString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UniversalTag">
            <summary>
            ASN.1 universal tag constants.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BooleanType">
            <summary>
            Indicates a boolean type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.IntegerType">
            <summary>
            Indicates an integer type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BitStringType">
            <summary>
            Indicates a bit-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.OctetStringType">
            <summary>
            Indicates an octet-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.NullType">
            <summary>
            Indicates a null type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ObjectIdentifierType">
            <summary>
            Indicates an object-identifier type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ObjectDescriptorType">
            <summary>
            Indicates an object-descriptor type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.ExternalType">
            <summary>
            Indicates an external type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.RealType">
            <summary>
            Indicates a real type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.EnumeratedType">
            <summary>
            Indicates an enumerated type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.EmbeddedPdvType">
            <summary>
            Indicates an embedded-PDV type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.Utf8StringType">
            <summary>
            Indicates a UTF8-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.RelativeOidType">
            <summary>
            Indicates a relative-OID type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.SequenceType">
            <summary>
            Indicates a sequence or sequence-of type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.SetType">
            <summary>
            Indicates a set or set-of type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.NumericStringType">
            <summary>
            Indicates a numeric-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.PrintableStringType">
            <summary>
            Indicates a printable-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.TeletexStringType">
            <summary>
            Indicates a Teletex-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.VideotexStringType">
            <summary>
            Indicates a Videotex-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.Ia5StringType">
            <summary>
            Indicates an IA5-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.UtcTimeType">
            <summary>
            Indicates a UTC-time type type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GeneralizedTimeType">
            <summary>
            Indicates a generalized-time type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GraphicStringType">
            <summary>
            Indicates a graphic-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.VisibleStringType">
            <summary>
            Indicates a visible-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.GeneralStringType">
            <summary>
            Indicates a general-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.UniversalStringType">
            <summary>
            Indicates a universal-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.CharacterStringType">
            <summary>
            Indicates a character-string type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Asn1.UniversalTag.BmpStringType">
            <summary>
            Indicates a BMP-string type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Unknown">
            <summary>
            An ASN.1 unknown value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Klass">
            <summary>
            Gets or sets the class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.IsConstructed">
            <summary>
            Gets or sets a value indicating whether this is a constructed encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.IsIndefinite">
            <summary>
            Gets or sets a value indicating whether this is an indefinite-length encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Unknown.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Unknown"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Unknown"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.ParseContents(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The klass.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Unknown.Unwrap(FM.LiveSwitch.Asn1.Any,System.Int32@)">
            <summary>
            Unwraps an explicit or implicit value.
            </summary>
            <param name="any">The wrapped value.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Asn1.UtcTime">
            <summary>
            An ASN.1 UTC time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.UtcTime.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UtcTime" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.UtcTime"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.UtcTime.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.Utf8String">
            <summary>
            An ASN.1 UTF-8 string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.Utf8String.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Utf8String"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.Utf8String"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.Utf8String.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Asn1.VisibleString">
            <summary>
            An ASN.1 visible string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Asn1.VisibleString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.VisibleString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Asn1.VisibleString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.GetProperties(System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the properties of the "any" value.
            </summary>
            <param name="tag">The tag.</param>
            <param name="klass">The class.</param>
            <param name="isConstructed">Whether this is a constructed encoding.</param>
            <param name="isIndefinite">Whether this is an indefinite-length encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.GetContents">
            <summary>
            Gets the contents of the "any" value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Asn1.VisibleString.ParseContents(System.Byte[])">
            <summary>
            Parses the contents.
            </summary>
            <param name="contents">The contents.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.AsymmetricKey">
            <summary>
            An asymmetric key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.AsymmetricKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AsymmetricKey.CreateKey(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Creates a key.
            </summary>
            <param name="keyType">The key type.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.AsymmetricKeyType">
            <summary>
            Asymmetric key types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AsymmetricKeyType.Rsa">
            <summary>
            Indicates an RSA key.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.AsymmetricKeyType.Ecdsa">
            <summary>
            Indicates an ECDSA key.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AtomicMutex">
            <summary>
            A managed mutex.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicMutex.IsLocked">
            <summary>
            Gets if the mutex is locked or not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.#ctor">
            <summary>
            Creates a new instance of an AtomicMutex.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.TryLock">
            <summary>
            Tries to obtain a lock with this thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicMutex.Release">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.AtomicLong">
            <summary>
            A long that can be operatered on atomically.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicLong.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.#ctor(System.Int64)">
            <summary>
            Create a new AtomicLong with an initial value.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.#ctor">
            <summary>
            Create a new AtomicLong with a initial value of 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.CompareAndSwap(System.Int64,System.Int64)">
            <summary>
            Compares two 64-bit signed integers for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="expected">The value to compare.</param>
            <param name="newValue">The value used to replace.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Add(System.Int64)">
            <summary>
            Atomically add a integer to the value.
            </summary>
            <param name="delta">The amount to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Subtract(System.Int64)">
            <summary>
            Atomically subtract a integer to the value.
            </summary>
            <param name="delta">The amount to subtract.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Increment">
            <summary>
            Atomically increment the value by 1.
            </summary>
            <returns>The value incremented by 1.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicLong.Decrement">
            <summary>
            Atomically decrement the value by 1.
            </summary>
            <returns>The value decremented by one.</returns>
        </member>
        <member name="T:FM.LiveSwitch.AtomicInteger">
            <summary>
            A integer that can be operatered on atomically.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AtomicInteger.Value">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.#ctor(System.Int32)">
            <summary>
            Create a new AtomicInteger with an initial value.
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.#ctor">
            <summary>
            Create a new AtomicInteger with a initial value of 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.CompareAndSwap(System.Int32,System.Int32)">
            <summary>
            Compares two 32-bit signed integers for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="expected">The value to compare.</param>
            <param name="newValue">The value used to replace.</param>
            <returns>The original value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Add(System.Int32)">
            <summary>
            Atomically add a integer to the value.
            </summary>
            <param name="delta">The amount to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Subtract(System.Int32)">
            <summary>
            Atomically subtract a integer to the value.
            </summary>
            <param name="delta">The amount to subtract.</param>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Increment">
            <summary>
            Atomically increment the value by 1.
            </summary>
            <returns>The value incremented by 1.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AtomicInteger.Decrement">
            <summary>
            Atomically decrement the value by 1.
            </summary>
            <returns>The value decremented by one.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Base64">
            <summary>
            Base64 utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Base64.Encode(System.Byte[])">
            <summary>
            Computes the base64 representation of a byte array.
            </summary>
            <param name="b">The input byte array.</param>
            <returns>The base64 string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.EncodeBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the base64 representation of a buffer.
            </summary>
            <param name="buffer">The input buffer.</param>
            <returns>The base64 string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.Decode(System.String)">
            <summary>
            Computes the byte representation of a base64 string.
            </summary>
            <param name="s">The input base64 string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryEncode(System.Byte[],System.String@)">
            <summary>
            Computes the base64 representation of a byte array.
            </summary>
            <param name="b">The input byte array.</param>
            <param name="encoded">The base64 string.</param>
            <returns><c>true</c> if the encode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryEncodeBuffer(FM.LiveSwitch.DataBuffer,System.String@)">
            <summary>
            Computes the base64 representation of a buffer.
            </summary>
            <param name="buffer">The input buffer.</param>
            <param name="encoded">The base64 string.</param>
            <returns><c>true</c> if the encode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Base64.TryDecode(System.String,System.Byte[]@)">
            <summary>
            Computes the byte representation of a base64 string.
            </summary>
            <param name="s">The input base64 string.</param>
            <param name="decoded">The byte array.</param>
            <returns><c>true</c> if the decode succeeds; otherwise <c>false</c></returns>
        </member>
        <member name="T:FM.LiveSwitch.Binary">
            <summary>
            Common binary methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes1(System.Boolean,System.Int32)">
            <summary>
            Converts a 1-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes1(System.Boolean,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 1-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 1-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes1(System.Byte[],System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Tries to read a 1-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes2(System.Int32,System.Int32)">
            <summary>
            Converts a 2-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes2(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 2-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes2(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes2(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 2-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes3(System.Int32,System.Int32)">
            <summary>
            Converts a 3-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes3(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 3-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes3(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes3(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 3-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes4(System.Int32,System.Int32)">
            <summary>
            Converts a 4-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes4(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 4-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes4(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes4(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 4-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes5(System.Int32,System.Int32)">
            <summary>
            Converts a 5-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes5(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 5-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes5(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes5(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 5-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes6(System.Int32,System.Int32)">
            <summary>
            Converts a 6-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes6(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 6-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes6(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes6(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 6-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes7(System.Int32,System.Int32)">
            <summary>
            Converts a 7-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes7(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 7-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes7(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes7(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 7-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes8(System.Int32)">
            <summary>
            Converts an 8-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes8(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes an 8-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes8(System.Byte[],System.Int32)">
            <summary>
            Reads an 8-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes8(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Tries to read an 8-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes9(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 9-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes9(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 9-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes9(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes9(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 9-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes10(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 10-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes10(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 10-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes10(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes10(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 10-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes11(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 11-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes11(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 11-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes11(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes11(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 11-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes12(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 12-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes12(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 12-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes12(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes12(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 12-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes13(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 13-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes13(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 13-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes13(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes13(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 13-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes14(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 14-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes14(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 14-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes14(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes14(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 14-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes15(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 15-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes15(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 15-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes15(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes15(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 15-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes16(System.Int32,System.Boolean)">
            <summary>
            Converts a 16-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes16(System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 16-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 16-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes16(System.Byte[],System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Tries to read a 16-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes17(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 17-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes17(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 17-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes17(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 17-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes17(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 17-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes18(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts an 18-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes18(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes an 18-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes18(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes18(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 18-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes19(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 19-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes19(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 19-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes19(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 19-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes19(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 19-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes20(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 20-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes20(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 20-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes20(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 20-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes20(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 20-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes21(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 21-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes21(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 21-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes21(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 21-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes21(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 21-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes22(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 22-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes22(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 22-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes22(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 22-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes22(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 22-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes23(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a 23-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes23(System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 23-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes23(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an 23-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes23(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 23-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="bitOffset">The offset of the value within the byte.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes24(System.Int32,System.Boolean)">
            <summary>
            Converts a 24-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes24(System.Int32,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 24-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes24(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 24-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes24(System.Byte[],System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Tries to read a 24-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes32(System.Int64,System.Boolean)">
            <summary>
            Converts a 32-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes32(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 32-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 32-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes32(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 32-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes40(System.Int64,System.Boolean)">
            <summary>
            Converts a 40-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes40(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 40-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes40(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 40-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes40(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 40-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes48(System.Int64,System.Boolean)">
            <summary>
            Converts a 48-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes48(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 48-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes48(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 48-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes48(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 48-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes56(System.Int64,System.Boolean)">
            <summary>
            Converts a 56-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes56(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 56-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes56(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 56-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes56(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 56-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes64(System.Int64,System.Boolean)">
            <summary>
            Converts a 64-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.ToBytes64(System.Int64,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Writes a 64-bit value to a byte array.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="output">The output byte array.</param>
            <param name="outputIndex">The index to start writing.</param>
            <returns>The output byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.FromBytes64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a 64-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.TryFromBytes64(System.Byte[],System.Int32,System.Boolean,System.Int64@)">
            <summary>
            Tries to read a 64-bit value from a byte array.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inputIndex">The index to start reading.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the index is valid and the value was read; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Boolean)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="padLeft">Whether to pad extra zero-bits to the left.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Int32@)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BitStringToBytes(System.String,System.Boolean,System.Int32@)">
            <summary>
            Converts a bit-string to bytes.
            </summary>
            <param name="bitString">The bit-string.</param>
            <param name="padLeft">Whether to pad extra zero-bits to the left.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[])">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.BytesToBitString(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts bytes to a bit-string.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="numberOfUnusedBits">The number of unused bits.</param>
            <param name="trimLeft">Whether to trim unused bits from the left.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[])">
            <summary>
            Interleaves a byte array i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Interleaves a byte array i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Interleave(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Interleaves a byte array  i.e.
            XXXXYYYY to XYXYXYXY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <param name="reversePlanes">XXXXYYYY to YXYXYXYX</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Interleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">The start.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="reversePlanes">Reverse output plane order.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[])">
            <summary>
            Deinterleaves a byte array i.e.
            XYXYXYXY to XXXXYYYY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deinterleaves a byte array i.e.
            XYXYXYXY to XXXXYYYY
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Deinterleave(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deinterleaves a byte array 
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <param name="reversePlanes">The reversePlanes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deinterleave and transform (rotate) a byte array containing two planes
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">The start.</param>
            <param name="rotation">Values 0, 90, 180, 270.</param>
            <param name="reversePlanes">Reverse output plane order.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="start">Start position for both input and output frame</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270)
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="inputStart">The inputStart.</param>
            <param name="outputStart">The outputStart.</param>
        </member>
        <member name="M:FM.LiveSwitch.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a byte containing a 2D plane (rotates 90, 180, 270).
            When transforming interleaved planes. Set the chunkLength to 
            the number of planes.
            </summary>
            <param name="inputFrame">The inputFrame.</param>
            <param name="outputFrame">The outputFrame.</param>
            <param name="rotation">The rotation.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="stride">The stride.</param>
            <param name="inputStart">The inputStart.</param>
            <param name="outputStart">The outputStart.</param>
            <param name="chunkLength">The chunkLength.</param>
        </member>
        <member name="T:FM.LiveSwitch.BitAssistant">
            <summary>
            Contains methods for cross-platform bit manipulation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastByte(System.Int32)">
            <summary>
            Casts an integer to a byte.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastInteger(System.Byte)">
            <summary>
            Casts a byte to an integer.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.CastLong(System.Byte)">
            <summary>
            Casts a byte to a long.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShift(System.Byte,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a byte value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftShort(System.Int16,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a short value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftInteger(System.Int32,System.Int32)">
            <summary>
            Performs a bit-wise left shift on an integer value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.LeftShiftLong(System.Int64,System.Int32)">
            <summary>
            Performs a bit-wise left shift on a long value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShift(System.Byte,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a byte value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftShort(System.Int16,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a short value.
            </summary>
            <param name="value">The short value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftInteger(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on an integer value.
            </summary>
            <param name="value">The integer value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.RightShiftLong(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bit-wise right shift on a long value.
            </summary>
            <param name="value">The long value.</param>
            <param name="count">The number of bits to shift.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two sequences of bytes for equality.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="array2">The second byte array.</param>
            <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqual(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares two sequences of bytes for equality.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="offset1">The first byte array offset.</param>
            <param name="array2">The second byte array.</param>
            <param name="offset2">The second byte array offset.</param>
            <param name="length">The length.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Byte[])">
            <summary>
            Compares two sequences of bytes for equality in constant time.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="array2">The second byte array.</param>
            <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares two sequences of bytes for equality in constant time.
            </summary>
            <param name="array1">The first byte array.</param>
            <param name="offset1">The first byte array offset.</param>
            <param name="array2">The second byte array.</param>
            <param name="offset2">The second byte array offset.</param>
            <param name="length">The length.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SubArray(System.Byte[],System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.SubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <param name="count">The number of bytes to copy into the subarray.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Reverse(System.Byte[])">
            <summary>
            Performs an in-place reversal of a byte array.
            </summary>
            <param name="array">The array to reverse.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from one array to another.
            </summary>
            <param name="source">The source bytes.</param>
            <param name="sourceIndex">The starting index for copying from the source.</param>
            <param name="destination">The destination bytes.</param>
            <param name="destinationIndex">The starting index for copying to the destination.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.Set(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets a value across an array.
            </summary>
            <param name="array">The array bytes.</param>
            <param name="index">The starting index.</param>
            <param name="length">The number of bytes to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hexadecimal string.
            </summary>
            <param name="array">The byte array.</param>
            <returns>The hexadecimal string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a hexadecimal string.
            </summary>
            <param name="array">The byte array.</param>
            <param name="offset">The offset into the array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>
            The hexadecimal string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetHexBytes(System.String)">
            <summary>
            Converts a hexadecimal string to a byte array.
            </summary>
            <param name="s">The hexadecimal string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryString(System.Byte[])">
            <summary>
            Converts a byte array to a binary string.
            </summary>
            <param name="array">The byte array.</param>
            <returns>
            The binary string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a binary string.
            </summary>
            <param name="array">The byte array.</param>
            <param name="offset">The offset into the array.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>
            The binary string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.GetBinaryBytes(System.String)">
            <summary>
            Converts a binary string to a byte array.
            </summary>
            <param name="s">The binary string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertSingleToBytes(System.Single,System.Boolean)">
            <summary>
            Converts a single to a byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertBytesToSingle(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Converts a byte array into a single.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertDoubleToBytes(System.Double,System.Boolean)">
            <summary>
            Convert a double to a byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitAssistant.ConvertBytesToDouble(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Converts a byte array into a double.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether to use little-endian format.</param>
        </member>
        <member name="T:FM.LiveSwitch.BooleanHolder">
            <summary>
            Class to hold a boolean value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BooleanHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BooleanHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BooleanHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BooleanHolder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BooleanHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Build">
            <summary>
            Details about the current build.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Build.VersionConstant">
            <summary>
            Gets the build version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Version">
            <summary>
            Gets the full build version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.MajorVersion">
            <summary>
            Gets the build major version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.MinorVersion">
            <summary>
            Gets the build minor version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.PatchVersion">
            <summary>
            Gets the build patch version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.RevisionVersion">
            <summary>
            Gets the build revision version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Year">
            <summary>
            Gets the build year.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Month">
            <summary>
            Gets the build month.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Day">
            <summary>
            Gets the build day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Build.Date">
            <summary>
            Gets the build date.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ByteCollection">
            <summary>
            A collection of bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteCollection.Count">
            <summary>
            Gets the number of bytes in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteCollection"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteCollection"/> class.
            </summary>
            <param name="buffer">The bytes to use as initial data.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.Add(System.Byte)">
            <summary>
            Adds a byte to the collection.
            </summary>
            <param name="b">The byte to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.AddRange(System.Byte[])">
            <summary>
            Adds a range of bytes to the collection.
            </summary>
            <param name="buffer">The range of bytes to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.AddRange(FM.LiveSwitch.ByteCollection)">
            <summary>
            Adds a byte collection to this collection.
            </summary>
            <param name="collection">The byte collection to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of bytes from the collection.
            </summary>
            <param name="index">The index to start removing.</param>
            <param name="count">The number of bytes to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.InsertRange(System.Int32,System.Byte[])">
            <summary>
            Inserts a range of bytes into the collection.
            </summary>
            <param name="index">The index to start adding.</param>
            <param name="buffer">The range of bytes to insert.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.InsertRange(System.Int32,FM.LiveSwitch.ByteCollection)">
            <summary>
            Inserts a byte collection into this collection.
            </summary>
            <param name="index">The index to start adding.</param>
            <param name="collection">The byte collection to insert.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of bytes from the collection.
            </summary>
            <param name="index">The index to start getting.</param>
            <param name="count">The number of bytes to get.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.Get(System.Int32)">
            <summary>
            Gets a byte from the collection.
            </summary>
            <param name="index">The index to get.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteCollection.ToArray">
            <summary>
            Converts this collection to an array.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.ByteHolder">
            <summary>
            Class to hold a byte value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteHolder.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.ByteInputStream">
            <summary>
            An buffer of bytes that can be read sequentially.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteInputStream"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ByteInputStream"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:FM.LiveSwitch.ByteInputStream.Available">
            <summary>
            Gets the number of available bytes for reading.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Mark">
            <summary>
            Marks the current position for a later reset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Read">
            <summary>
            Reads a value from the byte array.
            </summary>
            <returns>The byte, or -1 if no more bytes are available for reading.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a segment from the byte array.
            </summary>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Reset">
            <summary>
            Resets the stream to the marked position.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteInputStream.Skip(System.Int32)">
            <summary>
            Advances the stream position by the amount specified.
            </summary>
            <param name="n">The number of bytes to skip.</param>
            <returns>The number of bytes skipped.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ByteOutputStream">
            <summary>
            An buffer of bytes that can be written sequentially.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.Reset">
            <summary>
            Empties this stream and resets it.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ByteOutputStream.Size">
            <summary>
            Gets the number of bytes written to the stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.ToArray">
            <summary>
            Converts the stream to a byte array.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteBuffer(System.Byte[])">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.Write(System.Byte)">
            <summary>
            Writes a value to the stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ByteOutputStream.WriteTo(FM.LiveSwitch.ByteOutputStream)">
            <summary>
            Writes the contents of this stream to another stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="F:FM.LiveSwitch.BZip2.DecompressionState.unzftab">
            Freq table collected to save a pass over the data during
            decompression.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.DecompressionState.initTT(System.Int32)">
             Initializes the tt array.
            
             This method is called when the required length of the array is known.
             I don't initialize it at construction time to avoid unneccessary
             memory allocation when compressing small files.
        </member>
        <member name="T:FM.LiveSwitch.BZip2.Decompressor">
            <summary>
            A bzip2 decompressor.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BZip2.Decompressor"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read data from the stream.
             </summary>
            
             <remarks>
               <para>
                 To decompress a BZip2 data stream, create a <c>BZip2InputStream</c>,
                 providing a stream that reads compressed data.  Then call Read() on
                 that <c>BZip2InputStream</c>, and the data read will be decompressed
                 as you read.
               </para>
            
               <para>
                 A <c>BZip2InputStream</c> can be used only for <c>Read()</c>, not for <c>Write()</c>.
               </para>
             </remarks>
            
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.ReadByte">
            <summary>
              Read a single byte from the stream.
            </summary>
            <returns>the byte read from the stream, or -1 if EOF</returns>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.GetBits(System.Int32)">
            <summary>
              Read n bits from input, right justifying the result.
            </summary>
            <remarks>
              <para>
                For example, if you read 1 bit, the result is either 0
                or 1.
              </para>
            </remarks>
            <param name ="n">
              The number of bits to read, always between 1 and 32.
            </param>
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.hbCreateDecodeTables(System.Int32[],System.Int32[],System.Int32[],System.Char[],System.Int32,System.Int32,System.Int32)">
            Called by createHuffmanDecodingTables() exclusively.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Decompressor.createHuffmanDecodingTables(System.Int32,System.Int32)">
            Called by recvDecodingTables() exclusively.
        </member>
        <member name="M:FM.LiveSwitch.BZip2.Rand.Rnums(System.Int32)">
            <summary>
              Returns the "random" number at a specific index.
            </summary>
            <param name='i'>the index</param>
            <returns>the random number</returns>
        </member>
        <member name="T:FM.LiveSwitch.Certificate`2">
            <summary>
            A certificate to be used for secure communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CalculateFingerprint(System.String)">
            <summary>
            Calculates a fingerprint for this certificate.
            </summary>
            <param name="algorithm">The algorithm.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsSealed">
            <summary>
            Gets a value indicating whether this certificate is
            sealed and can no longer be modified.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IssuerName">
            <summary>
            Gets the name of the issuer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SubjectName">
            <summary>
            Gets the name of the subject.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.EffectiveDate">
            <summary>
            Gets the effective date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.ExpirationDate">
            <summary>
            Gets the expiration date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IssuerUniqueId">
            <summary>
            Gets the issuer unique ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SubjectUniqueId">
            <summary>
            Gets the subject unique ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Extensions">
            <summary>
            Gets the extensions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.Key">
            <summary>
            Gets or sets the asymmetric key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsExpired">
            <summary>
            Gets whether the certificate is expired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.IsExpiring">
            <summary>
            Gets whether the certificate is expiring within 24 hours.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Certificate`2"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.CreateCertificate">
            <summary>
            Creates a certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Certificate`2.AutoRegenerate">
            <summary>
            Gets or sets whether the certificate's cryptography
            data should be automatically regenerated when
            it is about to expire. Defaults to <code>true</code>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Regenerate">
            <summary>
            Regenerates the certificate's cryptography data using an
            expiration date of 10 days from now.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.Regenerate(System.DateTime)">
            <summary>
            Regenerates the certificate's cryptography data using the
            given expiration date.
            </summary>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.GetBytes">
            <summary>
            Serializes this certificate to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.GetBuffer">
            <summary>
            Serializes this certificate to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Certificate`2.ToX509Certificate2">
            <summary>
            Converts this instance into an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CharacterHolder">
            <summary>
            Class to hold a character value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CharacterHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CharacterHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CharacterHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CharacterHolder.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CharacterHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.CircularBuffer">
            <summary>
            A circular buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.ReadOffset">
            <summary>
            Gets the read offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.WriteOffset">
            <summary>
            Gets the read offset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Available">
            <summary>
            Gets the number of bytes available for reading.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.Latency">
            <summary>
            Gets the latency.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularBuffer.LittleEndian">
            <summary>
            Gets or sets whether the data is little-endian.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CircularBuffer"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="latency">The latency.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CircularBuffer"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="latency">The latency.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.Read(System.Int32)">
            <summary>
            Reads data from the buffer.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.CircularBuffer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes data to the buffer.
            </summary>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="T:FM.LiveSwitch.Collection`2">
            <summary>
            A collection of values.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Collection`2"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ToArray">
            <summary>
            Clones the values into a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ArrayFromList(System.Collections.Generic.List{`0})">
            <summary>
            Creates an array from a list.
            </summary>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.CreateCollection">
            <summary>
            Creates a collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ForEach(FM.LiveSwitch.Action2{`0,System.Int32})">
            <summary>
            Executes a callback function once per value.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Replace(`0[])">
            <summary>
            Replaces the collection with a new set of values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:FM.LiveSwitch.Collection`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddSuccess(`0)">
            <summary>
            Invoked when an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddSuccessNoLock(`0)">
            <summary>
            Invoked after an element is added to the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Add(`0)">
            <summary>
            Adds a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.AddMany(`0[])">
            <summary>
            Adds some values.
            </summary>
            <param name="values">The values.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveSuccess(`0)">
            <summary>
            Invoked when an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveSuccessNoLock(`0)">
            <summary>
            Invoked after an element is removed from the collection.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveFirst">
            <summary>
            Removes the first value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveLast">
            <summary>
            Removes the last value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveFirst(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Removes the first value that matches a given condition.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveLast(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Removes the last value that matches a given condition.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Remove(`0)">
            <summary>
            Removes a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveMany(`0[])">
            <summary>
            Removes some values.
            </summary>
            <param name="values">The values.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.RemoveAll">
            <summary>
            Removes all values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Any">
            <summary>
            Determined whether the collection contains at least one value.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Any(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Determined whether the collection contains at least one value
            that matches the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains a value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            Throws an exception if a value does
            not exist at that index.
            </summary>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.ValueAtOrDefault(System.Int32)">
            <summary>
            Gets the value at the specified index.
            Returns a default value if a value does
            not exist at that index.
            </summary>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.First">
            <summary>
            Gets the first value.
            Throws an exception if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.First(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the first value that matches
            the specified predicate.
            Throws an exception if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.FirstOrDefault">
            <summary>
            Gets the first value.
            Returns a default value if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.FirstOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the first value that matches
            the specified predicate.
            Returns a default value if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Last">
            <summary>
            Gets the last value.
            Throws an exception if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Last(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the last value that matches
            the specified predicate.
            Throws an exception if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.LastOrDefault">
            <summary>
            Gets the last value.
            Returns a default value if there are
            no values in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.LastOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the last value that matches
            the specified predicate.
            Returns a default value if there are
            no such values in the collection.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Single">
            <summary>
            Gets the only value.
            Throws an exception if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Single(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the only value that matches
            the specified predicate.
            Throws an exception if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.SingleOrDefault">
            <summary>
            Gets the only value.
            Returns a default value if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.SingleOrDefault(FM.LiveSwitch.Function1{`0,System.Boolean})">
            <summary>
            Gets the only value that matches
            the specified predicate.
            Returns a default value if there are
            no values or more than one value
            in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Collection`2.Where(FM.LiveSwitch.Function2{`0,System.Int32,System.Boolean})">
            <summary>
            Creates a new collection with values
            that match the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.FileLogProvider">
            <summary>
            Log provider that writes output to a file.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileLogProvider.FilePath">
            <summary>
            Gets the file path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.#ctor(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileLogProvider"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferFramer">
            <summary>
            A utility class that allows a continuous stream
            of data to be written to it with properly framed
            messages being read out of it. This class is
            not thread-safe for concurrent reads/writes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferFramer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.Footprint">
            <summary>
            Gets the size of the internal data buffer, in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.AvailableDataBuffer">
            <summary>
            Gets the available data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferFramer.AvailableLength">
            <summary>
            Gets the available length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.GetHexString">
            <summary>
            Gets the hexadecimal string representing the current contents of the data buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes a data buffer to the internal data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferFramer.Read(FM.LiveSwitch.Function1{FM.LiveSwitch.DataBuffer,System.Int32})">
            <summary>
            Reads a data buffer from the internal data buffer.
            </summary>
            <param name="getFrameLength">A callback that returns the next frame length.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DiagnosticSampler">
            <summary>
            A record that calculates the min, max, and average from integer samples.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Label">
            <summary>
            Gets the label for this sampler.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Count">
            <summary>
            Gets how many samples this record has used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.SamplesInAverage">
            <summary>
            Gets how many samples are included in the average.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Min">
            <summary>
            Gets the minimum sample ever recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Max">
            <summary>
            Gets the maximum sample ever recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.LastValue">
            <summary>
            Gets the value of the last sample recorded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Sum">
            <summary>
            Gets the sum of all values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DiagnosticSampler.Average">
            <summary>
            Gets the average of all samples.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="averageSampleCount">How many samples to include in the average.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.String)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="label">The label for this sampler.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of the DiagnosticRecord.
            </summary>
            <param name="averageSampleCount">How many samples to include in the average.</param>
            <param name="label">The label for this sampler.</param>
        </member>
        <member name="M:FM.LiveSwitch.DiagnosticSampler.AddSample(System.Int64)">
            <summary>
            Adds a new sample to the calculation.
            </summary>
            <param name="longSample">The sample to add.</param>
        </member>
        <member name="T:FM.LiveSwitch.DispatchQueue`1">
            <summary>
            A dispatch queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.WaitForDrain">
            <summary>
            Blocks until the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.DispatchQueue`1.Destroy">
            <summary>
            Destroys the queue.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DtlsCertificate">
            <summary>
            A certificate to be used for DTLS communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DtlsCertificate.DefaultKeyType">
            <summary>
            Gets or sets the default asymmetric key type (ECDSA).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.CreateCertificate">
            <summary>
            Creates the certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a certificate from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.DtlsCertificate)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and an expiration date of 10 days from now.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.DtlsCertificate,System.DateTime)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and the given expiration date.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and expiration date.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DtlsCertificate.FromX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> into a <see cref="T:FM.LiveSwitch.DtlsCertificate"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.DtlsFingerprint">
            <summary>
            A DTLS fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DtlsFingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DtlsFingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.EcdsaNamedCurve">
            <summary>
            A named elliptic curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P256">
            <summary>
            The P256 named curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P384">
            <summary>
            The P384 named curve.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EcdsaNamedCurve.P521">
            <summary>
            The P521 named curve.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Fingerprint">
            <summary>
            A fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Md2Algorithm">
            <summary>
            Gets the MD2 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Md5Algorithm">
            <summary>
            Gets the MD5 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha1Algorithm">
            <summary>
            Gets the SHA-1 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha224Algorithm">
            <summary>
            Gets the SHA-224 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha256Algorithm">
            <summary>
            Gets the SHA-256 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha384Algorithm">
            <summary>
            Gets the SHA-384 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Sha512Algorithm">
            <summary>
            Gets the SHA-512 algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Algorithm">
            <summary>
            Gets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Fingerprint.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Fingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Fingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.HttpClientTransfer">
            <summary>
            Defines methods for transferring content over HTTP using the HttpClient.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpClientTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IEquivalent`1">
            <summary>
            An interface for detecting equivalency.
            </summary>
            <typeparam name="T">The concrete type.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.IEquivalent`1.IsEquivalent(`0)">
            <summary>
            Checks if an instance is equivalent to this one.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.IFileStream">
            <summary>
            A file stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Length">
            <summary>
            Gets the file stream length (must be opened first).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IFileStream.Position">
            <summary>
            Gets or sets the position in the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Exists">
            <summary>
            Returns a boolean value indicating whether the file exists.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Open(FM.LiveSwitch.FileStreamAccess)">
            <summary>
            Opens the file stream.
            </summary>
            <param name="access">The access requirement.</param>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Close">
            <summary>
            Closes the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Flush">
            <summary>
            Flushes the file stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file stream.
            </summary>
            <param name="data">The data to write.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.WriteTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file stream.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.IFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file stream.
            </summary>
            <param name="data">The buffer to fill with data from the file.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Iso8601Timestamp">
            <summary>
            Utility class to assist with ISO-8601 timestamp conversions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Iso8601Timestamp.UtcNow">
            <summary>
            Gets the current UTC time in ISO-8601 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Iso8601Timestamp.DateTimeToIso8601(System.DateTime)">
            <summary>
            Converts a date to a ISO-8601 timestamp.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent ISO-8601 timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Iso8601Timestamp.Iso8601ToDateTime(System.String)">
            <summary>
            Converts a ISO-8601 timestamp to a date.
            </summary>
            <param name="iso8601">The ISO-8601 timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonConsoleLogProvider">
            <summary>
            A log provider that sends json logs to the console.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.#ctor">
            <summary>
            Creates a new instance of a JsonConsole log provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of a JsonConsole log provider.
            </summary>
            <param name="level">The initial log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.JsonConsoleLogProvider.GenerateLogLine(FM.LiveSwitch.LogEvent)">
            <summary>
            Builds the json string for the console logger to log.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkType">
            <summary>
            A network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Unknown">
            <summary>
            Indicates an unknown network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Wired">
            <summary>
            Indicates a wired network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Wireless">
            <summary>
            Indicates a wireless network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Cellular">
            <summary>
            Indicates a cellular network type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.NetworkType.Vpn">
            <summary>
            Indicates a VPN network type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LogStashLogProvider">
            <summary>
            A log provider that sends logs to LogStash.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogStashLogProvider.Address">
            <summary>
            Gets the LogStash server address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogStashLogProvider.Port">
            <summary>
            Gets the LogStash server port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of a LogStash log provider.
            </summary>
            <param name="address">The LogStash server address.</param>
            <param name="port">The LogStash server port.</param>
            <param name="useSSL">Whether to use SSL/TLS when connecting to the LogStash server.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.#ctor(System.String,System.Int32,System.Boolean,FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of a LogStash log provider.
            </summary>
            <param name="address">The address of LogStash.</param>
            <param name="port">The port of LogStash.</param>
            <param name="useSSL">Whether to use SSL/TLS when connecting to the LogStash server.</param>
            <param name="level">The initial log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogStashLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedCountdownLatch">
            <summary>
            A countdown latch that will signal when the counter reaches zero.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedCountdownLatch.Count">
            <summary>
            Gets the current count on the latch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the latch with a count.
            </summary>
            <param name="initialCount">The initial counter value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.#ctor">
            <summary>
            Creates a new instance of the latch with an unknown count.
            This will cause the latch to count into the negatives until SetCount is called.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Reset(System.Int32)">
            <summary>
            Resets the latch with a count.
            </summary>
            <param name="initialCount">The initial counter value.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Reset">
            <summary>
            Resets the latch with an unknown count.
            This will cause the latch to count into the negatives until SetCount is called.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.SetCount(System.Int32)">
            <summary>
            Sets the counter for the latch.
            This brings the count back up into positive numbers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.Decrement">
            <summary>
            Decrements the counter by one and signals if it reaches zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.WaitSync">
            <summary>
            Blocks until the counter reaches zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.WaitAsync">
            <summary>
            Returns a promise that resolves once the counter reaches zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCountdownLatch.ToString">
            <summary>
            Generates a string description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.OperatingSystem">
            <summary>
            An operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Unknown">
            <summary>
            Indicates an unknown or default OS.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Windows">
            <summary>
            Indicates a Windows operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Android">
            <summary>
            Indicates a Android operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.MacOS">
            <summary>
            Indicates a macOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.IOS">
            <summary>
            Indicates a iOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.Linux">
            <summary>
            Indicates a Linux operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.TvOS">
            <summary>
            Indicates a tvOS operating system.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.OperatingSystem.WatchOS">
            <summary>
            Indicates a watchOS operating system.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Architecture">
            <summary>
            A CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Unknown">
            <summary>
            Indicates an unknown or default CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.X86">
            <summary>
            Indicates an Intel-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.X64">
            <summary>
            Indicates an Intel-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Armv7">
            <summary>
            Indicates an ARMv7-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Armv8">
            <summary>
            Indicates an ARMv8-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Arm64">
            <summary>
            Indicates an ARM-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Mips">
            <summary>
            Indicates a MIPS-based 32-bit CPU architecture.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Architecture.Mips64">
            <summary>
            Indicates a MIPS-based 64-bit CPU architecture.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IPlatform">
            <summary>
            Platform-specific methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.IsMobile">
            <summary>
            Gets or sets a value indicating whether this is a mobile platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.IsLittleEndian">
            <summary>
            Gets a value indicating whether this is little-endian platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.OperatingSystem">
            <summary>
            Gets the current operating system.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.OperatingSystemVersion">
            <summary>
            Gets the current operating system version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.SourceLanguage">
            <summary>
            Gets the current programming language for the source code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.Architecture">
            <summary>
            Gets the current CPU architecture.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.CoreCount">
            <summary>
            Gets the current CPU core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.PhysicalMemory">
            <summary>
            Gets the current physical memory in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.MachineName">
            <summary>
            Gets the current machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.DirectorySeparator">
            <summary>
            Gets the character used to separate directories.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.ProcessId">
            <summary>
            Gets the id of the current process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.UseFipsAlgorithms">
            <summary>
            Gets or sets a value that indicates whether FIPS algorithms should be used.
            Note that not all platforms or third-party libraries are FIPS-compliant, so
            this should not be used as a guarantee of FIPS compliance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IPlatform.CryptoLibrary">
            <summary>
            Gets or sets the cryptography library to use.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Pool`1">
            <summary>
            A pool of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.MinSize">
            <summary>
            Gets the minimum size. Value must be >= 0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.MaxSize">
            <summary>
            Gets the maximum size. Value must be >= 0.
            A value of 0 indicates no maximum.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.Size">
            <summary>
            Gets the current size of the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pool`1.Available">
            <summary>
            Gets the number of available objects.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class
            with a minimum size of 0 and a maximum size of 2,147,483,647.
            </summary>
            <param name="createObject">A function that creates an object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class
            with a specified minimum size and a maximum size of 2,147,483,647.
            </summary>
            <param name="createObject">A function that creates an object.</param>
            <param name="minSize">The minimum size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.#ctor(FM.LiveSwitch.Function0{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pool`1"/> class.
            with a specified minimum size and a specified maximum size.
            </summary>
            <param name="createObject">A function that creates an object.</param>
            <param name="minSize">The minimum size.</param>
            <param name="maxSize">The maximum size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Get">
            <summary>
            Gets an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Put(`0)">
            <summary>
            Put an object back.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FM.LiveSwitch.Pool`1.Destroy(FM.LiveSwitch.Action1{`0})">
            <summary>
            Removes all items from the pool and calls a callback for each one.
            </summary>
            <param name="destroyCallback"></param>
        </member>
        <member name="T:FM.LiveSwitch.ProtocolType">
            <summary>
            A protocol type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Udp">
            <summary>
            Indicates the UDP protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Tcp">
            <summary>
            Indicates the TCP protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Tls">
            <summary>
            Indicates the TLS protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ProtocolType.Unknown">
            <summary>
            Indicates an unknown protocol.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.QueuedStream._stream">
            QueuedStream, borrowed from
            https://github.com/statianzo/Fleck/
            (MIT license).
        </member>
        <member name="T:FM.LiveSwitch.EcdsaKey">
            <summary>
            An elliptic-curve key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.Size">
            <summary>
            Gets the size of the key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.NamedCurve">
            <summary>
            Gets or sets the named curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.EcdsaKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ToPublic">
            <summary>
            Creates a copy of this key without the private key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.GetString">
            <summary>
            Serializes this key to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseString(System.String)">
            <summary>
            Deserializes a key from a string.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.GetBytes">
            <summary>
            Serializes this key to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseBytes(System.Byte[],System.Boolean)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="isPrivate">Whether this is a public key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseBuffer(FM.LiveSwitch.DataBuffer,System.Boolean)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="isPrivate">Whether this is a public key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EcdsaKey.ParseSignature(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Parses a signature.
            </summary>
            <param name="signature">The signature.</param>
            <param name="r">The R value.</param>
            <param name="s">The S value.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.SourceLanguage">
            <summary>
            A source language.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.CSharp">
            <summary>
            Indicates that the source language is C#.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.Java">
            <summary>
            Indicates that the source language is Java.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.ObjectiveC">
            <summary>
            Indicates that the source language is Objective-C.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SourceLanguage.TypeScript">
            <summary>
            Indicates that the source language is TypeScript.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Serializer">
            <summary>
            Provides methods for serializing/deserializing .NET value types to/from JSON
            as well as facilities for converting objects and arrays if appropriate callbacks
            are supplied to assist with the conversion.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StateMachine`1">
            <summary>
            A simple state machine.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.StateValue">
            <summary>
            Gets the state value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.SystemTimestamp">
            <summary>
            Gets the system timestamp of the last
            state transition.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.LastStateTicks">
            <summary>
            Gets the length of time spent in the last state,
            in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StateMachine`1.LastStateMillis">
            <summary>
            Gets the length of time spent in the last state,
            in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StateMachine`1"/> class.
            </summary>
            <param name="initialState">The initial state.</param>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.StateToValue(`0)">
            <summary>
            Converts a state to an integer value.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.ValueToState(System.Int32)">
            <summary>
            Converts an integer value to a state.
            </summary>
            <param name="value">The integer value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.AddTransition(`0,`0)">
            <summary>
            Adds an allowed transition.
            </summary>
            <param name="fromState">The "from" state.</param>
            <param name="toState">The "to" state.</param>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.CanTransition(`0)">
            <summary>
            Determines whether a transition to the specified state is allowed.
            </summary>
            <param name="toState">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.IsReachable(`0)">
            <summary>
            Determines whether a transition to a specified state is possible (even via intermediate hops).
            </summary>
            <param name="state">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is possible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.Transition(`0)">
            <summary>
            Transitions to the specified state.
            </summary>
            <param name="toState">The "to" state.</param>
            <returns>
              <c>true</c> if a transition to the specified state is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.StateMachine`1.GetPromise``1(`0,``0)">
            <summary>
            Gets a promise, which may be resolved or rejected depending on the current state of this machine.
            </summary>
            <param name="state">State, in which promise must be resolved.</param>
            <param name="returnValue">Return type of this promise.</param>
            <returns>Promise, which may be resolved or rejected depending on the current state of this machine</returns>
        </member>
        <member name="T:FM.LiveSwitch.LinkedListNode`1">
            <summary>
            A linked list node.
            </summary>    
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Value">
            <summary>
            Gets the item in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Previous">
            <summary>
            Gets the previous node. Null if first.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListNode`1.Next">
            <summary>
            Gets the next node. Will be <c>null</c> if last.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LinkedListNode`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FM.LiveSwitch.LinkedListEnumerator`1">
            <summary>
            A linked list enumerator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.#ctor(FM.LiveSwitch.LinkedListNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LinkedListEnumerator`1" /> class.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListEnumerator`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedListEnumerator`1.CurrentNode">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.MoveNext">
            <summary>
            Moves to the next node.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedListEnumerator`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentDictionary`2">
            <summary>
            A ConcurrentDictonary that maps to the appropriate platform version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.IsEmpty">
            <summary>
            Gets true if dictionary is empty.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Keys">
            <summary>
            Gets an array of keys.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentDictionary`2.Values">
            <summary>
            Gets an array of Values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.#ctor(FM.LiveSwitch.Function1{`0,System.String})">
            <summary>
            Creates a new ManagedConcurrentDictionary.
            </summary>
            <param name="hashCallback">The hash function to use when the backing dictionary requires the key to be a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.Clear">
            <summary>
            Clears the dictionary of all items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            True if the dictionary contains the key.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.GetOrAdd(`0,FM.LiveSwitch.Function1{`0,`1})">
            <summary>
            Gets the value from the dictionary or adds a new one if it does not exist.
            </summary>
            <param name="key">The key to use when adding to the dictionary.</param>
            <param name="valueFactory">The Func that will create a value if needed.</param>
            <returns>The dictionary value if exist, the value returned by the Func if not.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Tries to add a new value to the dictionary.
            </summary>
            <param name="key">The key to use when adding.</param>
            <param name="value">The value to be added to the dictionary.</param>
            <returns>True if added, false if key already exists.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.AddOrUpdate(`0,`1,FM.LiveSwitch.Function2{`0,`1,`1})">
            <summary>
            Updates a value in the dictionary or adds it if it does not exist.
            </summary>
            <param name="key">The key to use for updating for adding.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function to use for generating a value based on an existing key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.AddOrUpdate(`0,`1)">
            <summary>
            Updates a value in the dictionary or adds it if it does not exist.
            </summary>
            <param name="key">The key to use for updating for adding.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value from the dictionary.
            </summary>
            <param name="key">They key of the item to get form the dictionary.</param>
            <param name="value">The value that was just received or null if failed.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Tries and removes a value from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="value">The value that was just removed.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryRemove(`0)">
            <summary>
            Tries and removes a value from the dictionary.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Tries to update the value in the dictionary.
            </summary>
            <param name="key">The key to use when updating.</param>
            <param name="newValue">The new value.</param>
            <param name="comparisonValue">The value to compare with the current value in the dictionary.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentQueue`1">
            <summary>
            A thread-safe queue.
            </summary>
            <typeparam name="T">The type that the queue holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentQueue`1.Count">
            <summary>
            Gets the amount of items in this queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentQueue`1.IsEmpty">
            <summary>
            Gets true if the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.#ctor">
            <summary>
            Creates a new ConcurrentQueue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.Enqueue(`0)">
            <summary>
            Add the item to the end of the queue.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and returns the item at the front of the queue.
            </summary>
            <param name="item">The dequeued item.</param>
            <returns>True if item received, false if no item.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentQueue`1.TryPeek(`0@)">
            <summary>
            Peeks at the first item in the queue.
            </summary>
            <param name="item">The item at the front of the queue.</param>
            <returns>False if queue is empty. True if first item peeked at.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ManagedConcurrentStack`1">
            <summary>
            A ConcurrentStack that maps to the appropriate platform version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentStack`1.Count">
            <summary>
            Gets the amount of items in the stack.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedConcurrentStack`1.IsEmpty">
            <summary>
            Gets true if the stack is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.#ctor">
            <summary>
            Creates a new instance of a ConcurrentStack.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.Push(`0)">
            <summary>
            Pushes a new item on top of the stack.
            </summary>
            <param name="item">The item to push.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.Clear">
            <summary>
            Clears the stack of all items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.TryPeek(`0@)">
            <summary>
            Tries to peek at the top value in stack.
            </summary>
            <param name="result">The value from the stack if possible, null otherwise.</param>
            <returns>True if peek succeeded, false if not.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedConcurrentStack`1.TryPop(`0@)">
            <summary>
            Tries to pop the top value off of the stack.
            </summary>
            <param name="result">The value from the top of the stack if possible, null otherwise.</param>
            <returns>True if pop suceeded, false if not.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LinkedList`1">
            <summary>
            A linked list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.First">
            <summary>
            Gets the first node in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.Last">
            <summary>
            Gets the last node in the linked list.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LinkedList`1.Count">
            <summary>
            Gets the number of items in this linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddFirst(`0)">
            <summary>
            Adds an item to the beginning of the linked list.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddLast(`0)">
            <summary>
            Adds an item to the end of the linked list.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveFirst">
            <summary>
            Removes the first item in the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveLast">
            <summary>
            Removes the last item in the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddBeforeNode(FM.LiveSwitch.LinkedListNode{`0},`0)">
            <summary>
            Adds an item before a node.
            </summary>
            <param name="node">The node before which to add the value.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.AddAfterNode(FM.LiveSwitch.LinkedListNode{`0},`0)">
            <summary>
            Adds an item after a node.
            </summary>
            <param name="node">The node after which to add the value.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.Remove(`0)">
            <summary>
            Removes an item from the linked list.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.RemoveNode(FM.LiveSwitch.LinkedListNode{`0})">
            <summary>
            Removes a specific node from the linked list.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.ToList">
            <summary>
            Returns the linked list as a regular list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.Clear">
            <summary>
            Clears all nodes from the linked list.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LinkedList`1.GetEnumerator">
            <summary>
            Gets the enumerator for this linked list.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MutablePair`2">
            <summary>
            A mutable 2-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MutablePair`2.Item1">
            <summary>
            Gets or sets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MutablePair`2.Item2">
            <summary>
            Gets or sets the second item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MutablePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MutablePair`2"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
        </member>
        <member name="T:FM.LiveSwitch.MutableUnit`1">
            <summary>
            A mutable 1-tuple.
            </summary>
            <typeparam name="T">Type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.MutableUnit`1.Item">
            <summary>
            Gets or sets the first item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MutableUnit`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MutableUnit`1"/> class.
            </summary>
            <param name="item">The item to hold.</param>
        </member>
        <member name="T:FM.LiveSwitch.Pair`2">
            <summary>
            A 2-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Pair`2.Item1">
            <summary>
            Gets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Pair`2.Item2">
            <summary>
            Gets the second item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Pair`2"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.GetHashCode">
            <summary>
            Calculates the hashcode for this pair.
            </summary>        
        </member>
        <member name="M:FM.LiveSwitch.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="T:FM.LiveSwitch.PriorityQueue`1">
            <summary>
            A priority queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.#ctor(FM.LiveSwitch.Function2{`0,`0,FM.LiveSwitch.CompareResult})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PriorityQueue`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Exists(`0)">
            <summary>
            Checks if an item exists in the queue.
            </summary>
            <param name="item">The item.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Dequeue">
            <summary>
            Dequeues an item.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.Peek">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.PriorityQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PriorityQueue`1.IsConsistent">
            <summary>
            Determines whether the queue is consistent.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.ITimeoutTimer">
            <summary>
            A thread-safe class for running timeouts on asynchronous methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ITimeoutTimer.Start(System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="timeout">The timeout length, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.ITimeoutTimer.Stop">
            <summary>
            Stops the timer, notifying the calling code if the timeout has already elapsed.
            </summary>
            <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
            if the timeout elapsed and the timeout callback has been invoked.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEventLogProvider">
            <summary>
            Simple log provider that writes log events to a local array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventLogProvider.Events">
            <summary>
            Gets the logged events.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEventLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEventLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.Clear">
            <summary>
            Clears all text from the log
            and returns the former contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEventLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.TlsCertificate">
            <summary>
            A certificate to be used for TLS communication.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TlsCertificate.DefaultKeyType">
            <summary>
            Gets or sets the default asymmetric key type (RSA).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.CreateFingerprint(System.String,System.String)">
            <summary>
            Creates a fingerprint.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.CreateCertificate">
            <summary>
            Creates the certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a certificate from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.TlsCertificate)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and an expiration date of 10 days from now.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificateFromOldCertificate(FM.LiveSwitch.TlsCertificate,System.DateTime)">
            <summary>
            Generates a certificate using the issuer/subject name from an
            old certificate and the given expiration date.
            </summary>
            <param name="oldCertificate">The old certificate.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with a default issuer/subject name and
            an expiration date of 10 days from now.
            </summary>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer/subject name and an
            expiration date of 10 days from now.
            </summary>
            <param name="name">The name of the issuer/subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and
            an expiration date of 10 days from now.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime)">
            <summary>
            Generates a certificate with the given issuer name, subject name, and expiration date.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKeyType)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="keyType">The asymmetric key type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.LiveSwitch.AsymmetricKey)">
            <summary>
            Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
            </summary>
            <param name="issuerName">The name of the issuer.</param>
            <param name="subjectName">The name of the subject.</param>
            <param name="expirationDate">The expiration date.</param>
            <param name="key">The asymmetric key (with public and private details).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TlsCertificate.FromX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> into a <see cref="T:FM.LiveSwitch.TlsCertificate"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.TlsFingerprint">
            <summary>
            A TLS fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TlsFingerprint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TlsFingerprint"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Triple`3">
            <summary>
            A 3-tuple.
            </summary>
            <typeparam name="T1">First type the tuple holds.</typeparam>
            <typeparam name="T2">Second type the tuple holds.</typeparam>
            <typeparam name="T3">Third type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item1">
            <summary>
            Gets the first item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item2">
            <summary>
            Gets the second item in the tuple.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Triple`3.Item3">
            <summary>
            Gets the third item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Triple`3"/> class.
            </summary>
            <param name="item1">First item the tuple holds.</param>
            <param name="item2">Second item the tuple holds.</param>
            <param name="item3">Third item the tuple holds.</param>
        </member>
        <member name="T:FM.LiveSwitch.Unit`1">
            <summary>
            A 1-tuple.
            </summary>
            <typeparam name="T">Type the tuple holds.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Unit`1.Item">
            <summary>
            Gets the item in the tuple.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Unit`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Unit`1"/> class.
            </summary>
            <param name="item">The item to hold.</param>
        </member>
        <member name="T:FM.LiveSwitch.CompareResult">
            <summary>
            The compare result in a sort operation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Equal">
            <summary>
            Indicates that the two elements are equal.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Negative">
            <summary>
            Indicates that the first element belongs before the second.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CompareResult.Positive">
            <summary>
            Indicates that ths second element belongs before the first.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConsoleLogProvider">
            <summary>
            Log provider that writes output to the console/terminal.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConsoleLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConsoleLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConsoleLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="P:FM.LiveSwitch.ConsoleLogProvider.Colorize">
            <summary>
            Gets or sets whether the output should be colorized.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Constants">
            <summary>
            A collection of platform-independent constant values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.NanosecondsPerTick">
            <summary>
            Gets the number of nanoseconds in one tick.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerMillisecond">
            <summary>
            Gets the number of ticks in one millisecond.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerSecond">
            <summary>
            Gets the number of milliseconds in one second.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerMinute">
            <summary>
            Gets the number of seconds in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MinutesPerHour">
            <summary>
            Gets the number of minutes in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.HoursPerDay">
            <summary>
            Gets the number of hours in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerSecond">
            <summary>
            Gets the number of ticks in one second.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerMinute">
            <summary>
            Gets the number of ticks in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerHour">
            <summary>
            Gets the number of ticks in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.TicksPerDay">
            <summary>
            Gets the number of ticks in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerMinute">
            <summary>
            Gets the number of milliseconds in one minute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerHour">
            <summary>
            Gets the number of milliseconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MillisecondsPerDay">
            <summary>
            Gets the number of milliseconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerHour">
            <summary>
            Gets the number of seconds in one hour.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.SecondsPerDay">
            <summary>
            Gets the number of seconds in one day.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Constants.MinutesPerDay">
            <summary>
            Gets the number of minutes in one day.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Crc32">
            <summary>
            Calculates CRC32 checksums.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32Polynomial">
            <summary>
            Gets the CRC32 polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32cPolynomial">
            <summary>
            Gets the CRC32c polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Crc32dPolynomial">
            <summary>
            Gets the CRC32d polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.Polynomial">
            <summary>
            Gets the polynomial.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.ReverseBits">
            <summary>
            Gets a value indicating whether to reverse the bits.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Crc32.FinalXorValue">
            <summary>
            Gets or sets the value used to XOR the final result.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the CRC32 polynomial.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the specified polynomial.
            </summary>
            <param name="polynomial">The polynomial.</param>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.#ctor(System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Crc32"/> class
            using the specified polynomial.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="reverseBits">Whether to reverse the bits.</param>
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[])">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[],System.Int32)">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.ComputeHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the 32-bit CRC hex string for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[])">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[],System.Int32)">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Crc32.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the 32-bit CRC for an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.DataBufferStream">
            <summary>
            A data buffer stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Position">
            <summary>
            Gets or sets the position within the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.BitPosition">
            <summary>
            Gets or sets the bit position within a byte.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Length">
            <summary>
            Gets the buffer length.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Available">
            <summary>
            Gets the available bytes to be read from the DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferStream.Buffer">
            <summary>
            Gets the buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="dataBufferSize">Size of the data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="dataBufferSize">Size of the data buffer.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.#ctor(FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.WriteBytes(System.Byte[])">
            <summary>
            Writes the specified data to the DataBuffer and advances the Position by the length of the data.
            </summary>
            <param name="data">The data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified data to the DataBuffer and advances the Position by the length.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write8(System.Int32)">
            <summary>
            Writes an 8-bit value to the DataBuffer and advances the Position by 1.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write16(System.Int32)">
            <summary>
            Writes an 16-bit value to the DataBuffer and advances the Position by 2.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write32(System.Int64)">
            <summary>
            Writes an 32-bit value to the DataBuffer and advances the Position by 4.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Write64(System.Int64)">
            <summary>
            Writes an 64-bit value to the DataBuffer and advances the Position by 8.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Peek">
            <summary>
            Reads an 8-bit value from the DataBuffer without advancing the Position.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read(System.Int32)">
            <summary>
            Reads the specified length from the DataBuffer and advances the position by the length.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.ReadBytes(System.Int32)">
            <summary>
            Read a specified number of bytes from the DataBuffer and advance the Position by that number.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.ReadByte">
            <summary>
            Reads a single byte from the stream and advances the Position by 1.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.NextByte">
            <summary>
            Resets the bit count to 0 and advances to the next byte.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read1">
            <summary>
            Read a single bit and advance the bit position by 1.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read2">
            <summary>
            Read a 2-bit value and advance the BitPosition by 2.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read3">
            <summary>
            Read a 3-bit value and advance the BitPosition by 3.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read4">
            <summary>
            Read a 4-bit value and advance the BitPosition by 4.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read7">
            <summary>
            Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read8">
            <summary>
            Reads an 8-bit value from the DataBuffer and advances the Position by 1.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read15">
            <summary>
            Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read16">
            <summary>
            Reads an 16-bit value from the DataBuffer and advances the Position by 2.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read24">
            <summary>
            Reads an 24-bit value from the DataBuffer and advances the Position by 3.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read32">
            <summary>
            Reads an 32-bit value from the DataBuffer and advances the Position by 4.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read40">
            <summary>
            Reads an 40-bit value from the DataBuffer and advances the Position by 5.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read48">
            <summary>
            Reads an 48-bit value from the DataBuffer and advances the Position by 6.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read56">
            <summary>
            Reads an 56-bit value from the DataBuffer and advances the Position by 7.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferStream.Read64">
            <summary>
            Reads an 64-bit value from the DataBuffer and advances the Position by 8.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CircularDataBuffer">
            <summary>
            A DataBuffer that uses a circular buffer to manage data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularDataBuffer.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CircularDataBuffer.Capacity">
            <summary>
            Gets the capacity of this CircularDataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.AppendDataBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a data buffer to the correct place in this circular data buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.BeginWrite(System.Int32)">
            <summary>
            Tells the CircularDataBuffer to expect more data of up to maxWriteSize. Will reshuffle data around or resize if necessary.
            </summary>
            <param name="maxWriteSize">The amount of bytes to make available for writing.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.EndWrite(System.Int32)">
            <summary>
            Tells the CircularDataBuffer how much data was actually written so that the Length can be set appropriately.
            </summary>
            <param name="actuallyWrittenSize">The amount of data actually written to the data buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Discard(System.Int32)">
            <summary>
            Advances the Index by amount so the space used by the data can be reused.
            </summary>
            <param name="amount">The amount to advance the Index by.</param>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Free">
            <summary>
            Frees the internal pooled DataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CircularDataBuffer.Create(System.Int32)">
            <summary>
            Creates a new instance of the CircularDataBuffer that can hold a initial amount of data.
            </summary>
            <param name="initialSize">The initial size of the inner buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataBuffer">
            <summary>
            Binary data buffer implementation
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.InnerData">
            <summary>
            Gets or sets backing data buffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.LittleEndian">
            <summary>
            Gets or sets whether <see cref="P:FM.LiveSwitch.DataBuffer.Data"/> is little-endian.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.IsSubset">
            <summary>
            Gets whether this DataBuffer is a subset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Allocate(System.Int32)">
            <summary>
            Allocates a new data buffer with a given size (in bytes)
            in big-endian format.
            </summary>
            <param name="count">Pre-allocated data buffer size  (in bytes).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Allocate(System.Int32,System.Boolean)">
            <summary>
            Allocates a new data buffer with a given size (in bytes).
            </summary>
            <param name="count">Pre-allocated data buffer size  (in bytes).</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[])">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32)">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Produces a new data buffer containing supplied data
            in big-endian format.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Wrap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Produces a new data buffer containing supplied data.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBuffer" /> class.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="littleEndian">Whether the data is little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Keep">
            <summary>
            Increment the retain count by one.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryKeep">
            <summary>
            Attempts to increment the retain count by one.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Free">
            <summary>
            Decrements the retain count by one and returns the Buffer to the pool if zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.AreEqual(FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Tests if the two buffers have equal contents.
            </summary>
            <param name="buffer1">First buffer to test.</param>
            <param name="buffer2">Second buffer to test.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.DataBuffer.Empty">
            <summary>
            Gets an empty data buffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at the end.
            </summary>
            <param name="newLength">The new length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at a given offset.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.CanResize(System.Int32,System.Int32)">
            <summary>
            Gets whether this buffer can be resized to the new length.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes this buffer to a new length with new data being inserted at a given offset.
            </summary>
            <param name="newLength">The new length.</param>
            <param name="offset">The offset.</param>
            <param name="setZero">Sets empty space to zero.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer,System.Int32)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write(FM.LiveSwitch.DataBuffer,System.Int32,System.Int32@)">
            <summary>
            Writes a data buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the buffer length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="bytesLength">The bytes length.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a byte array to this instance.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="bytesIndex">The bytes index.</param>
            <param name="bytesLength">The bytes length.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the buffer length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Copy">
            <summary>
            Copies this instance into new memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Copy(System.Boolean)">
            <summary>
            Copies this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Clone(System.Boolean)">
            <summary>
            Clones this instance.
            </summary>
            <param name="littleEndian">Whether to clone into a little endian buffer.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Subset(System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Subset(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte)">
            <summary>
            Sets the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte,System.Int32)">
            <summary>
            Sets a subset of the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Set(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets a subset of the data buffer to the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Append(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Append(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Appends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Prepend(FM.LiveSwitch.DataBuffer)">
            <summary>
            Prepends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Prepend(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Prepends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToArray">
            <summary>
            Converts this instance to an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToBytes">
            <summary>
            Converts this instance to an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromBytes(System.Byte[])">
            <summary>
            Creates an instance from an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromBytes(System.Byte[],System.Boolean)">
            <summary>
            Creates an instance from an array of bytes.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToHexString">
            <summary>
            Converts this instance to a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromHexString(System.String)">
            <summary>
            Creates an instance from a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromHexString(System.String,System.Boolean)">
            <summary>
            Creates an instance from a hexadecimal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.SequenceEquals(FM.LiveSwitch.DataBuffer)">
            <summary>
            Compares a data buffer for equality.
            </summary>
            <param name="buffer">The data buffer.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.SequenceEqualsConstantTime(FM.LiveSwitch.DataBuffer)">
            <summary>
            Compares a data buffer for equality in constant time.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
              <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write1(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Writes a 1-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 2-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write3(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 3-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write4(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 4-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write5(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 5-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write6(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 6-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write7(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 7-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write8(System.Int32,System.Int32)">
            <summary>
            Writes an 8-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write8(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes an 8-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write9(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 9-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write10(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 10-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write11(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an 11-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write12(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 12-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write13(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 13-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write14(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 14-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write15(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 15-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write16(System.Int32,System.Int32)">
            <summary>
            Writes a 16-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write16(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a 16-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write17(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 17-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write18(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an 18-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write19(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 19-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write20(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 20-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write21(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 21-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write22(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 22-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write23(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a 23-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write24(System.Int32,System.Int32)">
            <summary>
            Writes a 24-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write24(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Writes a 24-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write32(System.Int64,System.Int32)">
            <summary>
            Writes a 32-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write32(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 32-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write40(System.Int64,System.Int32)">
            <summary>
            Writes a 40-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write40(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 40-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write48(System.Int64,System.Int32)">
            <summary>
            Writes a 48-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write48(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 48-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write56(System.Int64,System.Int32)">
            <summary>
            Writes a 56-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write56(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 56-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write64(System.Int64,System.Int32)">
            <summary>
            Writes a 64-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Write64(System.Int64,System.Int32,System.Int32@)">
            <summary>
            Writes a 64-bit value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read1(System.Int32,System.Int32)">
            <summary>
            Reads a 1-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read2(System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read2Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 2-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read3(System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read3Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 3-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read4(System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read4Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 4-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read5(System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read5Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 5-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read6(System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read6Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 6-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read7(System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read7Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 7-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8(System.Int32)">
            <summary>
            Reads an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8Signed(System.Int32)">
            <summary>
            Reads an 8-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8(System.Int32,System.Int32@)">
            <summary>
            Reads an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read8Signed(System.Int32,System.Int32@)">
            <summary>
            Reads an 8-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read9(System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read9Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 9-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read10(System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read10Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 10-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read11(System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read11Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 11-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read12(System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read12Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 12-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read13(System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bitoffset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read13Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 13-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read14(System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read14Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 14-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read15(System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read15Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 15-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16(System.Int32)">
            <summary>
            Reads a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16Signed(System.Int32)">
            <summary>
            Reads a 16-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16(System.Int32,System.Int32@)">
            <summary>
            Reads a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read16Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 16-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read17(System.Int32,System.Int32)">
            <summary>
            Reads a 17-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read17Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 17-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read18(System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read18Signed(System.Int32,System.Int32)">
            <summary>
            Reads an 18-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read19(System.Int32,System.Int32)">
            <summary>
            Reads a 19-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read19Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 19-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read20(System.Int32,System.Int32)">
            <summary>
            Reads a 20-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read20Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 20-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read21(System.Int32,System.Int32)">
            <summary>
            Reads a 21-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read21Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 21-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read22(System.Int32,System.Int32)">
            <summary>
            Reads a 22-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read22Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 22-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read23(System.Int32,System.Int32)">
            <summary>
            Reads a 23-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read23Signed(System.Int32,System.Int32)">
            <summary>
            Reads a 23-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24(System.Int32)">
            <summary>
            Reads a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24Signed(System.Int32)">
            <summary>
            Reads a 24-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24(System.Int32,System.Int32@)">
            <summary>
            Reads a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read24Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 24-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32(System.Int32)">
            <summary>
            Reads a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32Signed(System.Int32)">
            <summary>
            Reads a 32-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32(System.Int32,System.Int32@)">
            <summary>
            Reads a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read32Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 32-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40(System.Int32)">
            <summary>
            Reads a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40Signed(System.Int32)">
            <summary>
            Reads a 40-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40(System.Int32,System.Int32@)">
            <summary>
            Reads a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read40Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 40-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48(System.Int32)">
            <summary>
            Reads a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48Signed(System.Int32)">
            <summary>
            Reads a 48-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48(System.Int32,System.Int32@)">
            <summary>
            Reads a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read48Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 48-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56(System.Int32)">
            <summary>
            Reads a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56Signed(System.Int32)">
            <summary>
            Reads a 56-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56(System.Int32,System.Int32@)">
            <summary>
            Reads a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read56Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 56-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64(System.Int32)">
            <summary>
            Reads a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64Signed(System.Int32)">
            <summary>
            Reads a 64-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64(System.Int32,System.Int32@)">
            <summary>
            Reads a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Read64Signed(System.Int32,System.Int32@)">
            <summary>
            Reads a 64-bit signed value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetPlus">The offset plus the value length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ReadUtf8String(System.Int32)">
            <summary>
            Read a UTF-8 string.
            </summary>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ReadUtf8String(System.Int32,System.Int32)">
            <summary>
            Reads a UTF-8 string.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead1(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Tries to read a 1-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead2(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 2-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead3(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 3-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead4(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 4-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead5(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 5-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead6(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 6-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead7(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 7-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead8(System.Int32,System.Int32@)">
            <summary>
            Tries to read an 8-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead9(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 9-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead10(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 10-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead11(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read an 11-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead12(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 12-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead13(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 13-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead14(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 14-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead15(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 15-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead16(System.Int32,System.Int32@)">
            <summary>
            Tries to read a 16-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead17(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 17-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead18(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read an 18-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead19(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 19-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead20(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 20-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead21(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 21-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead22(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 22-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead23(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tries to read a 23-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead24(System.Int32,System.Int32@)">
            <summary>
            Tries to read a 24-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead32(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 32-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead40(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 40-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead48(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 48-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead56(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 56-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.TryRead64(System.Int32,System.Int64@)">
            <summary>
            Tries to read a 64-bit value.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.And(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "and" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Or(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "or" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.Xor(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise "xor" operation on a value.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJson(FM.LiveSwitch.DataBuffer)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="dataBufferJson">The data buffer JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.ToJsonArray(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="dataBuffers">The data buffers.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBuffer.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="dataBuffersJson">The data buffers JSON.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPooled.RetainCount">
            <summary>
            Gets the amount of times this DataBuffer has been retained. When the count goes to zero, it may be reclaimed by the DataBuffer Pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPooled.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferSubset">
            <summary>
            A subset of a DataBuffer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.Parent">
            <summary>
            Gets the Subset parent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.IsSubset">
            <summary>
            Gets whether this DataBuffer is a subset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferSubset.IsPooled">
            <summary>
            Gets whether this DataBuffer is from a pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Append(FM.LiveSwitch.DataBuffer)">
            <summary>
            Appends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Keep">
            <summary>
            Increment the retain count by one.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Free">
            <summary>
            Decrements the retain count by one and returns the Buffer to the pool if zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Subset(System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Subset(System.Int32,System.Int32)">
            <summary>
            Gets a subset of this instance.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Append(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Appends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Prepend(FM.LiveSwitch.DataBuffer)">
            <summary>
            Prepends a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferSubset.Prepend(FM.LiveSwitch.DataBuffer[])">
            <summary>
            Prepends some buffers.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataContractJsonProvider">
            <summary>
            JSON provider that can serialize/deserialize DataContract types.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataContractJsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>
            The serialized JSON string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.DataContractJsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.DatagramSocket">
            <summary>
            A datagram socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.SendBufferSize">
            <summary>
            Gets the current send buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.ReceiveBufferSize">
            <summary>
            Gets the current receive buffer size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.Send(FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.ReceiveAsync(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocket.MaxQueuedPackets">
            <summary>
            Gets or sets the maximum number of packets
            that can be queued at any given point in time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.RaiseReceiveSuccess(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Invokes the receive success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocket.RaiseReceiveFailure(FM.LiveSwitch.Action1{System.Exception},System.Exception)">
            <summary>
            Invokes the receive failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.DatagramSocketCreateArgs">
            <summary>
            Arguments for a datagram socket create event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocketCreateArgs.IPv6">
            <summary>
            Gets or sets a value indicating whether the socket should support IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DatagramSocketCreateArgs.StreamIndex">
            <summary>
            Gets or sets the stream index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DatagramSocketCreateArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DatagramSocketCreateArgs" /> class.
            </summary>
            <param name="ipv6">Whether the socket should support IPv6.</param>
        </member>
        <member name="T:FM.LiveSwitch.DebugLogProvider">
            <summary>
            Log provider that uses System.Diagnostics.Debug.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DebugLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DebugLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.DebugLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureExtensions">
            <summary>
            Windows only Future extensions
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTask``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Converts a future to a .NET Task.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTaskAsync``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Converts a future to a .NET Task with TaskCreationOptions.RunContinuationsAsynchronously,
             which forces continuations added to the task to be executed asynchronously.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsTask``1(FM.LiveSwitch.Future{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Converts a future to a .NET Task with specific task creation options.
            </summary>
            <param name="future">The future.</param>
            <param name="creationOptions">The task creation options.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.GetAwaiter``1(FM.LiveSwitch.Future{``0})">
            <summary>
            Enables await support for promises. Should not be called directly.
            </summary>
            <param name="future">The future.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromise``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromisePrimitive``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:FM.LiveSwitch.FutureExtensions.AsPromise(System.Threading.Tasks.Task)">
            <summary>
            Converts a .NET Task to a promise.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="T:FM.LiveSwitch.HashContextBase">
            <summary>
            A hash context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HashContextBase.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.#ctor(FM.LiveSwitch.HashType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HashContextBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(System.String)">
            <summary>
            Computes the hash.
            </summary>
            <param name="inputString">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.HashType,System.String)">
            <summary>
            Computes the hash for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="inputString">The input string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.HashContextBase.Compute(FM.LiveSwitch.HashType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.HashContext">
            <summary>
            A hash context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.#ctor(FM.LiveSwitch.HashType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HashContext" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HashContext.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the hash.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.IPAddress">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.Mask">
            <summary>
            Gets or sets the subnet mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.AdapterSpeed">
            <summary>
            Gets or sets the adapter speed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LocalAddress.NetworkType">
            <summary>
            Gets or sets the network type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.#ctor(System.String,System.String,System.Int64,FM.LiveSwitch.NetworkType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LocalAddress"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="mask">The subnet mask.</param>
            <param name="adapterSpeed">The adapter speed.</param>
            <param name="networkType">The network type.</param>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.LocalAddress.IsLocalAddress(System.String)">
            <summary>
            Checks if an IP address is locally accessible
            by a source address.
            </summary>
            <param name="address">The address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LocalNetwork">
            <summary>
            Local network utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetIPAddresses(FM.LiveSwitch.AddressType[])">
            <summary>
            Gets a list of local IP addresses (excluding loopback).
            </summary>
            <param name="addressTypes">The address types.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetIPAddresses(FM.LiveSwitch.AddressType[],System.Boolean)">
            <summary>
            Gets a list of local IP addresses (excluding loopback).
            </summary>
            <param name="addressTypes">The address types.</param>
            <param name="allowPrivate">Whether to include private addresses.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetLocalAddresses(FM.LiveSwitch.AddressType[])">
            <summary>
            Gets the local addresses.
            </summary>
            <param name="addressTypes">The address types.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LocalNetwork.GetAddressType(System.String)">
            <summary>
            Gets the type of the address.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.MacContextBase">
            <summary>
            A message authentication code (MAC) context.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MacContextBase.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.#ctor(FM.LiveSwitch.MacType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MacContextBase" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MacContextBase.Compute(FM.LiveSwitch.MacType,FM.LiveSwitch.DataBuffer,FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC) for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonSerializer">
            <summary>
            Provides methods for serializing/deserializing .NET value types to/from JSON
            as well as facilities for converting objects and arrays if appropriate callbacks
            are supplied to assist with the conversion.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDictionary``1(System.Collections.Generic.Dictionary{System.String,``0},FM.LiveSwitch.Function1{``0,System.String})">
            <summary>
            Serializes a dictionary into a JSON string.
            </summary>
            <typeparam name="T">The type of value stored in the dictionary.</typeparam>
            <param name="dictionary">The dictionary being serialized.</param>
            <param name="serializeValueCallback">The callback that serializes a value.</param>
            <returns>The dictionary as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDictionary``1(System.String,FM.LiveSwitch.Function0{System.Collections.Generic.Dictionary{System.String,``0}},FM.LiveSwitch.Function1{System.String,``0})">
            <summary>
            Deserializes a JSON string into a dictionary.
            </summary>
            <typeparam name="T">The type of value stored in the dictionary.</typeparam>
            <param name="dictionaryJson">The JSON-encoded dictionary.</param>
            <param name="createDictionaryCallback">The callback that creates a blank dictionary.</param>
            <param name="deserializeValueCallback">The callback that deserializes a value.</param>
            <returns>
            The deserialized dictionary.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObjectFast``1(``0,FM.LiveSwitch.Action2{``0,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Serializes a <see cref="T:FM.LiveSwitch.Serializable"/> object into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="source">The object being serialized.</param>
            <param name="callback">The method used for serializing properties.</param>
            <returns>The object as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObject``1(``0,FM.LiveSwitch.Action2{``0,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Serializes an object into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="source">The object being serialized.</param>
            <param name="callback">The method used for serializing properties.</param>
            <returns>The object as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObjectFast``1(System.String,FM.LiveSwitch.Function0{``0},FM.LiveSwitch.Action3{``0,System.String,System.String})">
            <summary>
            Deserializes a JSON string into a <see cref="T:FM.LiveSwitch.Serializable"/> target object type.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="creator">The method used for creating a new object.</param>
            <param name="callback">The method used for deserializing a property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObject``1(System.String,FM.LiveSwitch.Function0{``0},FM.LiveSwitch.Action3{``0,System.String,System.String})">
            <summary>
            Deserializes a JSON string into a target object type.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="creator">The method used for creating a new object.</param>
            <param name="callback">The method used for deserializing a property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeObjectArray``1(``0[],FM.LiveSwitch.Function1{``0,System.String})">
            <summary>
            Serializes an object array into a JSON string.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="objects">The object array being serialized.</param>
            <param name="serializer">The callback used to serialize each item in the array.</param>
            <returns>The object array as a JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeObjectArray``1(System.String,FM.LiveSwitch.Function1{System.String,``0})">
            <summary>
            Deserializes a JSON string into an array of target object types.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="json">The JSON-encoded string.</param>
            <param name="deserializer">The callback used to deserialize each item in the array.</param>
            <returns>An array of deserialized objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeRawArray(System.String[])">
            <summary>
            Serializes a raw array to JSON.
            </summary>
            <param name="jsons">An array of raw values.</param>
            <returns>A JSON-serialized raw array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeRawArray(System.String)">
            <summary>
            Deserializes a raw array from JSON.
            </summary>
            <param name="json">A JSON-serialized raw array.</param>
            <returns>An array of raw values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeStringArray(System.String[])">
            <summary>
            Serializes a string array to JSON.
            </summary>
            <param name="array">An array of string values.</param>
            <returns>A JSON-serialized string array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeStringArray(System.String)">
            <summary>
            Deserializes a simple string array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized string array.</param>
            <returns>An array of string values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeRaw(System.String)">
            <summary>
            Serializes a piece of raw JSON.
            </summary>
            <param name="dataJson">The raw data.</param>
            <returns>The serialized data.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeRaw(System.String)">
            <summary>
            Deserializes a piece of raw JSON.
            </summary>
            <param name="dataJson">The raw data.</param>
            <returns>The deserialized data.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeString(System.String)">
            <summary>
            Serializes a string.
            </summary>
            <param name="value">The string to serialize.</param>
            <returns>The serialized string value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeString(System.String)">
            <summary>
            Deserializes a string.
            </summary>
            <param name="valueJson">The string to deserialize.</param>
            <returns>The deserialized string value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeBooleanArray(System.Boolean[])">
            <summary>
            Serializes a boolean array to JSON.
            </summary>
            <param name="array">An array of boolean values.</param>
            <returns>A JSON-serialized boolean array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeBooleanArray(System.String)">
            <summary>
            Deserializes a boolean array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized boolean array.</param>
            <returns>An array of boolean values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeBoolean(System.Nullable{System.Boolean})">
            <summary>
            Serializes a boolean value.
            </summary>
            <param name="value">The boolean to serialize.</param>
            <returns>The serialized boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeBoolean(System.String)">
            <summary>
            Deserializes a boolean value.
            </summary>
            <param name="valueJson">The boolean JSON to deserialize.</param>
            <returns>The deserialized boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeIntegerArray(System.Int32[])">
            <summary>
            Serializes a integer array to JSON.
            </summary>
            <param name="array">An array of integer values.</param>
            <returns>A JSON-serialized integer array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeIntegerArray(System.String)">
            <summary>
            Deserializes a integer array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized integer array.</param>
            <returns>An array of integer values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeInteger(System.Nullable{System.Int32})">
            <summary>
            Serializes an integer value.
            </summary>
            <param name="value">The integer to serialize.</param>
            <returns>The serialized integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeInteger(System.String)">
            <summary>
            Deserializes an integer value.
            </summary>
            <param name="valueJson">The integer JSON to deserialize.</param>
            <returns>The deserialized integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeLongArray(System.Int64[])">
            <summary>
            Serializes a long array to JSON.
            </summary>
            <param name="array">An array of long values.</param>
            <returns>A JSON-serialized long array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeLongArray(System.String)">
            <summary>
            Deserializes a long array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized long array.</param>
            <returns>An array of long values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeLong(System.Nullable{System.Int64})">
            <summary>
            Serializes a long value.
            </summary>
            <param name="value">The long to serialize.</param>
            <returns>The serialized long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeLong(System.String)">
            <summary>
            Deserializes a long value.
            </summary>
            <param name="valueJson">The long JSON to deserialize.</param>
            <returns>The deserialized long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDecimalArray(System.Decimal[])">
            <summary>
            Serializes a decimal array to JSON.
            </summary>
            <param name="array">An array of decimal values.</param>
            <returns>A JSON-serialized decimal array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDecimalArray(System.String)">
            <summary>
            Deserializes a decimal array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized decimal array.</param>
            <returns>An array of decimal values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDecimal(System.Nullable{System.Decimal})">
            <summary>
            Serializes a decimal value.
            </summary>
            <param name="value">The decimal to serialize.</param>
            <returns>The serialized decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDecimal(System.String)">
            <summary>
            Deserializes a decimal value.
            </summary>
            <param name="valueJson">The decimal JSON to deserialize.</param>
            <returns>The deserialized decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDoubleArray(System.Double[])">
            <summary>
            Serializes a double array to JSON.
            </summary>
            <param name="array">An array of double values.</param>
            <returns>A JSON-serialized double array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDoubleArray(System.String)">
            <summary>
            Deserializes a double array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized double array.</param>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeDouble(System.Nullable{System.Double})">
            <summary>
            Serializes a double value.
            </summary>
            <param name="value">The double to serialize.</param>
            <returns>The serialized double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeDouble(System.String)">
            <summary>
            Deserializes a double value.
            </summary>
            <param name="valueJson">The double JSON to deserialize.</param>
            <returns>The deserialized double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeFloatArray(System.Single[])">
            <summary>
            Serializes a float array to JSON.
            </summary>
            <param name="array">An array of float values.</param>
            <returns>A JSON-serialized float array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeFloatArray(System.String)">
            <summary>
            Deserializes a float array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized float array.</param>
            <returns>An array of float values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeFloat(System.Nullable{System.Single})">
            <summary>
            Serializes a float value.
            </summary>
            <param name="value">The float to serialize.</param>
            <returns>The serialized float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeFloat(System.String)">
            <summary>
            Deserializes a float value.
            </summary>
            <param name="valueJson">The float JSON to deserialize.</param>
            <returns>The deserialized float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeGuidArray(System.Guid[])">
            <summary>
            Serializes a GUID array to JSON.
            </summary>
            <param name="array">An array of GUID values.</param>
            <returns>A JSON-serialized GUID array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeGuidArray(System.String)">
            <summary>
            Deserializes a GUID array from JSON.
            </summary>
            <param name="arrayJson">A JSON-serialized GUID array.</param>
            <returns>An array of GUID values.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.SerializeGuid(System.Nullable{System.Guid})">
            <summary>
            Serializes a globally unique identifier.
            </summary>
            <param name="value">The GUID to serialize.</param>
            <returns>The serialized GUID.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.DeserializeGuid(System.String)">
            <summary>
            Deserializes a globally unique identifier.
            </summary>
            <param name="valueJson">The GUID JSON to deserialize.</param>
            <returns>The deserialized GUID.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.TrimQuotes(System.String)">
            <summary>
            Trims the quotes from a JavaScript string value.
            </summary>
            <param name="value">The JavaScript string value.</param>
            <returns>The string without quotes.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.EscapeString(System.String)">
            <summary>
            Escapes any special characters in a string.
            </summary>
            <param name="text">The string without escaped characters.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.UnescapeString(System.String)">
            <summary>
            Unescapes any special characters from a string.
            </summary>
            <param name="text">The string with escaped characters.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonSerializer.IsValidJson(System.String)">
            <summary>
            Determines whether the specified JSON string is valid.
            </summary>
            <param name="json">The JSON string to validate.</param>
            <returns>True if the JSON string is valid; false otherwise.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEvent">
            <summary>
            Details about a specific log event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Tag">
            <summary>
            Gets or sets the event tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.LogLevel">
            <summary>
            Gets the level of this log event.
            Alias for <see cref="P:FM.LiveSwitch.LogEvent.Level"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Scope">
            <summary>
            Gets or sets the event scope.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Level">
            <summary>
            Gets or sets the event level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Message">
            <summary>
            Gets or sets the event message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.Exception">
            <summary>
            Gets or sets the event exception, if one exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEvent.ThreadId">
            <summary>
            Gets or sets the ID of the thread generating the event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.#ctor(System.DateTime,System.String,System.String,FM.LiveSwitch.LogLevel,System.String,System.Exception,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogEvent"/> class.
            </summary>
            <param name="timestamp">The event timestamp.</param>
            <param name="tag">The event tag.</param>
            <param name="scope">The event scope.</param>
            <param name="level">The event level.</param>
            <param name="message">The event message.</param>
            <param name="exception">The event exception, if one exists.</param>
            <param name="threadId">The ID of the thread generating the event.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToJson(FM.LiveSwitch.LogEvent)">
            <summary>
            Serializes a log event to JSON.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.FromJson(System.String)">
            <summary>
            Deserializes a log event from JSON.
            </summary>
            <param name="logEventJson">The log event JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEvent.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MacContext">
            <summary>
            A message authentication code (MAC) context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.#ctor(FM.LiveSwitch.MacType,FM.LiveSwitch.DataBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MacContext" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.DoDestroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MacContext.DoCompute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the message authentication code (MAC).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.HashType">
            <summary>
            A hash algorithm.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Md5">
            <summary>
            Indciates MD5.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Sha1">
            <summary>
            Indicates SHA1.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HashType.Sha256">
            <summary>
            Indicates SHA256.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MacType">
            <summary>
            A message authentication code (MAC) algorithm.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacMd5">
            <summary>
            Indicates HMAC-MD5.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacSha1">
            <summary>
            Indicates HMAC-SHA1
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.MacType.HmacSha256">
            <summary>
            Indicates HMAC-SHA256
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedAutoResetEvent">
            <summary>
            Managed AutoResetEvent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.WaitOne">
            <summary>
            Blocks until signalled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.WaitOne(System.Int32)">
            <summary>
            Blocks until signalled or until timeout.
            </summary>
            <param name="millisecondsTimeout">Length of time to block for (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedAutoResetEvent.Set">
            <summary>
            Signal to release all threads.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedTimer">
            <summary>
            A managed timer that will tick on intervals. Might catchup if callback takes too long.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.Running">
            <summary>
            Gets whether the timer is running.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.InTick">
            <summary>
            Gets whether the callback is currently being called.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedTimer.Interval">
            <summary>
            Gets the interval that the timer will tick on.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.#ctor(System.Int32,FM.LiveSwitch.Action0)">
            <summary>
            Creates a new instance of the managed timer.
            </summary>
            <param name="interval">The millisecond interval to tick on.</param>
            <param name="callback">The callback to use when a tick occurs.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Start">
            <summary>
            Starts the timer.
            </summary>
            <returns><c>false</c> if the timer was already started; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.Stop(System.Boolean)">
            <summary>
            Stops the timer.
            </summary>
            <param name="waitForStop">True if method should block until timer is stopped.</param>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.StopAsync">
            <summary>
            Stops the timer.
            </summary>
            <returns><c>false</c> if the timer was already stopped; otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.ChangeInterval(System.Int32)">
            <summary>
            Changes the interval of the timer.
            </summary>
            <param name="newInterval"></param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedTimer.PerSecondInterval(System.Double)">
            <summary>
            Calculates a interval based on how many times you want the timer to tick per second.
            </summary>
            <param name="timesPerSecond">The amount of times to tick per second.</param>
        </member>
        <member name="T:FM.LiveSwitch.Md5Sha1HashContext">
            <summary>
            An MD5-SHA1 hash context.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Md5Sha1HashContext"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.Compute(FM.LiveSwitch.DataBuffer)">
            <summary>
            Computes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Md5Sha1HashContext.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RotatingFileLogProvider">
            <summary>
            A Log provider that writes logs to daily log files.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RotatingFileLogProvider.LogDirectory">
            <summary>
            Gets where to store the log files.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RotatingFileLogProvider.DaysToKeep">
            <summary>
            Gets how many days of files to keep.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(FM.LiveSwitch.LogLevel,System.String,System.Int32)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider.
            </summary>
            <param name="level">The level at which to log at.</param>
            <param name="logDirectory">The directory where the logs will be stored.</param>
            <param name="daysToKeep">How many days to keep logs.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider. Defaults to LogLevel.Info.
            </summary>
            <param name="logDirectory">The directory where the logs will be stored.</param>
            <param name="daysToKeep">How many days to keep logs.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of the RotatingFileLogProvider. Defaults to LogLevel.Info, and 7 days.
            </summary>
            <param name="logDirectory">The directory where the logs will be stored.</param>
        </member>
        <member name="M:FM.LiveSwitch.RotatingFileLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.SyslogLogProvider">
            <summary>
            A log provider that sends messages to a syslog server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.#ctor(System.String)">
            <summary>
            Creates a new instance of the syslog provider.
            </summary>
            <param name="host">The host address of the syslog server.</param>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.#ctor(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Creates a new instance of the syslog provider.
            </summary>
            <param name="host">The host address of the syslog server.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.SyslogLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.UnixTimestamp">
            <summary>
            Utility class to assist with Unix timestamp conversions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnixTimestamp.UtcNow">
            <summary>
            Gets the current UTC time in Unix format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.DateTimeToUnix(System.DateTime)">
            <summary>
            Converts a date to a Unix timestamp.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp to a date.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.TicksToUnix(System.Int64)">
            <summary>
            Converts ticks to a Unix timestamp.
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixToTicks(System.Int64)">
            <summary>
            Converts a Unix timestamp to ticks.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="P:FM.LiveSwitch.UnixTimestamp.UtcNowMillis">
            <summary>
            Gets the current UTC time in Unix format with millisecond precision.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.DateTimeToUnixMillis(System.DateTime)">
            <summary>
            Converts a date to a Unix timestamp with millisecond precision.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixMillisToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp with millisecond precision to a date.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.TicksToUnixMillis(System.Int64)">
            <summary>
            Converts ticks to a Unix timestamp with millisecond precision.
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent Unix timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.UnixTimestamp.UnixMillisToTicks(System.Int64)">
            <summary>
            Converts a Unix timestamp with millisecond precision to ticks.
            </summary>
            <param name="unix">The Unix timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TraceLogProvider">
            <summary>
            Log provider that uses System.Diagnostics.Trace.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TraceLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TraceLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.TraceLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dns">
            <summary>
            DNS utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dns.Resolve(System.String,FM.LiveSwitch.Action2{System.String[],System.Object},System.Object)">
            <summary>
            Resolves a host name to an IP address.
            </summary>
            <param name="name">The name to resolve.</param>
            <param name="callback">The callback to invoke when resolution is complete.</param>
            <param name="state">A custom state object to pass into the callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dns.Resolve(System.String)">
            <summary>
            Resolves a host name to an IP address.
            </summary>
            <param name="hostname">The host name to resolve.</param>
        </member>
        <member name="T:FM.LiveSwitch.DnsRequest">
            <summary>
            A DNS request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DnsRequest.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DnsRequest.#ctor(System.String,FM.LiveSwitch.Action2{System.String[],System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DnsRequest" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:FM.LiveSwitch.DnsRequest.Resolve">
            <summary>
            Resolves <see cref="P:FM.LiveSwitch.DnsRequest.Name"/>, executing <see cref="P:FM.LiveSwitch.DnsRequest.Callback"/> when complete.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DoubleHolder">
            <summary>
            Class to hold a double value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DoubleHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DoubleHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DoubleHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DoubleHolder.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DoubleHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dynamic">
            <summary>
            Supplies class instances with a key-value
            mapping to support dynamic property storage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dynamic.DynamicProperties">
            <summary>
            Gets or sets the dynamic properties on this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.GetDynamicValue(System.String)">
            <summary>
            Gets a property value from the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <returns>The stored value, if found; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.SetDynamicValue(System.String,System.Object)">
            <summary>
            Sets a property value in the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <param name="value">The property value. This can be any object that needs to be stored for future use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dynamic.UnsetDynamicValue(System.String)">
            <summary>
            Unsets a property value in the local cache.
            </summary>
            <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
            <returns><c>true</c> if the value was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Error">
            <summary>
            An error.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.ErrorCode">
            <summary>
            Gets or sets the code.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.Error.Code"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.CodeValue">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Error.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.GetDescription">
            <summary>
            Gets the description for this <see cref="T:FM.LiveSwitch.Error"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor(FM.LiveSwitch.ErrorCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Error.#ctor(FM.LiveSwitch.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Error" /> class.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToString">
            <summary>
            Returns the string representation of this error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.ToJson(FM.LiveSwitch.Error)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="error">The error.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Error.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="errorJson">The JSON to deserialize.</param>
            <returns>The deserialized error.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ErrorCode">
            <summary>
            Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketSendError">
            <summary>
            Indicates that the socket encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketReceiveError">
            <summary>
            Indicates that the socket encountered an error while receiving.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketClosed">
            <summary>
            Indicates that the socket is closed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketSendBufferFull">
            <summary>
            Indicates that the socket's send buffer is full.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IPProtocolMismatch">
            <summary>
            Indicates the IP Protocol mismatch has occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.PacketTooLarge">
            <summary>
            Indicates the supplied Turn relay server is invalid or not resolved.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTryAlternate">
            <summary>
            300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
            replying to a request message with an error response message with an error code of 300 (Try Alternate).
            The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
            message MAY be authenticated; however, there are uses cases for
            ALTERNATE-SERVER where authentication of the response is not possible
            or practical.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunBadRequest">
            <summary>
            400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the 
            request without modification from the previous attempt.  The server may not be able 
            to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
            a valid MESSAGE-INTEGRITY attribute on this response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnauthorized">
            <summary>
            401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
            credentials to proceed.  The client should retry the request with proper credentials.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnForbidden">
            <summary>
            403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
            to perform it, likely due to administrative restrictions. The client considers the current
            transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
            same request with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnMobilityForbidden">
            <summary>
            405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it, 
            likely due to administrative restrictions. The client considers the current transaction as having failed.
            The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request 
            containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnknownAttribute">
            <summary>
            420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required 
            attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE 
            attribute of its error response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunStaleCredentials">
            <summary>
            430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunIntegrityCheckFailure">
            <summary>
            431 Integrity Check Failure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunMissingUsername">
            <summary>
            432 Missing Username; the username attribute is not present in the request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnAllocationMismatch">
            <summary>
            437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.  
            One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
            crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address 
            and retry the Allocate request (using a different transaction id).
            The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
            server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunStaleNonce">
            <summary>
            438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
            NONCE provided in the response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunAddressFamilyNotSupported">
            <summary>
            440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnWrongCredentials">
            <summary>
            441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
            in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
            until it believes the problem has been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnUnsupportedTransportProtocol">
            <summary>
            442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
            client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
            been fixed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnPeerAddressFamilyMismatch">
            <summary>
            443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnConnectionAlreadyExists">
            <summary>
            446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with 
            the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
            and the resulting client and peer data connections are either pending or active
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnConnectionTimeoutOrFailure">
            <summary>
            447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
            XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnAllocationQuotaReached">
            <summary>
            486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
            transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server. 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunIceRoleConflict">
            <summary>
            487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server. 
            The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunServerError">
            <summary>
             500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunTurnInsufficientCapacity">
            <summary>
            508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was 
            reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the 
            RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD 
            wait at least 1 minute before trying to create any more allocations on this server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidResponseType">
            <summary>
            Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidErrorCode">
            <summary>
            Indicates that a failed response does not contain an error code or when the error code is inconsistent with
            the contents of the response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidTransactionId">
            <summary>
            Indicates Invalid Stun Transaction Id
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunUnknownStunErrorCode">
            <summary>
            Indicates Unknown Stun Error Code
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StunInvalidMessageIntegrity">
            <summary>
            Indicates Invalid Stun Message Integrity
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketIPError">
            <summary>
            Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalRelayedDatagramCandidateError">
            <summary>
            Indicates the local relayed candidate could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalServerReflexiveCandidateError">
            <summary>
            Indicates the local server reflexive could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SocketManagerInvalidState">
            <summary>
            Indicates that an operation was attempted in an invalid state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceStartError">
            <summary>
            Indicates that the ICE gatherer could not be started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceUnsuitableSocketAssignment">
            <summary>
            Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceAllPortsInUse">
            <summary>
            Indicates that all ports are in use.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalAddressUnavailable">
            <summary>
            Indicates that no local addresses were found.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceGenericGathererError">
            <summary>
            Indicates that an Ice Gatherer error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceRefreshTimeout">
            <summary>
            Indicates that the relayed candidate refresh request timed out.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceRefreshError">
            <summary>
            Indicates that the relayed candidate refresh request failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceCreatePermissionTimeout">
            <summary>
            Indicates that the candidate pair create-permission request timed out.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceCreatePermissionError">
            <summary>
            Indicates that the candidate pair create-permission request failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceConnectivityCheckFailed">
            <summary>
            Indicates that connectivity checks failed on the candidate pair.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceSendError">
            <summary>
            Indicates that the ICE transport encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IcePeerReflexiveError">
            <summary>
            Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IncompatibleIceSetup">
            <summary>
            Indicates that the IcePolicy requirements are not supported by the remote client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsInternalError">
            <summary>
            Indicates that an internal DTLS error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsKeyExchangeFailed">
            <summary>
            Indicates that the DTLS key exchange failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DtlsNotReady">
            <summary>
            Indicates that a DTLS message was received before the DTLS endpoint was ready.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpNoPayloadData">
            <summary>
            Indicates that an SCTP message had no payload data.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpUnsupportedStream">
            <summary>
            Indicates that an attempt was made to send data on an unsupported stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpInvalidState">
            <summary>
            Indicates that an operation was attempted while in a state that doesn't allow it.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.SctpInternalError">
            <summary>
            Indicates that an internal SCTP error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.MediaTransportFailed">
            <summary>
            Indicates the media transport failed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ReliableDataChannelOpenError">
            <summary>
            Indicates that the reliable data channel encountered an error while opening.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ReliableDataChannelSendError">
            <summary>
            Indicates that the reliable data channel encountered an error while sending.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionInvalidArchitecture">
            <summary>
            Indicates that the connection architecture is invalid.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionInternalError">
            <summary>
            Indicates that an internal connection error occurred.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionTransportStartError">
            <summary>
            Indicates that the connection's inner transport could not be started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionTransportClosed">
            <summary>
            Indicates that the connection's inner transport is closed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionDeadStream">
            <summary>
            Indicates that a connection has failed connectivity checks for an extended period.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionNotEstablished">
            <summary>
            Indicates that a connection has not been established within allocated timeframe.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionRemoteFailure">
            <summary>
            Indicates that the remote end of the connection signalled failure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.ConnectionSimulcastNotSupported">
            <summary>
            Indicates that simulcast is not supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamDisabled">
            <summary>
            Indicates that the stream was disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamEncryptionMismatch">
            <summary>
            Indicates that the local and remote stream encryption modes are not compatible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.StreamDirectionMismatch">
            <summary>
            Indicates that the local and remote stream directions are not compatible.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.DataStreamDirectionCannotBeChanged">
            <summary>
            Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.InvalidStreamDirectionChange">
            <summary>
            Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.LocalDescriptionError">
            <summary>
            Indicates that an error was encountered while processing the local description.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.RemoteDescriptionError">
            <summary>
            Indicates that an error was encountered while processing the remote description.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceLocalRelayedStreamCandidateError">
            <summary>
            Indicates the local relayed candidate could not be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ErrorCode.IceInvalidServerAssignmentError">
            <summary>
            Indicates the supplied Turn relay server is invalid or not resolved
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FileAssistant">
            <summary>
            A utility class for reading/writing from/to a <see cref="P:FM.LiveSwitch.FileAssistant.File"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileAssistant.File">
            <summary>
            Gets the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadAllBytes(System.String)">
            <summary>
            Reads all the bytes of a file into a byte array.
            </summary>
            <param name="path">The filepath to the file to read.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.FileAssistant.LittleEndian">
            <summary>
            Gets or sets whether to read/write using little-endian ordering.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.#ctor(FM.LiveSwitch.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileAssistant"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write(System.Byte[])">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write8(System.Int32)">
            <summary>
            Adds an 8-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write16(System.Int32)">
            <summary>
            Adds a 16-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write24(System.Int32)">
            <summary>
            Adds a 24-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write32(System.Int64)">
            <summary>
            Adds a 32-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write40(System.Int64)">
            <summary>
            Adds a 40-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write48(System.Int64)">
            <summary>
            Adds a 48-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write56(System.Int64)">
            <summary>
            Adds a 56-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write64(System.Int64)">
            <summary>
            Adds a 64-bit value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque8(System.Byte[])">
            <summary>
            Adds an 8-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque16(System.Byte[])">
            <summary>
            Adds a 16-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque24(System.Byte[])">
            <summary>
            Adds a 24-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque32(System.Byte[])">
            <summary>
            Adds a 32-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque40(System.Byte[])">
            <summary>
            Adds a 40-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque48(System.Byte[])">
            <summary>
            Adds a 48-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque56(System.Byte[])">
            <summary>
            Adds a 56-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque64(System.Byte[])">
            <summary>
            Adds a 64-bit-length opaque value to a File.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read(System.Int32)">
            <summary>
            Reads a value from a File.
            </summary>
            <param name="length">The number of bytes to read.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read8">
            <summary>
            Converts an 8-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read16">
            <summary>
            Converts a 16-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read24">
            <summary>
            Converts a 24-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read32">
            <summary>
            Converts a 32-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read40">
            <summary>
            Converts a 40-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read48">
            <summary>
            Converts a 48-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read56">
            <summary>
            Converts a 56-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Read64">
            <summary>
            Converts a 64-bit network representation to an integer.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque8">
            <summary>
            Reads an 8-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque16">
            <summary>
            Reads a 16-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque24">
            <summary>
            Reads a 24-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.ReadOpaque32">
            <summary>
            Reads a 32-bit-length opaque value from a File.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteTo(System.Int32,System.Byte[])">
            <summary>
            Adds a value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write8To(System.Int32,System.Int32)">
            <summary>
            Adds an 8-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write16To(System.Int32,System.Int32)">
            <summary>
            Adds a 16-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write24To(System.Int32,System.Int32)">
            <summary>
            Adds a 24-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write32To(System.Int32,System.Int64)">
            <summary>
            Adds a 32-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write40To(System.Int32,System.Int64)">
            <summary>
            Adds a 40-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write48To(System.Int32,System.Int64)">
            <summary>
            Adds a 48-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write56To(System.Int32,System.Int64)">
            <summary>
            Adds a 56-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.Write64To(System.Int32,System.Int64)">
            <summary>
            Adds a 64-bit value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque8To(System.Int32,System.Byte[])">
            <summary>
            Adds an 8-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque16To(System.Int32,System.Byte[])">
            <summary>
            Adds a 16-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque24To(System.Int32,System.Byte[])">
            <summary>
            Adds a 24-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque32To(System.Int32,System.Byte[])">
            <summary>
            Adds a 32-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque40To(System.Int32,System.Byte[])">
            <summary>
            Adds a 40-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque48To(System.Int32,System.Byte[])">
            <summary>
            Adds a 48-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque56To(System.Int32,System.Byte[])">
            <summary>
            Adds a 56-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileAssistant.WriteOpaque64To(System.Int32,System.Byte[])">
            <summary>
            Adds a 64-bit-length opaque value to a File.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.FileStream">
            <summary>
            A file stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FileStream"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Length">
            <summary>
            Gets the file length (must be opened first).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FileStream.Position">
            <summary>
            Gets or sets the position in the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Exists">
            <summary>
            Returns a boolean value indicating whether the file exists.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Open(FM.LiveSwitch.FileStreamAccess)">
            <summary>
            Opens the file.
            </summary>
            <param name="access">The access requirement.</param>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Flush">
            <summary>
            Flushes the file contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.WriteTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the file.
            </summary>
            <param name="location">The location to write to.</param>
            <param name="data">The data to write to the file.</param>
            <param name="index">The index at which to start reading.</param>
            <param name="length">The number of bytes to write.</param>
            <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the file.
            </summary>
            <param name="data">The buffer to fill with data from the file.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <returns>The number of bytes read from the file.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FileStream.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>True if file is deleted, false if exception occured.</returns>
        </member>
        <member name="T:FM.LiveSwitch.FileStreamAccess">
            <summary>
            A file stream access type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FileStreamAccess.Read">
            <summary>
            Indicates read access.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FileStreamAccess.Write">
            <summary>
            Indicates write access.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.PathUtility">
            <summary>
            Collection of utility methods for working with the file system.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.GetTempPath">
            <summary>
            Returns the temporary directory location from the system.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.GetAbsolutePath(System.String)">
            <summary>
            Get the absolute file path of the given directory or file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CombinePaths(System.String,System.String)">
            <summary>
            Combines two strings into a filesystem path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CombinePaths(System.String[])">
            <summary>
            Combines the array of strings into a filesystem path.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.Delete(System.String)">
            <summary>
            Delete a file.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PathUtility.CreateSymlink(System.String,System.String)">
            <summary>
            Create a symlink.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FloatHolder">
            <summary>
            Class to hold a float value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FloatHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FloatHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FloatHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FloatHolder.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.FloatHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Function0`1">
            <summary>
            Generic method signature for callbacks with no parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function1`2">
            <summary>
            Generic method signature for callbacks with one parameter and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function10`11">
            <summary>
            Generic method signature for callbacks with ten parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function2`3">
            <summary>
            Generic method signature for callbacks with two parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function3`4">
            <summary>
            Generic method signature for callbacks with three parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function4`5">
            <summary>
            Generic method signature for callbacks with four parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function5`6">
            <summary>
            Generic method signature for callbacks with five parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function6`7">
            <summary>
            Generic method signature for callbacks with six parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function7`8">
            <summary>
            Generic method signature for callbacks with seven parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function8`9">
            <summary>
            Generic method signature for callbacks with eight parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Function9`10">
            <summary>
            Generic method signature for callbacks with nine parameters and a return value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Future`1">
            <summary>
            A future.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then(FM.LiveSwitch.Action1{`0})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveAction">The resolve action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then(FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Fail(FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.Fail(FM.LiveSwitch.Function1{System.Exception,FM.LiveSwitch.Future{`0}})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectFunction">The reject function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForResult">
            <summary>
            Blocks the current thread from proceeding
            until the future has a result. Throws an
            exception if the promise is rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForResult(System.Int32)">
            <summary>
            Blocks the current thread from proceeding
            until the future has a result. Throws an
            exception if the promise is rejected or
            if the timeout period elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before timing out.</param>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForPromise">
            <summary>
            Blocks the current thread from proceeding
            until the future state has been resolved
            or rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Future`1.WaitForPromise(System.Int32)">
            <summary>
            Blocks the current thread from proceeding
            until the future state has been resolved
            or rejected or if the timeout period elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before timing out.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureBase`1">
            <summary>
            Future base properties/methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.State">
            <summary>
            Gets or sets the current state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.Result">
            <summary>
            Gets or sets the result if resolved.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FutureBase`1.Exception">
            <summary>
            Gets or sets the exception if rejected.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpFileTransfer">
            <summary>
            Helper methods for downloading binary files.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpFileTransfer.DownloadFile(System.String,System.String)">
            <summary>
            Downloads a file from the url. Decompresses using BZip2 if needed. Then saves to the file system at filePath.
            </summary>
            <param name="url">The URL.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpFileTransfer.DownloadFile(System.String)">
            <summary>
            Downloads a file from the url. Decompresses using BZip2 if needed.
            </summary>
            <param name="url">The URL.</param>        
        </member>
        <member name="T:FM.LiveSwitch.HttpMethod">
            <summary>
            The method used by an HTTP request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Get">
            <summary>
            Indicates a GET request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Head">
            <summary>
            Indicates a HEAD request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Post">
            <summary>
            Indicates a POST request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Put">
            <summary>
            Indicates a PUT request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Patch">
            <summary>
            Indicates a PATCH request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.HttpMethod.Delete">
            <summary>
            Indicates a DELETE request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpRequestArgs">
            <summary>
            Arguments for sending an HTTP request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Sender">
            <summary>
            Gets or sets the sender of the content, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.BinaryContent">
            <summary>
            Gets or sets the binary content to transfer over HTTP.
            Overrides <see cref="P:FM.LiveSwitch.HttpRequestArgs.TextContent"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.TextContent">
            <summary>
            Gets or sets the text content to transfer over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Url">
            <summary>
            Gets or sets the target URL for the HTTP request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Headers">
            <summary>
            Gets or sets the headers to transfer over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before timing out the HTTP transfer.
            Defaults to 15000 ms (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke once the outgoing HTTP request is created.
            See <see cref="T:FM.LiveSwitch.HttpRequestCreatedArgs" /> for callback argument details.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke once the incoming HTTP response has been
            received. See <see cref="T:FM.LiveSwitch.HttpResponseReceivedArgs" /> for callback argument details.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpRequestArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HttpRequestArgs"/> class
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpRequestCreatedArgs">
            <summary>
            Arguments passed into callbacks when an HTTP request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.RequestArgs">
            <summary>
            Gets or sets the original request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpRequestCreatedArgs.Request">
            <summary>
            Gets or sets the outgoing HTTP request about to be sent to the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpResponseArgs">
            <summary>
            Arguments for receiving an HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.BinaryContent">
            <summary>
            Gets or sets the binary content read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.TextContent">
            <summary>
            Gets or sets the text content read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.StatusCode">
            <summary>
            Gets or sets the status code read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Headers">
            <summary>
            Gets or sets the headers read from the HTTP response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.Retries">
            <summary>
            Gets or sets the number of retries that were required.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseArgs.RequestArgs">
            <summary>
            Gets or sets the original <see cref="T:FM.LiveSwitch.HttpRequestArgs" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpResponseArgs.#ctor(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.HttpResponseArgs"/> class.
            </summary>
            <param name="requestArgs">The request arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.HttpResponseReceivedArgs">
            <summary>
            Arguments passed into callbacks when an HTTP response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.RequestArgs">
            <summary>
            Gets or sets the original request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Response">
            <summary>
            Gets or sets the incoming HTTP response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpResponseReceivedArgs.Content">
            <summary>
            Gets or sets the binary content received from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpSendFinishArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.HttpTransfer.OnSendStart" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.RequestBinaryContent">
            <summary>
            Gets or sets the binary content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.RequestTextContent">
            <summary>
            Gets or sets the text content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseBinaryContent">
            <summary>
            Gets or sets the binary content of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseTextContent">
            <summary>
            Gets or sets the binary content of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendFinishArgs.ResponseHeaders">
            <summary>
            Gets or sets the headers of the response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpSendStartArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.HttpTransfer.OnSendStart" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.RequestBinaryContent">
            <summary>
            Gets or sets the binary content of the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpSendStartArgs.RequestTextContent">
            <summary>
            Gets or sets the text content of the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpTransfer">
            <summary>
            Base class that defines methods for transferring content over HTTP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.HttpTransfer.OnSendStart">
            <summary>
            Raised before an HTTP request is sent.
            </summary>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.HttpSendStartArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.HttpTransfer.OnSendFinish">
            <summary>
            Raised before an HTTP request is sent.
            </summary>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.HttpSendFinishArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The resulting response.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.AddQueryToUrl(System.String,System.String)">
            <summary>
            Escapes and adds a query parameter as a key/empty-value pair to a URL.
            </summary>
            <param name="url">The URL with the query to which the key/value should be added.</param>
            <param name="key">The key of the query parameter to add.</param>
            <returns>The original URL with the query parameter added.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.AddQueryToUrl(System.String,System.String,System.String)">
            <summary>
            Escapes and adds a query parameter as a key/value pair to a URL.
            </summary>
            <param name="url">The URL with the query to which the key/value should be added.</param>
            <param name="key">The key of the query parameter to add.</param>
            <param name="value">The value of the query parameter to add.</param>
            <returns>The original URL with the query parameter added.</returns>
        </member>
        <member name="P:FM.LiveSwitch.HttpTransfer.WildcardCharacters">
            <summary>
            Gets or sets the wildcard characters used
            to replace asterisks in ReplaceWildcards.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.GetRandomWildcardCharacter">
            <summary>
            Gets a random wildcard character.
            </summary>
            <returns>A random wildcard character.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransfer.ReplaceWildcards(System.String)">
            <summary>
            Replaces asterisks in URLs with characters from
            WildcardCharacters.
            </summary>
            <param name="url">The URL with asterisks.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.HttpTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.HttpTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpTransferFactory.CreateHttpTransfer">
            <summary>
            Gets or sets the callback that creates an HTTP-based transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpTransferFactory.GetHttpTransfer">
            <summary>
            Gets an instance of the HTTP-based transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.HttpWebRequestSender">
            <summary>
            An HTTP web request sender.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.HttpWebRequestTransfer">
            <summary>
            Defines methods for transferring content over HTTP using the HttpWebRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.GetPlatformCode">
            <summary>
            Gets the short code indicating the current platform.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendBinary(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends binary content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendText(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends text content synchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <returns>The response arguments from the server.</returns>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendBinaryAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends binary content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.SendTextAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends text content asynchronously using the specified arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="callback">The callback to execute on success or failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.HttpWebRequestTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.HttpWebRequestTransfer.UseProxy">
            <summary>
            Gets or sets whether to use the system
            proxy when creating an HttpWebRequest.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ILog">
            <summary>
            ILog interface for loggers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.Tag">
            <summary>
            Gets the tag of the logger.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Flush">
            <summary>
            Ensures that all logs are written out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String)">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.String)">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.Exception)">
            <summary>
            Writes a verbose message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Verbose(System.String,System.String,System.Exception)">
            <summary>
            Writes a verbose message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String)">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.String)">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.Exception)">
            <summary>
            Writes a debug message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Writes a debug message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String)">
            <summary>
            Writes a info message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.String)">
            <summary>
            Writes a info message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.Exception)">
            <summary>
            Writes an info message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Info(System.String,System.String,System.Exception)">
            <summary>
            Writes an info message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String)">
            <summary>
            Writes a warn message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.String)">
            <summary>
            Writes a warn message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.Exception)">
            <summary>
            Writes a warn message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Writes a warn message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String)">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.String)">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes a error message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Error(System.String,System.String,System.Exception)">
            <summary>
            Writes a error message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String)">
            <summary>
            Writes a fatal message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.String)">
            <summary>
            Writes a fatal message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes a fatal message with exception to the log.
            </summary>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Writes a fatal message with exception to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(FM.LiveSwitch.LogEvent)">
            <summary>
            Writes a log event to the log.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(System.String)">
            <summary>
            Writes a generic message to the log.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.Log(System.String,System.String)">
            <summary>
            Writes a generic message to the log.
            </summary>
            <param name="scope">The scope of this log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:FM.LiveSwitch.ILog.IsLogEnabled(FM.LiveSwitch.LogLevel)">
            <summary>
            Returns true if the passed log level is enabled on this logger.
            </summary>
            <param name="level">Log level to check.</param>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsVerboseEnabled">
            <summary>
            Gets if the verbose log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsDebugEnabled">
            <summary>
            Gets if the debug log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsInfoEnabled">
            <summary>
            Gets if the info log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsWarnEnabled">
            <summary>
            Gets if the warn log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsErrorEnabled">
            <summary>
            Gets if the error log level is enabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ILog.IsFatalEnabled">
            <summary>
            Gets if the fatal log level is enabled.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IntegerHolder">
            <summary>
            Class to hold an integer value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IntegerHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IntegerHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IntegerHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IntegerHolder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.IntegerHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.IPromise">
            <summary>
            Interface for a promise that can be rejected.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IPromise.Reject(System.Exception)">
            <summary>
            Rejects the promise.
            </summary>
            <param name="exception">The exception.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.IPromise.CastAndResolve(System.Object)">
            <summary>
            Casts the result and resolves the promise.
            Will throw an exception if the cast fails.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Json">
            <summary>
            JSON utility class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Json.Provider">
            <summary>
            Gets or sets the JSON provider to use.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Json.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialized JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Json.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:FM.LiveSwitch.JsonChecker">
            <summary>
            A pushdown automaton that very quickly determines if a JSON text is
            syntactically correct.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JsonChecker"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.JsonChecker"/> class.
            </summary>
            <param name="depth">The maximum depth to recurse.</param>
        </member>
        <member name="M:FM.LiveSwitch.JsonChecker.CheckString(System.String)">
            <summary>
            Checks if the specified string is valid JSON.
            </summary>
            <param name="str">The string to check.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.JsonProvider">
            <summary>
            Base class for all JSON provider implementations.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.JsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialized JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.JsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:FM.LiveSwitch.License">
            <summary>
            A license.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.Current">
            <summary>
            Gets the current license.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.SetKey(System.String)">
            <summary>
            Sets the license key.
            </summary>
            <param name="key">The license key.</param>
        </member>
        <member name="M:FM.LiveSwitch.License.CheckKey">
            <summary>
            Gets a value indicating whether a valid key has been set.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.Check(System.String@)">
            <summary>
            Checks if the license is valid for this product.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.License.Id">
            <summary>
            Gets the license identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.AccountId">
            <summary>
            Gets the account identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ProductCode">
            <summary>
            Gets the product code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.SiteName">
            <summary>
            Gets the site name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.SiteAddress">
            <summary>
            Gets the site address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactName">
            <summary>
            Gets the contact name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactPhoneNumber">
            <summary>
            Gets the contact phone number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ContactEmailAddress">
            <summary>
            Gets the contact email address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.CoreCount">
            <summary>
            Gets the core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ValidFrom">
            <summary>
            Gets the "valid from" date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.ValidTo">
            <summary>
            Gets the "valid to" date.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.IsTrial">
            <summary>
            Gets a value indicating whether this is a trial license.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.License.IsValid">
            <summary>
            Gets a value indicating whether this is a valid license.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.License.ParseKey(System.String)">
            <summary>
            Parses a license key.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LockedRandomizer">
            <summary>
            Thread-safe class providing access to a single <see cref="F:FM.LiveSwitch.LockedRandomizer.Randomizer"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextLong">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array of bytes to fill.</param>
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.LockedRandomizer.RandomString(System.Int32)">
            <summary>
            Generates a random string of a specified size.
            </summary>
            <param name="size">The size of the output string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Log">
            <summary>
            Log utility class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.LogLevel">
            <summary>
            Gets or sets the default log level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.Provider">
            <summary>
            Gets or sets the first log provider.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Log.Providers">
            <summary>
            Gets the log providers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.AddProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Registers a log provider as a logging target.
            Alias for RegisterProvider.
            </summary>
            <param name="provider">The new provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RegisterProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Registers a log provider as a logging target.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.AddProvider(FM.LiveSwitch.LogProvider,FM.LiveSwitch.LogLevel)">
            <summary>
            Registers a log provider as a logging target,
            setting its log level in the process.
            Alias for RegisterProvider.
            </summary>
            <param name="provider">The new provider.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RegisterProvider(FM.LiveSwitch.LogProvider,FM.LiveSwitch.LogLevel)">
            <summary>
            Registers a log provider as a logging target,
            setting its log level in the process.
            </summary>
            <param name="provider">The provider.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RemoveProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Unregisters a log provider as a logging target.
            Alias for UnregisterProvider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.UnregisterProvider(FM.LiveSwitch.LogProvider)">
            <summary>
            Unregisters a log provider as a logging target.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.RemoveProviders">
            <summary>
            Unregisters all log providers as logging targets.
            Alias for UnregisterProviders.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.UnregisterProviders">
            <summary>
            Unregisters all log providers as logging targets.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.SetTagOverride(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Override the default log level for a specific tag.
            </summary>
            <param name="tag">The Tag to set the log level to.</param>
            <param name="level">The new loglevel to use.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Flush">
            <summary>
            Blocks until all logs are written out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.String)">
            <summary>
            Get a logger for a specific Tag.
            </summary>
            <param name="tag">The tag to log to.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.Type)">
            <summary>
            Get a logger for a specific Tag. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.String,FM.LiveSwitch.LogLevel)">
            <summary>
            Get a logger for a specific Tag.
            </summary>
            <param name="tag">The tag to log to.</param>
            <param name="level">Logger's default log level.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Log.GetLogger(System.Type,FM.LiveSwitch.LogLevel)">
            <summary>
            Get a logger for a specific Tag.  The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <param name="level">Logger's default log level.</param>
            <returns>A ILog that will log to the specified tag.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsVerboseEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for verbose-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for verbose-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for debug-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for info-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for warn-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for error-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FM.LiveSwitch.Log.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for fatal-level messages.
            </summary>
            <value>
              <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FM.LiveSwitch.Log.Verbose(System.String)">
            <summary>
            Logs a verbose-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Debug(System.String)">
            <summary>
            Logs a debug-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Info(System.String)">
            <summary>
            Logs an info-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Warn(System.String)">
            <summary>
            Logs a warn-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Error(System.String)">
            <summary>
            Logs an error-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Fatal(System.String)">
            <summary>
            Logs a fatal-level message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Verbose(System.String,System.Exception)">
            <summary>
            Logs a verbose-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Info(System.String,System.Exception)">
            <summary>
            Logs an info-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Warn(System.String,System.Exception)">
            <summary>
            Logs a warn-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Error(System.String,System.Exception)">
            <summary>
            Logs an error-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal-level message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.Log.WriteLine(System.String)">
            <summary>
            Writes a line of text to the log.
            </summary>
            <param name="text">The text to write to the log.</param>
        </member>
        <member name="T:FM.LiveSwitch.LogLevel">
            <summary>
            The level at which to log.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Verbose">
            <summary>
            Logs extensive messages detailing the program's state for troubleshooting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Debug">
            <summary>
            Logs messages relevant to development and troubleshooting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Info">
            <summary>
            Logs messages relevant to expected use.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Warn">
            <summary>
            Logs messages relevant to potential pit-falls.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Error">
            <summary>
            Logs messages relevant to errors that allow program execution to continue.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.Fatal">
            <summary>
            Logs messages relevant to errors that require the program to terminate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LogLevel.None">
            <summary>
            Logs nothing.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.LogProvider">
            <summary>
            Base class for all logging provider implementations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.ProcessId">
            <summary>
            Gets the current process id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.Level">
            <summary>
            Gets or sets the log level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogProvider.Filter">
            <summary>
            Gets or sets a filter on the log provider.
            Returning <c>true</c> will log the event,
            while returning <c>false</c> will skip it.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LogProvider"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.Log(FM.LiveSwitch.LogEvent)">
            <summary>
            Log a message.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetPrefix(FM.LiveSwitch.LogLevel,System.Boolean)">
            <summary>
            Converts a log-level to a 5-character string for
            consistently-spaced character sequences.
            </summary>
            <param name="level">The log level.</param>
            <param name="includeTimestamp">Whether to include a timestamp in the prefix.</param>
            <returns>The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GenerateLogLine(FM.LiveSwitch.LogEvent)">
            <summary>
            Generates a default log line.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetProduct">
            <summary>
            Returns the name of the current product.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetLogLevelString(FM.LiveSwitch.LogLevel)">
            <summary>
            Converts a log-level to a 5-character string for
            consistently-spaced character sequences.
            </summary>
            <param name="level">The log level.</param>
            <returns>The log level as an upper-case string
            with right-side whitespace padding to ensure
            a 5-character sequence.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogProvider.GetPrefixTimestamp(System.DateTime)">
            <summary>
            Converts a timestamp to an ISO-8601-formatted string
            for rendering in a log message (YYYY-MM-DDThh:mm:ss.sssZ).
            </summary>
            <param name="timestamp">The timestamp.</param>
            <returns>The timestamp as a formatted string.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LongHolder">
            <summary>
            Class to hold a long value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LongHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LongHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LongHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LongHolder.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LongHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedCondition">
            <summary>
            A managed condition.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Halt">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Halt(System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.Pulse">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedCondition.PulseAll">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedLock">
            <summary>
            A managed lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedLock.Lock">
            <summary>
            Acquires an exclusive lock.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedLock.Unlock">
            <summary>
            Releases an exclusive lock.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedSocket">
            <summary>
            A socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.PublicIPAddress">
            <summary>
            Gets or sets the public IP address, if known.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.AdapterSpeed">
            <summary>
            Gets or sets the adapter speed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="T:FM.LiveSwitch.ManagedStopwatch">
            <summary>
            Managed stopwatch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedStopwatch.ElapsedTicks">
            <summary>
            Gets the total time measured by the stopwatch in ticks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total time measured by the stopwatch in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.GetTimestamp">
            <summary>
            Gets the current system timestamp in ticks.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ManagedStopwatch"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Start">
            <summary>
            Starts the stopwatch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Stop">
            <summary>
            Stops the stopwatch.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedStopwatch.Restart">
            <summary>
            Restarts the stopwatch.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ManagedThread">
            <summary>
            Managed thread.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ManagedThread.CurrentThreadId">
            <summary>
            Gets the id for the current thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.#ctor(FM.LiveSwitch.Action1{FM.LiveSwitch.ManagedThread})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ManagedThread"/> class.
            </summary>
            <param name="loop">The loop to run on the thread.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Dispatch(FM.LiveSwitch.Action0)">
            <summary>
            Dispatches an action to a background thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Dispatch(FM.LiveSwitch.Function0{System.Threading.Tasks.Task})">
            <summary>
            Dispatches an action to a background thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Start">
            <summary>
            Starts the thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.LoopBegin">
            <summary>
            Should be invoked when the loop begins before other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.LoopEnd">
            <summary>
            Should be invoked when the loop ends after other code.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ManagedThread.Sleep(System.Int32)">
            <summary>
            Sleeps the current thread for a specified period of time.
            </summary>
            <param name="millisecondsTimeout">The length of time to sleep in milliseconds.</param>
        </member>
        <member name="T:FM.LiveSwitch.MathAssistant">
            <summary>
            Contains methods for cross-platform math operations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MathAssistant.Pi">
            <summary>
            Gets the value of pi.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MathAssistant.E">
            <summary>
            Gets the value of e.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Int32)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="intValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Int64)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="longValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Single)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="floatValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Abs(System.Double)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="doubleValue">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Acos(System.Double)">
            <summary>
            Returns the arc cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Asin(System.Double)">
            <summary>
            Returns the arc sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Atan(System.Double)">
            <summary>
            Returns the arc tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Atan2(System.Double,System.Double)">
            <summary>
            Returns the arc arc tangent of the specified values.
            </summary>
            <param name="y">The y value.</param>
            <param name="x">The x value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Ceil(System.Double)">
            <summary>
            Returns the ceiling of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Exp(System.Double)">
            <summary>
            Returns e raised to the power of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Floor(System.Double)">
            <summary>
            Returns the floor of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Log(System.Double)">
            <summary>
            Returns the natural logarithm of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Log10(System.Double)">
            <summary>
            Returns the base-10 logarithm of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="intValue1">The first value.</param>
            <param name="intValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Int64,System.Int64)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="longValue1">The first value.</param>
            <param name="longValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="floatValue1">The first value.</param>
            <param name="floatValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two values.
            </summary>
            <param name="doubleValue1">The first value.</param>
            <param name="doubleValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="intValue1">The first value.</param>
            <param name="intValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="longValue1">The first value.</param>
            <param name="longValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="floatValue1">The first value.</param>
            <param name="floatValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="doubleValue1">The first value.</param>
            <param name="doubleValue2">The second value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Pow(System.Double,System.Double)">
            <summary>
            Returns the result of raising x to the power of y.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Round(System.Double)">
            <summary>
            Returns to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sin(System.Double)">
            <summary>
            Returns the sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.MathAssistant.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified value.
            </summary>
            <param name="value">The value.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.NetworkTimeProtocol">
            <summary>
            Utility class to assist with Network Time Protocol (NTP) conversions.
            NTP timestamps are 64-bit values that can span just over 136 years,
            from 1900-01-01 to 2036-02-08. Compact NTP timestamps are 32-bit
            values that can span span just over 18 hours.
            These utility methods guarantee precision to the millisecond.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.UtcNow">
            <summary>
            Gets the current UTC time in NTP format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToNtpSeconds(System.DateTime)">
            <summary>
            Converts a date to an NTP timestamp (double).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpSecondsToDateTime(System.Double)">
            <summary>
            Converts an NTP timestamp (double) to a date.
            </summary>
            <param name="ntpSeconds">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToNtpSeconds(System.Int64)">
            <summary>
            Converts ticks to an NTP timestamp (double).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpSecondsToTicks(System.Double)">
            <summary>
            Converts an NTP timestamp (double) to ticks.
            </summary>
            <param name="ntpSeconds">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToNtp(System.DateTime)">
            <summary>
            Converts a date to an NTP timestamp (64 bits).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpToDateTime(System.Int64)">
            <summary>
            Converts an NTP timestamp (64 bits) to a date.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToNtp(System.Int64)">
            <summary>
            Converts ticks to an NTP timestamp (64 bits).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.NtpToTicks(System.Int64)">
            <summary>
            Converts an NTP timestamp (64 bits) to ticks.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.DateTimeToCompactNtp(System.DateTime)">
            <summary>
            Converts a date to a compact NTP timestamp (32 bits).
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.CompactNtpToDateTime(System.Int64)">
            <summary>
            Converts a compact NTP timestamp (32 bits) to a date.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent date.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.TicksToCompactNtp(System.Int64)">
            <summary>
            Converts ticks to a compact NTP timestamp (32 bits).
            </summary>
            <param name="ticks">The ticks to convert.</param>
            <returns>The equivalent NTP timestamp.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.CompactNtpToTicks(System.Int64)">
            <summary>
            Converts a compact NTP timestamp (32 bits) to ticks.
            </summary>
            <param name="ntp">The NTP timestamp to convert.</param>
            <returns>The equivalent ticks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> class
            with base set to 1900-01-01.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkTimeProtocol.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> class.
            </summary>
            <param name="baseTicks">The base ticks.</param>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.Absolute">
            <summary>
            Gets an instance of <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> that uses
            1900-01-01 as the reference date, for use cases where the absolute
            wall-clock time represented is important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkTimeProtocol.Relative">
            <summary>
            Gets an instance of <see cref="T:FM.LiveSwitch.NetworkTimeProtocol"/> that uses
            zero as the reference date, for use cases where the time is relative
            to other times, and the reference time is not significant.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.NullJsonProvider">
            <summary>
            An implementation of a JSON provider that does nothing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullJsonProvider.Serialize``1(``0)">
            <summary>
            Serializes a value to a JSON string.
            </summary>
            <typeparam name="T">The type the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>
            The serialized JSON string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.NullJsonProvider.Deserialize``1(System.String)">
            <summary>
            Deserializes a value from a JSON string.
            </summary>
            <typeparam name="T">The type the value to deserialize.</typeparam>
            <param name="valueJson">The JSON string to deserialize.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.NullLogProvider">
            <summary>
            An implementation of a logging provider that does nothing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NullLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.ParseAssistant">
            <summary>
            Contains methods for cross-platform primitive parsing from strings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseByteValue(System.String)">
            <summary>
            Parses a byte value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed byte value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseShortValue(System.String)">
            <summary>
            Parses a short value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed short value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseIntegerValue(System.String)">
            <summary>
            Parses an integer value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed integer value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseLongValue(System.String)">
            <summary>
            Parses a long value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed long value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseFloatValue(System.String)">
            <summary>
            Parses a float value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed float value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseDoubleValue(System.String)">
            <summary>
            Parses a double value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed double value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseDecimalValue(System.String)">
            <summary>
            Parses a decimal value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed decimal value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseBooleanValue(System.String)">
            <summary>
            Parses a boolean value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed boolean value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.ParseGuidValue(System.String)">
            <summary>
            Parses a GUID value from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed GUID value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseByteValue(System.String,System.Byte@)">
            <summary>
            Attempts to parse a byte value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="byteResult">The parsed byte value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseShortValue(System.String,System.Int16@)">
            <summary>
            Attempts to parse a short value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="shortResult">The parsed short value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseIntegerValue(System.String,System.Int32@)">
            <summary>
            Attempts to parse an integer value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="intResult">The parsed integer value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseLongValue(System.String,System.Int64@)">
            <summary>
            Attempts to parse a long value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="longResult">The parsed long value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseFloatValue(System.String,System.Single@)">
            <summary>
            Attempts to parse a float value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="floatResult">The parsed float value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseDoubleValue(System.String,System.Double@)">
            <summary>
            Attempts to parse a double value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="doubleResult">The parsed double value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseDecimalValue(System.String,System.Decimal@)">
            <summary>
            Attempts to parse a decimal value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="decimalResult">The parsed decimal value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseBooleanValue(System.String,System.Boolean@)">
            <summary>
            Attempts to parse a boolean value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="boolResult">The parsed boolean value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ParseAssistant.TryParseGuidValue(System.String,System.Guid@)">
            <summary>
            Attempts to parse a GUID value from a string.
            </summary>
            <param name="s">The string.</param>
            <param name="guidResult">The parsed GUID value.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Platform">
            <summary>
            Platform-specific methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Platform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Platform"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.IsMobile">
            <summary>
            Gets or sets a value indicating whether this is a mobile platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.IsLittleEndian">
            <summary>
            Gets a value indicating whether this is little-endian platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.OperatingSystem">
            <summary>
            Gets the current operating system.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.OperatingSystemVersion">
            <summary>
            Gets the current operating system version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.SourceLanguage">
            <summary>
            Gets the current programming language for the source code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.Architecture">
            <summary>
            Gets the current CPU architecture.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.CoreCount">
            <summary>
            Gets the current CPU core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.PhysicalMemory">
            <summary>
            Gets the current physical memory in bytes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.MachineName">
            <summary>
            Gets the current machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.DirectorySeparator">
            <summary>
            Gets the character used to separate directories.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.ProcessId">
            <summary>
            Gets the id of the current process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.UseFipsAlgorithms">
            <summary>
            Gets or sets a value that indicates whether FIPS algorithms should be used.
            Note that not all platforms or third-party libraries are FIPS-compliant, so
            this should not be used as a guarantee of FIPS compliance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Platform.CryptoLibrary">
            <summary>
            Gets or sets the cryptography library to use.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataBufferPool">
            <summary>
            A data buffer pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.Type)">
            <summary>
            Get a data buffer pool tracer for a specific tag using the default pool. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <returns>A tracer that will associate stats with the tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.String)">
            <summary>
            Get a data buffer pool tracer for a specific tag using the default pool.
            </summary>
            <param name="tag">The tag to log to.</param>
            <returns>A tracer that will associate stats with the type.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.Type,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Get a data buffer pool tracer for a specific tag and pool. The tag is taken from the class namespace and name.
            </summary>
            <param name="type">The type to use as the tag.</param>
            <param name="pool">The underlying pool.</param>
            <returns>A tracer that will associate stats with the tag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTracer(System.String,FM.LiveSwitch.DataBufferPool)">
            <summary>
            Get a data buffer pool tracer for a specific tag and pool.
            </summary>
            <param name="tag">The tag to log to.</param>
            <param name="pool">The underlying pool.</param>
            <returns>A tracer that will associate stats with the type.</returns>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.BlockSize">
            <summary>
            Gets or sets the block size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.EnableStatistics">
            <summary>
            Gets or sets whether to enable statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Disabled">
            <summary>
            Gets or sets whether the pool is disabled.
            If disabled, each call to take a buffer
            will result in a new allocation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Statistics">
            <summary>
            Gets the pool usage statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.TraceStatistics">
            <summary>
            Gets all tagged pool usage statistics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTraceStatistics(System.Type)">
            <summary>
            Gets pool usage statistics for a specific tag.
            </summary>
            <param name="type">The type to use as the tag.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.GetTraceStatistics(System.String)">
            <summary>
            Gets pool usage statistics for a specific tag.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataBufferPool.IsSupported">
            <summary>
            Gets a value indicating whether DataBuffer pooling is supported on this platform.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPool"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataBufferPool"/> class.
            </summary>
            <param name="tag">The tag for stats output.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataBufferPool.Take(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Takes a buffer from the pool.
            </summary>
            <param name="size">The number of bytes needed.</param>
            <param name="littleEndian">Whether the data buffer should be little-endian.</param>
            <param name="clearBytes">Whether to clear the data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.PoolStatistics">
            <summary>
            Pool statistics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalPoolSize">
            <summary>
            Gets the total size of all buffers allocated in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.PendingPoolSize">
            <summary>
            Gets the total size of all buffers currently in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.PaddingWasted">
            <summary>
            Gets the amount of buffer padding that is unused for caller's requested buffers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.ActivePools">
            <summary>
            Gets the number of pools in use.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.HitPercentage">
            <summary>
            Gets the percentage of cache hits.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.MissPercentage">
            <summary>
            Gets the percentage of cache misses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.ReturnPercentage">
            <summary>
            Gets the percentage of items returned to the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalPools">
            <summary>
            Gets the total pools created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.PoolStatistics.TotalCalls">
            <summary>
            Gets the total calls to obtain a DataBuffer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PoolStatistics.ToString">
            <summary>
            Overriden ToString
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Promise`1">
            <summary>
            A promise.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.#ctor">
            <summary>
            Creates a new promise.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.#ctor(FM.LiveSwitch.Action2{FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception}})">
            <summary>
            Creates a promise with a resolve callback and a reject callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then(FM.LiveSwitch.Action1{`0})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then(FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveAction">The resolve action.</param>
            <param name="rejectAction">The reject action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}})">
            <summary>
            Appends a handler to be executed when the promise is resolved.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Then``1(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{``0}},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends handlers to be executed when the promise is resolved or rejected.
            </summary>
            <param name="resolveFunction">The resolve function.</param>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Fail(FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectAction">The reject action.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Fail(FM.LiveSwitch.Function1{System.Exception,FM.LiveSwitch.Future{`0}})">
            <summary>
            Appends a handler to be executed when the promise is rejected.
            </summary>
            <param name="rejectFunction">The reject function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Wrap``1(FM.LiveSwitch.Function0{``0})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            </summary>
            <param name="callbackFunction">The callback function.</param>
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.Wrap(FM.LiveSwitch.Action0)">
            <summary>
            Creates a promise and resolves it after invoking a callback
            action, or rejects it if an exception is thrown.
            </summary>
            <param name="callbackAction">The callback action.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.WrapAsync``1(FM.LiveSwitch.Function0{``0})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            The callback is always dispatched to the background.
            </summary>
            <param name="callbackFunction">The callback function.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Promise`1.WrapAsync(FM.LiveSwitch.Action0)">
            <summary>
            Creates a promise and resolves it after invoking a callback
            action, or rejects it if an exception is thrown.
            The callback is always dispatched to the background.
            </summary>
            <param name="callbackAction">The callback action.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.PromiseBase`1">
            <summary>
            Promise base properties/methods.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.PromiseBase`1.Id">
            <summary>
            Gets the identifier of this promise.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.PromiseBase`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.CastAndResolve(System.Object)">
            <summary>
            Casts the result and resolves the promise.
            Will throw an exception if the cast fails.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Resolve(`0)">
            <summary>
            Resolves the promise.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Reject(System.Exception)">
            <summary>
            Rejects the promise.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveNow``1(``0)">
            <summary>
            Creates a promise and resolves it immediately
            using the given result value.
            </summary>
            <param name="result">The result.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectNow``1(System.Exception)">
            <summary>
            Creates a promise and rejects it immediately.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveAsync(`0)">
            <summary>
            Resolves the promise asynchronously.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectAsync(System.Exception)">
            <summary>
            Rejects the promise asynchronously.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.All``1(FM.LiveSwitch.Future{``0}[])">
            <summary>
            Returns a promise that resolves when all passed in promises resolve.
            </summary>
            <param name="promises">The promises to check.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.DoAll``1(FM.LiveSwitch.Future{``0}[],FM.LiveSwitch.AtomicInteger)">
            <summary>
            Internal DoAll.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.ResolveNow">
            <summary>
            Creates a promise and resolves it immediately
            using a null result value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.RejectNow(System.Exception)">
            <summary>
            Creates a promise and rejects it immediately.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.WrapPromise``1(FM.LiveSwitch.Function0{FM.LiveSwitch.Future{``0}})">
            <summary>
            Creates a promise and resolves it using the result from a
            callback function, or rejects it if an exception is thrown.
            </summary>
            <param name="callback">The callback function.</param>
        </member>
        <member name="M:FM.LiveSwitch.PromiseBase`1.Process(FM.LiveSwitch.IPromise,FM.LiveSwitch.Action1{`0},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Processes the specified promise.
            </summary>
            <param name="promise">The promise.</param>
            <param name="resolve">The resolve.</param>
            <param name="reject">The reject.</param>
        </member>
        <member name="T:FM.LiveSwitch.FutureState">
            <summary>
            The state of a future.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Pending">
            <summary>
            Indicates that the promise has not been resolved or rejected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Resolved">
            <summary>
            Indicates that the promise has been resolved.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.FutureState.Rejected">
            <summary>
            Indicates that the promise has been rejected.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Randomizer">
            <summary>
            Utility class for random values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
            <param name="maxValue">The maximum value (exclusive).</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array of bytes to fill.</param>
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Randomizer.RandomString(System.Int32)">
            <summary>
            Generates a random string of a specified size.
            </summary>
            <param name="size">The size of the output string.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.RsaCrypto">
            <summary>
            RSA-based cryptographic functions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaCrypto.DefaultKeySize">
            <summary>
            Gets or sets the default key length.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.CreateKey">
            <summary>
            Creates an RSA key.
            </summary>
            <returns>An RSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.CreateKey(System.Int32)">
            <summary>
            Creates an RSA key.
            </summary>
            <param name="keySize">The key size.</param>
            <returns>An RSA key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignMd5Sha1(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs an MD5/SHA-1 hash using a specified key.
            </summary>
            <param name="md5Sha1">The MD5/SHA-1 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifyMd5Sha1(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies an MD5/SHA-1 hash using a specified key and signature.
            </summary>
            <param name="md5Sha1">The MD5/SHA-1 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignSha1(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs a SHA-1 hash using a specified key.
            </summary>
            <param name="sha1">The SHA-1 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifySha1(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies a signature using a specified key and SHA-1 hash.
            </summary>
            <param name="sha1">The SHA-1 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.SignSha256(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Signs a SHA-256 hash using a specified key.
            </summary>
            <param name="sha256">The SHA-256 hash.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.VerifySha256(System.Byte[],System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies a signature using a specified key and SHA-256 hash.
            </summary>
            <param name="sha256">The SHA-256 hash.</param>
            <param name="signature">The input signature.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.Encrypt(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Encrypts a value using a specified public key.
            </summary>
            <param name="data">The input byte array.</param>
            <param name="publicKey">The public key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.RsaCrypto.Decrypt(System.Byte[],FM.LiveSwitch.RsaKey)">
            <summary>
            Decrypts a value using a specified private key.
            </summary>
            <param name="data">The input byte array.</param>
            <param name="privateKey">The private key.</param>
            <returns>
            The output byte array.
            </returns>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="T:FM.LiveSwitch.BigInteger.RandomGenerator">
            <summary>
            Platform-specific random number generator.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.RandomGenerator.#ctor">
            <summary>
            Creates a new random generator.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.RandomGenerator.GetBytes(System.Byte[])">
            <summary>
            Generates random number data into a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.GenerateRandom(System.Int32,FM.LiveSwitch.BigInteger.RandomGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Randomize(FM.LiveSwitch.BigInteger.RandomGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.ExtraLow">
            <summary>
            Only suitable for development use, probability of failure may be greater than 1/2^20.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Low">
            <summary>
            Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Medium">
            <summary>
            Designed for production use. Probability of failure about 1/2^80.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.High">
            <summary>
            Suitable for sensitive data. Probability of failure about 1/2^160.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.ExtraHigh">
            <summary>
            Use only if you have lots of time! Probability of failure about 1/2^320.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BigInteger.ConfidenceFactor.Provable">
            <summary>
            Only use methods which generate provable primes. Not yet implemented.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.PrimalityTests.RabinMillerTest(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger.ConfidenceFactor)">
            <summary>
                Probabilistic prime test based on Rabin-Miller's test
            </summary>
            <param name="bi" type="BigInteger.BigInteger">
                <para>
                    The number to test.
                </para>
            </param>
            <param name="confidence" type="int">
                <para>
            The number of chosen bases. The test has at least a
            1/4^confidence chance of falsely returning True.
                </para>
            </param>
            <returns>
            <para>
            	True if "this" is a strong pseudoprime to randomly chosen bases.
            </para>
            <para>
            	False if "this" is definitely NOT prime.
            </para>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.PrimeGeneratorBase.PostTrialDivisionTests(FM.LiveSwitch.BigInteger)">
            <summary>
            Performs primality tests on bi, assumes trial division has been done.
            </summary>
            <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
            <returns>False if bi is composite, true if it may be prime.</returns>
            <remarks>The speed of this method is dependent on Confidence</remarks>
        </member>
        <member name="T:FM.LiveSwitch.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.AddSameSign(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.Compare(FM.LiveSwitch.BigInteger,FM.LiveSwitch.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.SingleByteDivideInPlace(FM.LiveSwitch.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:FM.LiveSwitch.RsaKey">
            <summary>
            An RSA key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Size">
            <summary>
            Gets the size of the key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Modulus">
            <summary>
            Gets or sets the public value N.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.PublicExponent">
            <summary>
            Gets or sets the public value E.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.PrivateExponent">
            <summary>
            Gets or sets the private value D.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Prime1">
            <summary>
            Gets or sets the private value P.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Prime2">
            <summary>
            Gets or sets the private value Q.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Exponent1">
            <summary>
            Gets or sets the private value DP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Exponent2">
            <summary>
            Gets or sets the private value DQ.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Coefficient">
            <summary>
            Gets or sets the private value inverse-Q.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.HasPublic">
            <summary>
            Returns <c>true</c> if the key contains
            public information.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.HasPrivate">
            <summary>
            Returns <c>true</c> if the key contains
            private information.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.RsaKey.Type">
            <summary>
            Gets the key type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.GetBytes">
            <summary>
            Serializes this key to binary.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.ParseBytes(System.Byte[])">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="bytes">The bytes.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.RsaKey.ParseBuffer(FM.LiveSwitch.DataBuffer)">
            <summary>
            Deserializes a key from binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Serializable">
            <summary>
            Base definition for classes that allow serialization to/from JSON.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.IsSerialized">
            <summary>
            Gets or sets a value indicating whether this instance is serialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Serializable.Serialized">
            <summary>
            Gets or sets the serialized value of this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Serializable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Serializable"/> class.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ShortHolder">
            <summary>
            Class to hold a short value passed by reference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ShortHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ShortHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ShortHolder"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ShortHolder.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ShortHolder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sort">
            <summary>
            Encapsulates useful sorting utilities.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sort.QuickSort``1(System.Collections.Generic.List{``0},FM.LiveSwitch.Function2{``0,``0,FM.LiveSwitch.CompareResult})">
            <summary>
            Sorts an array using the in-place quick-sort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array of elements.</param>
            <param name="comparer">The function used to compare elements in the array -
            should return less than 0 if item 1 is less than item 2 (item 1 should appear
            before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
            than item 2 (item 1 should appear after item 2).</param>
        </member>
        <member name="T:FM.LiveSwitch.Splitter">
            <summary>
            Utility class for splitting strings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Splitter.Split(System.String,System.String)">
            <summary>
            Splits a string using a given delimiter.
            </summary>
            <param name="str">The string.</param>
            <param name="delimiter">The delimiter.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.StreamSocket">
            <summary>
            A stream socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.Secure">
            <summary>
            Gets a value indicating whether the socket is secure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.Server">
            <summary>
            Gets a value indicating whether the socket can accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemotePort">
            <summary>
            Gets or sets the remote port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemoteIPAddress">
            <summary>
            Gets or sets the remote IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.RemoteHostname">
            <summary>
            Gets or sets the remote hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.OnReceiveSuccess">
            <summary>
            Gets or sets a callback invoked on successful read from TCP stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocket.OnReceiveFailure">
            <summary>
            Gets or sets a callback invoked on failed read from TCP stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.ConnectAsync(System.String,System.String,System.Int32,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Connects the socket asynchronously.
            </summary>
            <param name="hostname">The remote hostname.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.SendAsync(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Sends data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.ReceiveAsync(System.Int32)">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="timeout">The timeout (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.AcceptAsync(FM.LiveSwitch.Action0,FM.LiveSwitch.Action1{System.Exception},FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket})">
            <summary>
            Accepts a new socket asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
            <param name="onSocket">The callback to invoke when a socket is ready.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the accept success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptFailure(FM.LiveSwitch.Action1{System.Exception},System.Exception)">
            <summary>
            Invokes the accept failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseAcceptSocket(FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket},FM.LiveSwitch.StreamSocket)">
            <summary>
            Invokes the accept success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseConnectSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the connect success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseConnectFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the connect failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseSendSuccess(FM.LiveSwitch.Action0)">
            <summary>
            Invokes the send success callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseSendFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the send failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseReceiveSuccess(FM.LiveSwitch.Action1{FM.LiveSwitch.DataBuffer},FM.LiveSwitch.DataBuffer)">
            <summary>
            Invokes the receive success callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocket.RaiseReceiveFailure(FM.LiveSwitch.Action2{System.Exception,System.Boolean},System.Exception,System.Boolean)">
            <summary>
            Invokes the receive failure callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="exception">The exception.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamSocketCreateArgs">
            <summary>
            Arguments for a stream socket create event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.Server">
            <summary>
            Gets or sets a value indicating whether the socket should accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.IPv6">
            <summary>
            Gets or sets a value indicating whether the socket should support IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.Secure">
            <summary>
            Gets or sets a value indicating whether the socket should be secured.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamSocketCreateArgs.StreamIndex">
            <summary>
            Gets or sets the stream index.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamSocketCreateArgs.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.StreamSocketCreateArgs" /> class.
            </summary>
            <param name="server">Whether the socket should accept incoming connections.</param>
            <param name="ipv6">Whether the socket should support IPv6.</param>
            <param name="secure">Whether the socket should be secured.</param>
        </member>
        <member name="T:FM.LiveSwitch.StringAssistant">
            <summary>
            Contains methods for string manipulation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="s">The s.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.SubArray(System.String[],System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StringAssistant.SubArray(System.String[],System.Int32,System.Int32)">
            <summary>
            Creates a subarray from an existing array.
            </summary>
            <param name="array">The source array.</param>
            <param name="offset">The offset into the source array.</param>
            <param name="count">The number of elements to copy into the subarray.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket">
            <summary>
            A TCP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Server">
            <summary>
            Gets a value indicating whether the socket can accept incoming connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Secure">
            <summary>
            Gets a value indicating whether the socket is secure.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemotePort">
            <summary>
            Gets the remote port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemoteIPAddress">
            <summary>
            Gets the remote IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.RemoteHostname">
            <summary>
            Gets the remote hostname.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TcpSocket" /> class.
            </summary>
            <param name="server">Whether the socket is going to accept new incoming connections.</param>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
            <param name="secure">Whether to send data securely using SSL.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.#ctor(System.Net.Sockets.Socket,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TcpSocket"/> class.
            </summary>
            <param name="socket">The existing socket.</param>
            <param name="server">Whether the socket is server-side.</param>
            <param name="secure">Whether the socket is secure.</param>
        </member>
        <member name="E:FM.LiveSwitch.TcpSocket.OnSocketCreated">
            <summary>
            Raised when a socket has been created and initialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptNoDelay">
            <summary>
            Attempt to set the Socket `NoDelay` property to disable Nagling. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptIPv4Dscp">
            <summary>
            Attempt to use DSCP for IPv4 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.AttemptIPv6Dscp">
            <summary>
            Attempt to use DSCP for IPv6 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ListenBacklog">
            <summary>
            Gets or sets the maximum length of the pending connections queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.AcceptAsync(FM.LiveSwitch.Action0,FM.LiveSwitch.Action1{System.Exception},FM.LiveSwitch.Action1{FM.LiveSwitch.StreamSocket})">
            <summary>
            Accepts a new socket asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
            <param name="onSocket">The callback to invoke when a socket is ready.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.DisableProxy">
            <summary>
            Gets or sets whether the system proxy should be disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ManualProxyHostname">
            <summary>
            Gets or sets the manual proxy hostname, which overrides system settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ManualProxyPort">
            <summary>
            Gets or sets the manual proxy proxy, which overrides system settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyUsername">
            <summary>
            Gets or sets the proxy username, if the proxy requires a username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyPassword">
            <summary>
            Gets or sets the proxy password, if the proxy requires a username.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyIPAddress">
            <summary>
            Gets or sets the proxy IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ProxyPort">
            <summary>
            Gets or sets the proxy port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.ConnectAsync(System.String,System.String,System.Int32,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Connects the socket asynchronously.
            </summary>
            <param name="hostname">The remote hostname.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.Certificate">
            <summary>
            Gets or sets the certificate to use to secure the socket.
            This is required for secure server sockets.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ServerEnabledSslProtocols">
            <summary>
            Gets or sets the server-side enabled SSL protocols.
            If <c>null</c>, the server socket will default to TLS 1.2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ClientEnabledSslProtocols">
            <summary>
            Gets or sets the client-side enabled SSL protocols.
            If <c>null</c>, the client socket will default to TLS 1.0, 1.1, and 1.2.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket.ServerSslAuthenticateDelegate">
            <summary>
            Authenticates an SSL stream as a server.
            </summary>
            <param name="sslStream">The SSL stream.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="enabledSslProtocols">The enabled SSL protocols.</param>
        </member>
        <member name="T:FM.LiveSwitch.TcpSocket.ClientSslAuthenticateDelegate">
            <summary>
            Authenticates an SSL stream as a client.
            </summary>
            <param name="sslStream">The SSL stream.</param>
            <param name="targetHost">The target host.</param>
            <param name="enabledSslProtocols">The enabled SSL protocols.</param>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ServerSslAuthenticate">
            <summary>
            Gets or sets the function to authenticate the stream as a server.
            Defaults to using SslStream.AuthenticateAsServer without requiring a client certificate or checking certificate revocation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TcpSocket.ClientSslAuthenticate">
            <summary>
            Gets or sets the function to authenticate the stream as a client.
            Defaults to using SslStream.AuthenticateAsClient without client certificates or checking certificate revocation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Send(FM.LiveSwitch.DataBuffer)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.SendAsync(FM.LiveSwitch.DataBuffer,System.Int32,FM.LiveSwitch.Action0,FM.LiveSwitch.Action2{System.Exception,System.Boolean})">
            <summary>
            Sends data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="timeout">The timeout (in ms).</param>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.ReceiveAsync(System.Int32)">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="timeout">The timeout (in ms).</param>
        </member>
        <member name="M:FM.LiveSwitch.TcpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TextLogProvider">
            <summary>
            Simple log provider that writes to a local string builder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TextLogProvider.Text">
            <summary>
            Gets the logged text.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TextLogProvider.Callback">
            <summary>
            Gets or sets a callback to invoke
            whenever text is written to the log.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TextLogProvider"/> class using <see cref="F:FM.LiveSwitch.LogLevel.Info"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.#ctor(FM.LiveSwitch.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TextLogProvider"/> class.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.Clear">
            <summary>
            Clears all text from the log
            and returns the former contents.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TextLogProvider.DoLog(FM.LiveSwitch.LogEvent)">
            <summary>
            Logs a message at the specified log level.
            </summary>
            <param name="logEvent">The log event details.</param>
        </member>
        <member name="T:FM.LiveSwitch.TimeoutTimer">
            <summary>
            A thread-safe class for running timeouts on asynchronous methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.#ctor(FM.LiveSwitch.Action1{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TimeoutTimer"/> class.
            </summary>
            <param name="callback">The callback to invoke if the timeout occurs.</param>
            <param name="state">The state to pass into the callback if the timeout occurs.</param>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.Start(System.Int32)">
            <summary>
            Starts the timer.
            </summary>
            <param name="timeout">The timeout length, in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.TimeoutTimer.Stop">
            <summary>
            Stops the timer, notifying the calling code if the timeout has already elapsed.
            </summary>
            <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
            if the timeout elapsed and the timeout callback has been invoked.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TransportAddress">
            <summary>
            An IP address and port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportAddress.AddressType">
            <summary>
            Gets the address type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportAddress"/> class.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPAddress(System.String)">
            <summary>
            Determines whether a string is a valid IPv4 or IPv6 address
            </summary>
            <param name="address">The address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.SanitizeIPAddress(System.String)">
            <summary>
            Sanitizes the IP address, removing any local information.
            </summary>
            <param name="ipAddress">The IP address to sanitize.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.CheckMask(System.String,System.String,System.String)">
            <summary>
            Compares two addresses to see if they are on
            the same subnet.
            </summary>
            <param name="address1">The first address.</param>
            <param name="address2">The second address.</param>
            <param name="mask">The subnet mask.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.MaskFromPrefixLength(System.Int32)">
            <summary>
            Gets a subnet mask from a prefix length (0-32).
            </summary>
            <param name="prefixLength">The prefix length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPv4(System.String)">
            <summary>
            Determines whether the specified IP address is IPv4.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <returns>
              <c>true</c> if the specified IP address is IPv4; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsIPv6(System.String)">
            <summary>
            Determines whether the specified IP address is IPv6.
            </summary>
            <param name="ipAddress">The IP address.</param>
            <returns>
              <c>true</c> if the specified IP address is IPv6; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsPrivate(System.String)">
            <summary>
            Determines whether the specified IP address is private.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsReserved(System.String)">
            <summary>
            Determines whether the specified IP address is reserved.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsLinkLocal(System.String)">
            <summary>
            Determines whether the specified IP address is link-local.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsLoopback(System.String)">
            <summary>
            Determines whether the specified IP address is loopback.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.TransportAddress.IsAny(System.String)">
            <summary>
            Determines whether the specified IP address is all zeros
            and represents "any" IP address.
            </summary>
            <param name="ipAddress">The IP address.</param>
        </member>
        <member name="T:FM.LiveSwitch.UdpSocket">
            <summary>
            A UDP socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DefaultReceiveBufferSize">
            <summary>
            Gets or sets the default socket receive buffer size.
            Defaults to 65536. A negative value indicates that
            the receive buffer size will not be set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DefaultSendBufferSize">
            <summary>
            Gets or sets the default socket receive buffer size.
            Defaults to 65536. A negative value indicates that
            the receive buffer size will not be set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.ReceiveBufferSize">
            <summary>
            Gets the current receive buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.SendBufferSize">
            <summary>
            Gets the current send buffer size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.MaxQueuedPackets">
            <summary>
            Gets or sets the maximum number of packets
            that can be queued at any given point in time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.Socket">
            <summary>
            Gets the underlying socket.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.IPv6">
            <summary>
            Gets a value indicating whether the socket supports IPv6.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.LocalPort">
            <summary>
            Gets the local port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.LocalIPAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.DisableSocketIOControl">
            <summary>
            Gets or sets whether Socket.IOControl should be disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UdpSocket"/> class.
            </summary>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UdpSocket"/> class.
            </summary>
            <param name="ipv6">Whether an IPv6 socket should be created.</param>
            <param name="sendBufferSize">The desired send buffer size.</param>
            <param name="receiveBufferSize">The desired receive buffer size.</param>
        </member>
        <member name="E:FM.LiveSwitch.UdpSocket.OnSocketCreated">
            <summary>
            Raised when a socket has been created and initialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.AttemptIPv4Dscp">
            <summary>
            Attempt to use DSCP for IPv4 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UdpSocket.AttemptIPv6Dscp">
            <summary>
            Attempt to use DSCP for IPv6 when possible. Default is false. You must "opt-in".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Bind(System.String,System.Int32,System.Boolean@)">
            <summary>
            Binds the socket to a local endpoint.
            </summary>
            <param name="ipAddress">The local IP address.</param>
            <param name="port">The local port.</param>
            <param name="addressInUse">Indicates that access to the address is forbidden or in use.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Send(FM.LiveSwitch.DataBuffer,System.String,System.Int32)">
            <summary>
            Sends data synchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="ipAddress">The remote IP address.</param>
            <param name="port">The remote port.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.ReceiveAsync(FM.LiveSwitch.Action3{FM.LiveSwitch.DataBuffer,System.String,System.Int32},FM.LiveSwitch.Action1{System.Exception})">
            <summary>
            Receives data asynchronously.
            </summary>
            <param name="onSuccess">The callback to invoke on success.</param>
            <param name="onFailure">The callback to invoke on failure.</param>
        </member>
        <member name="M:FM.LiveSwitch.UdpSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Unhandled">
            <summary>
            Throws exceptions on a separate thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Unhandled.LogException(System.Exception,System.String)">
            <summary>
            Logs an unhandled exception.
            </summary>
            <param name="ex">The exception to throw.</param>
            <param name="source">The source of the exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.UnhandledExceptionArgs">
            <summary>
            Arguments for an unhandled exception.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnhandledExceptionArgs.Handled">
            <summary>
            Gets or sets whether the exception has been
            appropriately handled. If set to <c>true</c>,
            then the exception will not be thrown.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.UnhandledExceptionArgs.Exception">
            <summary>
            Gets the unhandled exception.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.UnhandledExceptionArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.UnhandledExceptionArgs" /> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.Utf8">
            <summary>
            UTF-8 encoding/decoding utility.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Encode(System.String)">
            <summary>
            Encodes a string to a UTF-8 byte array.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.GetByteCount(System.String)">
            <summary>
            Gets the number of bytes that would be returned by
            a call to encode.
            </summary>
            <param name="input">The input string.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(System.Byte[])">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a UTF-8 byte array to a string.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="index">The index to start reading.</param>
            <param name="length">The length.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utf8.Decode(FM.LiveSwitch.DataBuffer)">
            <summary>
            Decodes a UTF-8 data buffer to a string.
            </summary>
            <param name="buffer">The input byte array.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.WebSocketBase">
            <summary>
            WebSocket base properties/methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseOpenSuccess(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Raises the open success callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseOpenFailure(FM.LiveSwitch.WebSocketOpenArgs,FM.LiveSwitch.WebSocketStatusCode,System.Exception)">
            <summary>
            Raises the open failure callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseStreamFailure(FM.LiveSwitch.WebSocketOpenArgs,FM.LiveSwitch.WebSocketStatusCode,System.Exception)">
            <summary>
            Raises the stream failure callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseReceive(FM.LiveSwitch.WebSocketOpenArgs,System.String,System.Byte[])">
            <summary>
            Raises the receive callback.
            </summary>
            <param name="openArgs">The open arguments.</param>
            <param name="textMessage">The text message.</param>
            <param name="binaryMessage">The binary message.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketBase.RaiseCloseComplete(FM.LiveSwitch.WebSocketCloseArgs,FM.LiveSwitch.WebSocketStatusCode,System.String)">
            <summary>
            Raises the close complete callback.
            </summary>
            <param name="closeArgs">The close arguments.</param>
            <param name="statusCode">The status code.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketSendState">
            <summary>
            A wrapper for a WebSocket send request to support queueing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendState.SendArgs">
            <summary>
            Gets or sets the arguments passed to the Send method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendState.RequestBytes">
            <summary>
            Gets or sets request frame, in bytes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.IWebSocket">
            <summary>
            Contract for an implementation of the WebSocket protocol v8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.BufferedAmount">
            <summary>
            Gets the number of bytes buffered in the send queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.IsOpen">
            <summary>
            Gets a value indicating whether the WebSocket is connected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.IWebSocket.Secure">
            <summary>
            Gets a value indicating whether the WebSocket is secure.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Open(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Opens the WebSocket connection.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Send(FM.LiveSwitch.WebSocketSendArgs)">
            <summary>
            Sends a message to the WebSocket server.
            </summary>
            <param name="sendArgs">The send arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Close">
            <summary>
            Closes the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.IWebSocket.Close(FM.LiveSwitch.WebSocketCloseArgs)">
            <summary>
            Closes the WebSocket connection.
            </summary>
            <param name="closeArgs">The close arguments</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocket">
            <summary>
            Implementation of the WebSocket protocol v8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Exists">
            <summary>
            Gets a value indicating whether WebSocket support exists on this platform.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Protocol">
            <summary>
            Gets the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.BufferedAmount">
            <summary>
            Gets the number of bytes buffered in the send queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.IsOpen">
            <summary>
            Gets a value indicating whether the WebSocket is connected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocket.Secure">
            <summary>
            Gets a value indicating whether the WebSocket is secure.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocket"/>.
            </summary>
            <param name="requestUrl">The target URL for the WebSocket connection.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocket"/>.
            </summary>
            <param name="requestUrl">The target URL for the WebSocket connection.</param>
            <param name="protocol">The WebSocket protocol.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Open(FM.LiveSwitch.WebSocketOpenArgs)">
            <summary>
            Opens the WebSocket connection.
            </summary>
            <param name="openArgs">The open arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Send(FM.LiveSwitch.WebSocketSendArgs)">
            <summary>
            Sends a message to the WebSocket server.
            </summary>
            <param name="sendArgs">The send arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Close">
            <summary>
            Closes the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocket.Close(FM.LiveSwitch.WebSocketCloseArgs)">
            <summary>
            Closes the WebSocket connection.
            </summary>
            <param name="closeArgs">The close arguments</param>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketCloseArgs">
            <summary>
            Close arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.OnComplete">
            <summary>
            Gets or sets the callback to execute when the connection is closed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.StatusCode">
            <summary>
            Gets or sets the status code to send with the close frame.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseArgs.Reason">
            <summary>
            Gets or sets the reason to send with the close frame.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketCloseArgs.#ctor">
            <summary>
            Creates a new instance of <see cref="T:FM.LiveSwitch.WebSocketCloseArgs" />
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketCloseCompleteArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketCloseArgs.OnComplete"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.CloseArgs">
            <summary>
            Gets or sets the original arguments passed to the close method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the close operation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketCloseCompleteArgs.Reason">
            <summary>
            Gets or sets the reason given for closing the connection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketMockRequest">
            <summary>
            A mock response object for the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.RequestUri">
            <summary>
            When overridden in a descendant class, gets the URI of the Internet resource associated with the request.
            </summary>
            <returns>
            A <see cref="T:System.Uri"/> representing the resource associated with the request
              </returns>
              
            <exception cref="T:System.NotImplementedException">
            Any attempt is made to get or set the property, when the property is not overridden in a descendant class.
              </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.Headers">
            <summary>
            When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.
            </summary>
            <returns>A <see cref="T:System.Net.WebHeaderCollection"/> containing the header name/value pairs associated with this request.</returns>
              
            <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.ContentType">
            <summary>
            When overridden in a descendant class, gets or sets the content type of the request data being sent.
            </summary>
            <returns>The content type of the request data.</returns>
              
            <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockRequest.Method">
            <summary>
            When overridden in a descendant class, gets or sets the protocol method to use in this request.
            </summary>
            <returns>The protocol method to use in this request.</returns>
              
            <exception cref="T:System.NotImplementedException">If the property is not overridden in a descendant class, any attempt is made to get or set the property. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.Abort">
            <summary>
            Aborts the Request.
            </summary>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            When overridden in a descendant class, provides an asynchronous method to request a stream.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            When overridden in a descendant class, begins an asynchronous request for an Internet resource.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that references the asynchronous request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            When overridden in a descendant class, returns a <see cref="T:System.IO.Stream"/> for writing data to the Internet resource.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references a pending request for a stream.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> to write data to.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references a pending request for a response.</param>
            <returns>
            A <see cref="T:System.Net.WebResponse"/> that contains a response to the Internet request.
            </returns>
            <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketMockResponse">
            <summary>
            A mock response object for the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.Headers">
            <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
            </summary>
            <returns>An instance of the <see cref="T:System.Net.WebHeaderCollection"/> class that contains header values associated with this response.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
              </PermissionSet>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ContentType">
            <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
            </summary>
            <returns>A string that contains the content type of the response.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ContentLength">
            <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
            </summary>
            <returns>The number of bytes returned from the Internet resource.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.StatusCode">
            <summary>
            Gets or set the status code of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketMockResponse.ResponseUri">
            <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
            </summary>
            <returns>An instance of the <see cref="T:System.Uri"/> class that contains the URI of the Internet resource that actually responded to the request.</returns>
              
            <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockResponse.GetResponseStream">
            <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
            </summary>
            <returns>
            An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.
            </returns>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketMockResponse.Close">
            <summary>
            When overridden by a descendant class, closes the response stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenArgs">
            <summary>
            Open arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.Headers">
            <summary>
            Gets or sets headers to send with the handshake request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke when a successful connection has been established.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke when a connection could not be established.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke when a successful connection breaks down.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke before the handshake request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke after the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.OnReceive">
            <summary>
            Gets or sets the callback to invoke when a message is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the handshake (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenArgs.Sender">
            <summary>
            Gets or sets the sender of the request.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketOpenArgs.#ctor">
            <summary>
            Creates a new instance of 
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenFailureArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnFailure"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.Exception">
            <summary>
            Gets or sets the exception generated while connecting.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenFailureArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the failure to connect.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketOpenSuccessArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnSuccess"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketOpenSuccessArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnReceive"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.TextMessage">
            <summary>
            Gets or sets the message received from the server as text data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.BinaryMessage">
            <summary>
            Gets or sets the message received from the server as binary data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketReceiveArgs.IsText">
            <summary>
            Gets whether or not the received message is text.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketRequest">
            <summary>
            Defines a transfer request for <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketRequest.Args">
            <summary>
            Gets or sets the request arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketRequest.Callback">
            <summary>
            Gets or sets the callback to execute when the request completes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketSendArgs">
            <summary>
            Send arguments for the <see cref="T:FM.LiveSwitch.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.TextMessage">
            <summary>
            Gets or sets the message to send as text data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.BinaryMessage">
            <summary>
            Gets or sets the message to send as binary data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.Timeout">
            <summary>
            Gets or sets the timeout for the request (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketSendArgs.IsText">
            <summary>
            Gets whether or not the message should be sent as text.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketSendArgs.#ctor">
            <summary>
            Creates a new <see cref="T:FM.LiveSwitch.WebSocketSendArgs"/> instance.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketStatusCode">
            <summary>
            An enumeration of potential WebSocket status codes.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.Normal">
            <summary>
            Indicates normal closure, meaning that the purpose for which
            the connection was established has been fulfilled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.GoingAway">
            <summary>
            Indicates that an endpoint is "going away", such as a server
            going down or a browser having navigated away from a page.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.ProtocolError">
            <summary>
            Indicates that an endpoint is terminating the connection
            due to a protocol error.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.InvalidType">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a type of data that it cannot accept.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.NoStatus">
            <summary>
            Indicates that no status code was present in the Close frame.
            Reserved for use outside Close frames.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.Abnormal">
            <summary>
            Indicates that the connection was closed abnormally, without
            sending a Close frame. Reserved for use outside Close frames.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.InvalidData">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received data within a message that was not
            consistent with the type of message.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.PolicyViolation">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a message that violates its policy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.MessageTooLarge">
            <summary>
            Indicates that an endpoint is terminating the connection
            because it has received a message that is too big for it
            to process.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.UnsupportedExtension">
            <summary>
            Indicates that the client is terminating the connection
            because it has expected the server to negotiate one or
            more extensions, but the server didn't return them in the
            response message of the WebSocket handshake.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.UnexpectedCondition">
            <summary>
            Indicates that the server is terminating the connection
            because it encountered an unexpected condition that
            prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.WebSocketStatusCode.SecureHandshakeFailure">
            <summary>
            Indicates that the connection was closed due to a failure
            to perform a TLS handshake. Reserved for use outside Close
            frames.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketStreamFailureArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.WebSocketOpenArgs.OnStreamFailure"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.OpenArgs">
            <summary>
            Gets or sets the original arguments passed to the open method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.Exception">
            <summary>
            Gets or sets the exception generated by the active connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketStreamFailureArgs.StatusCode">
            <summary>
            Gets or sets the status code associated with the stream failure.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketTransfer">
            <summary>
            Base class that defines methods for transferring content over the WebSocket protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the initial handshake (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream (in ms).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.Sender">
            <summary>
            Gets or sets the sender of the messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke when the handshake request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke when the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnOpenSuccess">
            <summary>
            Gets or sets the callback to invoke if the handshake succeeds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnOpenFailure">
            <summary>
            Gets or sets the callback to invoke if the handshake fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransfer.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke if the stream errors out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.WebSocketTransfer"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the socket.
            </summary>
            <param name="headers">The headers to pass in with the initial handshake.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.WebSocketTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebSocketTransferFactory.CreateWebSocketTransfer">
            <summary>
            Gets or sets the callback that creates a WebSocket-based transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketTransferFactory.GetWebSocketTransfer(System.String)">
            <summary>
            Gets an instance of the WebSocket-based transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.WebSocketWebRequestTransfer">
            <summary>
            Defines methods for transferring messages using the WebSocket protocol.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:FM.LiveSwitch.WebSocketWebRequestTransfer"/>.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the WebSocket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Send(FM.LiveSwitch.HttpRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.SendAsync(FM.LiveSwitch.HttpRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.HttpResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebSocketWebRequestTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X501.Attribute">
            <summary>
            An X.501 attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Attribute.AttributeType">
            <summary>
            Gets or sets the type of the attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Attribute.AttributeValue">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Attribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Attribute"/> class.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.AttributeValueAsDirectoryString">
            <summary>
            Gets the attribute value as a directory string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.AttributeValueAsString">
            <summary>
            Gets the attribute value as a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.ToAsn1">
            <summary>
            Converts this attribute to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Attribute.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an attribute from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.AttributeType">
            <summary>
            X.501 attribute types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.ObjectClass">
            <summary>
            Gets the object class attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.AliasedObjectName">
            <summary>
            Gets the aliased object name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.KnowledgeInformation">
            <summary>
            Gets the knowledge information attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.CommonName">
            <summary>
            Gets the common name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Surname">
            <summary>
            Gets the surname attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.SerialNumber">
            <summary>
            Gets the serial number attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.CountryName">
            <summary>
            Gets the country name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.LocalityName">
            <summary>
            Gets the locality name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.StateOrProvinceName">
            <summary>
            Gets the state or province name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.StreetAddress">
            <summary>
            Gets the street address attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.OrganizationName">
            <summary>
            Gets the organization name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.OrganizationUnitName">
            <summary>
            Gets the organization unit name attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Title">
            <summary>
            Gets the title attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.AttributeType.Description">
            <summary>
            Gets the description attribute type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.AttributeType.AreEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks if two types are equal.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="T:FM.LiveSwitch.X501.DirectoryString">
            <summary>
            An X.501 directory string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.DirectoryString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.DirectoryString"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.DirectoryString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Utf8">
            <summary>
            Converts this directory string to an ASN.1 UTF-8 string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Printable">
            <summary>
            Converts this directory string to an ASN.1 printable string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Bmp">
            <summary>
            Converts this directory string to an ASN.1 BMP string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.ToAsn1Universal">
            <summary>
            Converts this directory string to an ASN.1 universal string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.DirectoryString.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a directory string from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.Name">
            <summary>
            An X.501 name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.Name.RdnSequence">
            <summary>
            Gets or sets the relative distinguished name sequence.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Name"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.#ctor(FM.LiveSwitch.X501.RelativeDistinguishedName[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.Name"/> class.
            </summary>
            <param name="rdnSequence">The relative distinguished name sequence.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.GetAttribute(System.Int64[])">
            <summary>
            Gets an attribute from the relative distinguished name sequence by type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.ToAsn1">
            <summary>
            Converts this name to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.Name.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a name from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X501.RelativeDistinguishedName">
            <summary>
            An X.501 relative distinguished name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X501.RelativeDistinguishedName.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.RelativeDistinguishedName"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.#ctor(FM.LiveSwitch.X501.Attribute[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X501.RelativeDistinguishedName"/> class.
            </summary>
            <param name="attributeTypeAndValues">The attribute type and values.</param>
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.GetAttribute(System.Int64[])">
            <summary>
            Gets an attribute by type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.ToAsn1">
            <summary>
            Converts this relative distinguished name to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X501.RelativeDistinguishedName.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a relative distinguished name from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECFieldId">
            <summary>
            X.509 EC field ID.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.ECCurve">
            <summary>
            X.509 EC curve.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.ECNamedCurve">
            <summary>
            X.509 EC named curve identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP192R1">
            <summary>
            Gets the SecP192R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT163K1">
            <summary>
            Gets the SecT163K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT163R2">
            <summary>
            Gets the SecT163R2 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP224R1">
            <summary>
            Gets the SecP224R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT233K1">
            <summary>
            Gets the SecT233K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT233R1">
            <summary>
            Gets the SecT233R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP256R1">
            <summary>
            Gets the SecP256R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT283K1">
            <summary>
            Gets the SecT283K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT283R1">
            <summary>
            Gets the SecT283R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP384R1">
            <summary>
            Gets the SecP384R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT409K1">
            <summary>
            Gets the SecT409K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT409R1">
            <summary>
            Gets the SecT409R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecP521R1">
            <summary>
            Gets the SecP521R1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT571K1">
            <summary>
            Gets the SecT571K1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECNamedCurve.SecT571R1">
            <summary>
            Gets the SecT571R1 identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.AlgorithmIdentifier">
            <summary>
            An X.509 signature algorithm.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.GetRsa">
            <summary>
            Gets the RSA encryption identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.GetEcdsa(FM.LiveSwitch.X509.ECParameters)">
            <summary>
            Gets the ECDSA identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Md2WithRsaEncryption">
            <summary>
            Gets the MD2 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Md5WithRsaEncryption">
            <summary>
            Gets the MD5 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha1WithRsaEncryption">
            <summary>
            Gets the SHA-1 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha256WithRsaEncryption">
            <summary>
            Gets the SHA-256 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha384WithRsaEncryption">
            <summary>
            Gets the SHA-384 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Sha512WithRsaEncryption">
            <summary>
            Gets the SHA-512 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha1">
            <summary>
            Gets the DSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha224">
            <summary>
            Gets the DSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.DsaWithSha256">
            <summary>
            Gets the DSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha224">
            <summary>
            Gets the ECDSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha256">
            <summary>
            Gets the ECDSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha384">
            <summary>
            Gets the ECDSA with SHA-384 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.EcdsaWithSha512">
            <summary>
            Gets the ECDSA with SHA-512 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.AlgorithmIdentifier.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.AlgorithmIdentifier"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.AlgorithmsAreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same algorithm.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.ParametersAreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same parameters.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.AreEqual(FM.LiveSwitch.X509.AlgorithmIdentifier,FM.LiveSwitch.X509.AlgorithmIdentifier)">
            <summary>
            Checks whether two algorithm identifiers have the same algorithm and parameters.
            </summary>
            <param name="ai1">The first algorithm identifier.</param>
            <param name="ai2">The second algorithm identifier.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.ToAsn1">
            <summary>
            Converts this algorithm identifier to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.AlgorithmIdentifier.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an algorithm identifier from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Certificate">
            <summary>
            An X.509 certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.TbsCertificate">
            <summary>
            Gets or sets the to-be-signed certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.SignatureAlgorithm">
            <summary>
            Gets or sets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Certificate.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Certificate.ToAsn1">
            <summary>
            Converts this certificate to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Certificate.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a certificate from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECParameters">
            <summary>
            An X.509 EC parameter set.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.NamedCurve">
            <summary>
            Gets or sets the named curve identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.FieldId">
            <summary>
            Gets or sets the field identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Curve">
            <summary>
            Gets or sets the curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.BasePoint">
            <summary>
            Gets or sets the base point on the curve.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Order">
            <summary>
            Gets or sets the order N of the base point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECParameters.Cofactor">
            <summary>
            Gets or sets the cofactor.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
            <param name="namedCurve">The named curve.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.#ctor(FM.LiveSwitch.X509.ECFieldId,FM.LiveSwitch.X509.ECCurve,FM.LiveSwitch.X509.ECPoint,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECParameters"/> class.
            </summary>
            <param name="fieldId">The field ID.</param>
            <param name="curve">The curve.</param>
            <param name="basePoint">The base point on the curve.</param>
            <param name="order">The order N of the base point.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.ToAsn1">
            <summary>
            Converts this RSA private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECParameters.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECPoint">
            <summary>
            An X.509 EC public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPoint.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPoint"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPoint"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.ToAsn1">
            <summary>
            Converts this EC point to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPoint.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC point from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.DsaSignature">
            <summary>
            An X.509 ECDSA/DSA signature.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.DsaSignature.R">
            <summary>
            Gets or sets the R value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.DsaSignature.S">
            <summary>
            Gets or sets the S value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.DsaSignature.ToAsn1">
            <summary>
            Converts this EC private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.DsaSignature.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Extension">
            <summary>
            An X.509 extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.ExtensionId">
            <summary>
            Gets or sets the extension identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.Critical">
            <summary>
            Gets or sets a value indicating whether this extension is critical.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extension.ExtensionValue">
            <summary>
            Gets or sets the extension value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor(System.Int64[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
            <param name="extensionId">The extension identifier.</param>
            <param name="extensionValue">The extension value.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.#ctor(System.Int64[],System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extension"/> class.
            </summary>
            <param name="extensionId">The extension identifier.</param>
            <param name="extensionValue">The extension value.</param>
            <param name="critical">if set to <c>true</c> [critical].</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.ToAsn1">
            <summary>
            Converts this extension to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Extension.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an extension from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Extensions">
            <summary>
            An X.509 extensions array.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Extensions.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extensions" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.#ctor(FM.LiveSwitch.X509.Extension[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Extensions"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.ToAsn1">
            <summary>
            Converts this extensions array to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Extensions.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an extensions array from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.ECPrivateKey">
            <summary>
            An X.509 EC private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.ECPrivateKey.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPrivateKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.#ctor(System.Byte[],FM.LiveSwitch.X509.ECParameters,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.ECPrivateKey"/> class.
            </summary>
            <param name="privateKey">The private key.</param>
            <param name="parameters">The parameters.</param>
            <param name="publicKey">The public key.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.ToAsn1">
            <summary>
            Converts this EC private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.ECPrivateKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an EC private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PrivateKeyInfo">
            <summary>
            An X.509 private key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.PrivateKeyAlgorithm">
            <summary>
            Gets or sets the private key algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PrivateKeyInfo.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.PrivateKeyInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.ToAsn1">
            <summary>
            Converts this private key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.PrivateKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a private key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PublicKeyInfo">
            <summary>
            An X.509 public key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyInfo.Algorithm">
            <summary>
            Gets or sets the public key algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyInfo.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.PublicKeyInfo.ToAsn1">
            <summary>
            Converts this private key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.PublicKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a private key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.PublicKeyAlgorithm">
            <summary>
            X.509 public key algorithm identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyAlgorithm.RsaEncryption">
            <summary>
            Gets the RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.PublicKeyAlgorithm.EcPublicKey">
            <summary>
            Gets the EC public key identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.RsaPrivateKey">
            <summary>
            An X.509 RSA private key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Modulus">
            <summary>
            Gets or sets the modulus (n).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.PublicExponent">
            <summary>
            Gets or sets the public exponent (e).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.PrivateExponent">
            <summary>
            Gets or sets the private exponent (d).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Prime1">
            <summary>
            Gets or sets the first prime value (p).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Prime2">
            <summary>
            Gets or sets the second prime value (q).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Exponent1">
            <summary>
            Gets or sets the first exponent value (dp).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Exponent2">
            <summary>
            Gets or sets the second exponent value (dq).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPrivateKey.Coefficient">
            <summary>
            Gets or sets the coefficient (inverse-q).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPrivateKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPrivateKey"/> class.
            </summary>
            <param name="modulus">The modulus (n).</param>
            <param name="publicExponent">The public exponent (e).</param>
            <param name="privateExponent">The private exponent (d).</param>
            <param name="prime1">The first prime value (p).</param>
            <param name="prime2">The second prime value (q).</param>
            <param name="exponent1">The first exponent value (dp).</param>
            <param name="exponent2">The second exponent value (dq).</param>
            <param name="coefficient">The coefficient (inverse-q).</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.ToAsn1">
            <summary>
            Converts this RSA private key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPrivateKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA private key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.RsaPublicKey">
            <summary>
            An X.509 RSA public key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPublicKey.Modulus">
            <summary>
            Gets or sets the modulus (n).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.RsaPublicKey.Exponent">
            <summary>
            Gets or sets the public exponent (e).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPublicKey"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.RsaPublicKey"/> class.
            </summary>
            <param name="modulus">The modulus (n).</param>
            <param name="exponent">The exponent (e).</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.ToAsn1">
            <summary>
            Converts this RSA public key to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.RsaPublicKey.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses an RSA public key from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.SignatureAlgorithm">
            <summary>
            X.509 signature algorithm identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Md2WithRsaEncryption">
            <summary>
            Gets the MD2 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Md5WithRsaEncryption">
            <summary>
            Gets the MD5 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha1WithRsaEncryption">
            <summary>
            Gets the SHA-1 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha256WithRsaEncryption">
            <summary>
            Gets the SHA-256 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha384WithRsaEncryption">
            <summary>
            Gets the SHA-384 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.Sha512WithRsaEncryption">
            <summary>
            Gets the SHA-512 with RSA encryption identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha1">
            <summary>
            Gets the DSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha224">
            <summary>
            Gets the DSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.DsaWithSha256">
            <summary>
            Gets the DSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha1">
            <summary>
            Gets the ECDSA with SHA-1 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha224">
            <summary>
            Gets the ECDSA with SHA-224 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha256">
            <summary>
            Gets the ECDSA with SHA-256 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha384">
            <summary>
            Gets the ECDSA with SHA-384 identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SignatureAlgorithm.EcdsaWithSha512">
            <summary>
            Gets the ECDSA with SHA-512 identifier.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.SubjectPublicKeyInfo">
            <summary>
            An X.509 subject public key info.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SubjectPublicKeyInfo.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.SubjectPublicKeyInfo.SubjectPublicKey">
            <summary>
            Gets or sets the subject public key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.SubjectPublicKeyInfo.ToAsn1">
            <summary>
            Converts this subject public key info to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.SubjectPublicKeyInfo.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a subject public key info from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.TbsCertificate">
            <summary>
            An X.509 to-be-signed certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version1">
            <summary>
            Gets the value indicating version 1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version2">
            <summary>
            Gets the value indicating version 2.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version3">
            <summary>
            Gets the value indicating version 3.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.MissingVersion">
            <summary>
            Gets a value indicating whether the version field was missing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SignatureAlgorithm">
            <summary>
            Gets or sets the signature algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Issuer">
            <summary>
            Gets or sets the issuer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Validity">
            <summary>
            Gets or sets the validity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SubjectPublicKeyInfo">
            <summary>
            Gets or sets the subject public key information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.IssuerUniqueId">
            <summary>
            Gets or sets the issuer unique identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SubjectUniqueId">
            <summary>
            Gets or sets the subject unique identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.TbsCertificate.SourceAsn">
            <summary>
            Gets the source ASN.1 element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.TbsCertificate.ToAsn1">
            <summary>
            Converts this to-be-signed certificate to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.TbsCertificate.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a to-be-signed certificate from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.Time">
            <summary>
            An X.509 time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Time.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Time.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Time"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.#ctor(System.DateTime,FM.LiveSwitch.X509.TimeType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Time"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.ToAsn1">
            <summary>
            Converts this time to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Time.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a time from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.X509.TimeType">
            <summary>
            An X.509 time type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.X509.TimeType.Utc">
            <summary>
            Indicates UTC time.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.X509.TimeType.Generalized">
            <summary>
            Indicates generalized time.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.X509.Validity">
            <summary>
            An X.509 validity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Validity.NotBefore">
            <summary>
            Gets or sets the not-before time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.X509.Validity.NotAfter">
            <summary>
            Gets or sets the not-after time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Validity" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.#ctor(FM.LiveSwitch.X509.Time,FM.LiveSwitch.X509.Time)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.X509.Validity"/> class.
            </summary>
            <param name="notBefore">The not-before time.</param>
            <param name="notAfter">The not-after time.</param>
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.ToAsn1">
            <summary>
            Converts this validity to an ASN.1 element.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.X509.Validity.FromAsn1(FM.LiveSwitch.Asn1.Any)">
            <summary>
            Parses a validity from an ASN.1 element.
            </summary>
            <param name="any">The ASN.1 element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.ChannelConfig">
            <summary>
            Channel configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelConfig.Recording">
            <summary>
            Gets or sets recording to be enabled or disabled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.ToJson(FM.LiveSwitch.ChannelConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientConfig">The client config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ClientConfig">
            <summary>
            Client configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.UserAlias">
            <summary>
            Gets or sets the User Alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.DeviceAlias">
            <summary>
            Gets or sets the Device Alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.Tag">
            <summary>
            Gets or sets the Tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientConfig.Roles">
            <summary>
            Gets or sets the Roles.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.ToJson(FM.LiveSwitch.ClientConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientConfig">The client config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionConfig">
            <summary>
            Connection configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalAudioMuted">
            <summary>
            Gets or sets if the local audio is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.LocalVideoMuted">
            <summary>
            Gets or sets if the local video is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.AudioDirection">
            <summary>
            Gets or sets the audio direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.VideoDirection">
            <summary>
            Gets or sets the video direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.DataDirection">
            <summary>
            Gets or sets the data direction ("sendrecv", "sendonly", "recvonly", or "inactive").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.Tag">
            <summary>
            Gets or sets the tag for this connection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteAudioEncoding">
            <summary>
            Gets or sets the remote audio encoding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionConfig.RemoteVideoEncoding">
            <summary>
            Gets or sets the remote video encoding.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.#ctor">
            <summary>
            Create an instance of a ConnectionConfig.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.ToJson(FM.LiveSwitch.ConnectionConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="connectionConfig">The connection config to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="connectionConfigJson">The JSON to deserialize.</param>
            <returns>
            The deserialized connection config.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.BinaryParser">
            <summary>
            Base implementation of a binary parser for data received over a socket connection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.BinaryParser.AddBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds new bytes received from the remote endpoint.
            </summary>
            <param name="buffer">The buffer containing the received bytes.</param>
            <param name="offset">The offset into the buffer where we should start looking for new bytes.</param>
            <param name="count">The number of bytes to read from the buffer.</param>
            <returns><c>true</c> if the message is complete; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CallbackPollingExtensions">
            <summary>
            Defines configuration and helper methods for callback polling (JSONP).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingExtensions.GetHeaders(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retrieves a set of headers from the request and additionally
            from the "headers" value of the query string.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingExtensions.GetHttpMethod(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Retrieves the HTTP method from the request.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingExtensions.RequiresCallbackPolling(Microsoft.AspNetCore.Http.HttpContext,System.String@)">
            <summary>
            Determines whether or not the response should be wrapped in a JSONP callback.
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="callbackName">The name of the callback wrapper.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders">
            <summary>
            A header collection with helper methods
            for serializing to JSON-P.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.Keys">
            <summary>
            Gets the names of the headers in the collection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.Item(System.String)">
            <summary>
            Gets or sets the header with the specified name.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders"/> class.
            </summary>
            <param name="headers">The initial header collection.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.ToJson">
            <summary>
            Converts this instance to a JSON string.
            </summary>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders.FromJson(System.String)">
            <summary>
            Deserializes a <see cref="T:FM.LiveSwitch.Signalling.Server.CallbackPollingHeaders"/> instance from a JSON string.
            </summary>
            <param name="json">The JSON string.</param>
            <returns>The header collection.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CallbackPollingResponse">
            <summary>
            A response to a JSON-P request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingResponse.Content">
            <summary>
            Gets or sets the content of the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingResponse.Headers">
            <summary>
            Gets or sets the headers in the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CallbackPollingResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code to return.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CallbackPollingResponse.ToJson">
            <summary>
            Converts this instance to a JSON string.
            </summary>
            <returns>The JSON string.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Configuration.TargetedScan">
            <summary>
            Defines how the server scans referenced assemblies to locate event and script modifier methods
            that may be part of the application code or an extension.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.Configuration.TargetedScan.Auto">
            <summary>
            Instructs the server to exclude referenced assemblies that match a pre-defined black-list of Microsoft, Windows, and Frozen Mountain assemblies (this is the default).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.Configuration.TargetedScan.Off">
            <summary>
            Instructs the server to scan every referenced assembly.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.Configuration.TargetedScan.On">
            <summary>
            Instructs the server to only include referenced assemblies that define the <see cref="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute"/> assembly-level attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig">
            <summary>
            Server configuration properties.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.ProviderType">
            <summary>
            Gets or sets the type of the signalling provider. Defaults to FM.LiveSwitch.Signalling.Server.InProcProvider.
            </summary>
            <value>The type of the signalling provider.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.Timeout">
            <summary>
            Gets or sets the interval between checks to see if a client is still
            active or can be considered idle. Defaults to 25000 (ms).
            </summary>
            <value>The timeout period during which a client stream request can gather messages.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.LatencyBuffer">
            <summary>
            Gets or sets the latency buffer which allots "grace" periods of time
            for high-latency clients.  Lower values will increase the rate at which
            old clients and messages are cleaned up at the risk of missed messages
            or removed client records for slow clients.  Higher values offer higher
            reliability with potential performance costs. Defaults to 10000 (ms).
            </summary>
            <value>The latency buffer.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.ReconnectInterval">
            <summary>
            Gets or sets the interval a client should allow between a completed server response and a new
            client request. This applies to clients that use the long-polling connection type.
            Defaults to 0 (ms).
            </summary>
            <value>The interval between a stream message received by the client and its next request.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.DistributeInterval">
            <summary>
            Gets or sets interval between distributions of messages to respective clients. Defaults to 10 (ms).
            </summary>
            <value>The interval between distributions of messages to respective clients.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.HeartbeatInterval">
            <summary>
            Gets or sets the interval between "heartbeats" that ensure the server node is registered with a remote data store. Defaults to 30000 (ms).
            </summary>
            <value>The interval between "heartbeats" that ensure the server node is registered with a remote data store.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.ThreadsPerCPU">
            <summary>
            Gets or sets the number of threads per logical CPU available for processing client event data. Defaults to 1.
            </summary>
            <value>The number of threads per logical CPU available for processing client event data.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.AllowPublishers">
            <summary>
            Gets or sets whether publisher access is allowed. Defaults to false.
            </summary>
            <value>Whether publisher access should be allowed.</value>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig.TargetedScan">
            <summary>
            Gets or sets whether the server will automatically scan all referenced assemblies, types
            and methods during its initialization OR just target specific types marked by
            <see cref="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute" /> OR ignore certain black-listed Microsoft/Windows/Frozen
            Mountain assemblies.  The scan searches for
            event and script modifier methods.  Defaults to "auto" (untargeted scan).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Embedded">
            <summary>
            Contains methods to assist with embedded resource management.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Embedded.GetString(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an embedded resource.
            </summary>
            <param name="assembly">The assembly in which the embedded source is located.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The contents of the embedded resource.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute">
            <summary>
            Declares a type within an assembly to contain server event methods.
            </summary>
            <remarks>
            <para>
            This assembly-level attribute is required for assemblies that contain custom
            methods when the server is configured to run with
            <tt>targetedScan=true</tt> (see web.config options). Only assemblies which declare
            this attribute will be checked for server event methods, and only within
            the type specified.
            </para>
            <para>
            This attribute can be defined multiple times if multiple types contain decorated
            event methods.
            </para>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventContainerAttribute.Type">
            <summary>
            The type containing event and script modifier methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.EventContainerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute"/> class.
            </summary>
            <param name="type">The type containing event methods.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.FunnelQueue`1">
            <summary>
            Thread-safe queue-like data structure that allows multiple producing
            threads to add items while a single consuming thread removes them.
            </summary>
            <typeparam name="T">The type of values in the queue.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.First">
            <summary>
            Gets the first node in the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.Length">
            <summary>
            Gets the length of the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.FunnelQueue`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.Remove(FM.LiveSwitch.Signalling.Server.FunnelQueueNode{`0},FM.LiveSwitch.Signalling.Server.FunnelQueueNode{`0})">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="previousNode">The previous node.</param>
            <returns>The removed node.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.FunnelQueue`1.RemoveAll">
            <summary>
            Removes all nodes from the queue.
            </summary>
            <returns>The list of removed nodes.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.FunnelQueueNode`1">
            <summary>
            A node within the <see cref="T:FM.LiveSwitch.Signalling.Server.FunnelQueue`1"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FunnelQueueNode`1.Value">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FunnelQueueNode`1.Next">
            <summary>
            Gets the next node.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.MethodInfoExtensions">
            <summary>
            Extension methods for the MethodInfo class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.MethodInfoExtensions.IsEquivalent(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified MethodInfo is equivalent to this instance.
            </summary>
            <param name="mi">The current MethodInfo.</param>
            <param name="methodInfo">The MethodInfo for comparison.</param>
            <returns>
              <c>true</c> if the specified MethodInfo is equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.NetworkParser">
            <summary>
            Utility class used for parsing binary/JSON data from HTTP contexts.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.NetworkParser.GetRequestContent(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets WebSync content from a request.
            </summary>
            <param name="request">The HTTP request.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.NetworkParser.GetResponseContent(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Gets WebSync content from a response.
            </summary>
            <param name="response">The HTTP response.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.NetworkParser.GetContent(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Gets WebSync content from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="contentType">The content-type of the stream.</param>
            <param name="forceBinary">Whether to force the stream to be read as binary.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ParameterArgs">
            <summary>
            A base class for other classes that contain a collection of parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ParameterArgs.Parameters">
            <summary>
            The parameter collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ParameterArgs.GetParameter(System.Int32)">
            <summary>
            Gets the parameter at the specified index.
            </summary>
            <param name="index">The index of the parameter.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ParameterArgs.GetParameter(System.String)">
            <summary>
            Gets the parameter with the specified name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ParameterArgs.GetParameter``1(System.Int32)">
            <summary>
            Gets the strongly-typed parameter at the specified index.
            To return a string, use the non-typed GetParameter overload.
            </summary>
            <typeparam name="T">The value type of the parameter.</typeparam>
            <param name="index">The index of the parameter.</param>
            <returns>The strongly-typed parameter.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ParameterArgs.GetParameter``1(System.String)">
            <summary>
            Gets the strongly-typed parameter with the specified name.
            To return a string, use the non-typed GetParameter overload.
            </summary>
            <typeparam name="T">The value type of the parameter.</typeparam>
            <param name="name">The name of the parameter.</param>
            <returns>The strongly-typed parameter.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ParameterArgs.ParseStructValue``1(System.String)">
            <summary>
            Converts a string value into an object.
            </summary>
            <typeparam name="T">The type of object to return (must be a value type).</typeparam>
            <param name="value">The string value.</param>
            <returns>The parsed object.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Pool`1">
            <summary>
            Abstract implementation of an object pool.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Pool`1.Count">
            <summary>
            Gets the number of locked and unlocked items in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Pool`1.LockedCount">
            <summary>
            Gets the number of locked items in the pool.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Pool`1.UnlockedCount">
            <summary>
            Gets the number of unlocked items in the pool.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Pool`1"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Pool`1"/> class.
            </summary>
            <param name="minSize">The minimum size of the pool.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Pool`1"/> class.
            </summary>
            <param name="minSize">The minimum size of the pool.</param>
            <param name="maxSize">The maximum size of the pool.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Initialize(System.Boolean)">
            <summary>
            Creates enough objects to populate the pool if there is a minimum
            size constraint.
            </summary>
            <param name="async">if set to <c>true</c> initialize the objects asynchronously; otherwise, initialize them synchronously.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Acquire">
            <summary>
            Acquires an object from the pool. If there are no available objects,
            a new object is created provided there is no maximum size constraint 
            or the number of objects in the pool is less than the maximum size.
            If there are no available objects and the maximum size of the pool
            has been reached, then this method will block until an object can
            be acquired.
            </summary>
            <returns>The item acquired from the pool.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Release(`0)">
            <summary>
            Releases an object back into the pool.
            </summary>
            <param name="item">The item to release back into the pool.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Create">
            <summary>
            Creates a new object for the pool.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.CreateAsync(FM.LiveSwitch.Action1{`0})">
            <summary>
            Creates a new object for the pool asynchronously.
            </summary>
            <param name="callback">The callback to execute with the created object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Validate(`0)">
            <summary>
            Validates an object from the pool.
            </summary>
            <param name="item">The object to validate.</param>
            <returns><c>true</c> if the object is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Pool`1.Expire(`0)">
            <summary>
            Expires an object from the pool.
            </summary>
            <param name="item">The object to expire.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.PostMessage">
            <summary>
            Helper for injecting the frame necessary to support HTML5 postMessage.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PostMessage.Frame">
            <summary>
            HTML + JavaScript for relaying content via HTML5 postMessage.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SessionAccessLevel">
            <summary>
            The level of session-state access being used.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.None">
            <summary>
            Indicates that session-state data is unavailable. Handlers
            with this value do not acquire a lock on the session.
            They will not block or be blocked by other handlers,
            regardless of their access level.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadOnly">
            <summary>
            Indicates that session-state data is available for reading,
            but not writing. Handlers with this value acquire a shared
            read lock on the session for the duration of the request
            being processed. They will not block or be blocked by
            other handlers with the same <see cref="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadOnly"/> access.
            However, they will block and be blocked by handlers with
            <see cref="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadWrite"/> access, since those handlers require
            an exclusive lock.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadWrite">
            <summary>
            Indicates that session-state data is available for reading
            and writing. Handlers with this value acquire an exclusive
            read/write lock on the session for the duration of the request
            being processed. They will block and be blocked by other
            handlers with the either <see cref="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadOnly"/> or the same
            <see cref="F:FM.LiveSwitch.Signalling.Server.SessionAccessLevel.ReadWrite"/> access.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignatureException">
            <summary>
            Specialized exception for cases where event methods don't match the
            required method signature.
            </summary>
            <remarks>
            <para>
            The required method signature for event methods is
            <code>public static void (object, X) where X is the type of event args.</code>
            </para>
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignatureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignatureException"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignatureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignatureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignatureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Utilities">
            <summary>
            Fast method invocation utilities, courtesy of Manuel Abadia.
            <a href="http://www.manuelabadia.com/blog/PermaLink,guid,dc72b235-1381-4c91-8706-e36216f49b94.aspx">Link</a>
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Utilities.FastInvokeHandler">
            <summary>
            Delegate for calling a method that is not known at runtime.
            </summary>
            <param name="target">the object to be called or null if the call is to a static method.</param>
            <param name="parameters">the parameters to the method.</param>
            <returns>the return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Utilities.FastCreateInstanceHandler">
            <summary>
            Delegate for creating and object at runtime using the default constructor.
            </summary>
            <returns>the newly created object.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Utilities.FastPropertyGetHandler">
            <summary>
            Delegate to get an arbitraty property at runtime.
            </summary>
            <param name="target">the object instance whose property will be obtained.</param>
            <returns>the property value.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Utilities.FastPropertySetHandler">
            <summary>
            Delegate to set an arbitrary property at runtime.
            </summary>
            <param name="target">the object instance whose property will be modified.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Batch">
            <summary>
            A summary of batch information about a set of requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Batch.Index">
            <summary>
            The zero-based index of the current message in the current batch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Batch.Length">
            <summary>
            The total number of messages in the current match.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Batch.IsStart">
            <summary>
            Whether the current message is the first message of the current batch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Batch.IsEnd">
            <summary>
            Whether the current message is the last message of the current batch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Batch.Tag">
            <summary>
            A user-defined object that is carried forward through the batch.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.BindInfo">
            <summary>
            Details about a bind request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.BindInfo.Record">
            <summary>
            Gets or sets the record being bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.BindInfo.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.BindInfo.Records">
            <summary>
            Gets or sets the records being bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.BindInfo.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.BindInfo.IsPrivate">
            <summary>
            Gets or sets whether the <see cref="P:FM.LiveSwitch.Signalling.Server.BindInfo.Records"/> are private.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Bindings">
            <summary>
            A dictionary of bindings (key/value records with a private flag).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Bindings"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.#ctor(System.Collections.Generic.IEnumerable{FM.LiveSwitch.Signalling.Binding})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Bindings"/> class.
            </summary>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.Clone">
            <summary>
            Creates a deep clone of this bindings collection.
            </summary>
            <returns>A deep clone of this bindings collection.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Bindings.Count">
            <summary>
            Gets the number of bindings in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.Add(FM.LiveSwitch.Signalling.Binding)">
            <summary>
            Adds the specified binding.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.Remove(System.String)">
            <summary>
            Removes the binding associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.Clear">
            <summary>
            Removes all bindings.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key exists in the collection.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetBindings">
            <summary>
            Gets the bindings in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetKeys">
            <summary>
            Gets the keys in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetRecords">
            <summary>
            Gets the records in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetRecord(System.String)">
            <summary>
            Gets the a record from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetValueJson(System.String)">
            <summary>
            Gets a JSON value from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.ToJson">
            <summary>
            Serializes the bindings to JSON.
            </summary>
            <returns>The bindings in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.ToJson(FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Serializes a bindings collection to JSON.
            </summary>
            <param name="bindings">The bindings to serialize.</param>
            <returns>The JSON-serialized bindings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Bindings.FromJson(System.String)">
            <summary>
            Deserializes a bindings collection from JSON.
            </summary>
            <param name="bindingsJson">The bindings to deserialize.</param>
            <returns>The deserialized bindings.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Cache">
            <summary>
            An in-memory cache for signalling clients, bindings, and subscriptions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Cache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Cache"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Cache.HasIdled(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified last activity has idled.
            </summary>
            <param name="lastActivity">The last activity.</param>
            <param name="allowedInactivity">The allowed inactivity.</param>
            <returns>
              <c>true</c> if the specified last activity has idled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Cache.GetCurrentTimestamp">
            <summary>
            Gets the current timestamp.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Cache.ClientExists(System.String,System.String)">
            <summary>
            Checks if a client exists in cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>
            	<c>true</c> if the client exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CacheBase`1">
            <summary>
            Base class definition for implementing signalling cache logic for a
            distributed or in-memory cache.
            </summary>
            <typeparam name="L">The <see cref="T:System.Type"/> of the lock handles used.</typeparam>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.CacheBase`1.Clients">
            <summary>
            Accessor for cached client records.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.CacheBase`1.Bindings">
            <summary>
            Accessor for cached binding records.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.CacheBase`1.Subscriptions">
            <summary>
            Accessor for cached subscription records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.#ctor(FM.LiveSwitch.Signalling.Server.ICacheAccessor{FM.LiveSwitch.Signalling.Server.CachedClient,System.String,`0},FM.LiveSwitch.Signalling.Server.ICacheAccessor{FM.LiveSwitch.Signalling.Server.CachedBinding,System.String,`0},FM.LiveSwitch.Signalling.Server.ICacheAccessor{FM.LiveSwitch.Signalling.Server.CachedSubscription,System.String,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CacheBase`1"/> class.
            </summary>
            <param name="clients">Accessor for cached client records.</param>
            <param name="bindings">Accessor for cached binding records.</param>
            <param name="subscriptions">Accessor for cached subscription records.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.HasIdled(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified last activity is stale compared
            to the allowed inactivity and should be idled.
            </summary>
            <param name="lastActivity">The last activity timestamp.</param>
            <param name="allowedInactivity">The allowed inactivity (ms).</param>
            <returns>
              <c>true</c> if the specified last activity is stale; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetCurrentTimestamp">
            <summary>
            Gets the current timestamp.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.AddClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)">
            <summary>
            Thread-safe addition of an initialized client to the cache.
            </summary>
            <param name="requestedClientId">The client's requested ID.</param>
            <param name="lastStreamId">The client's last stream ID.</param>
            <param name="lastAuthToken">The client's last auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain key.</param>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <returns><c>true</c> if the client was added successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.BindClient(System.String,System.String,System.String,FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Thread-safe addition to a client's bindings in the local cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="records">The records to bind.</param>
            <param name="isPrivate">Whether the records are private.</param>
            <returns><c>true</c> if all the records were successfully bound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.UnbindClient(System.String,System.String,System.String,System.String[])">
            <summary>
            Thread-safe removal of a client's bindings in the local cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="keys">The keys to unbind.</param>
            <returns><c>true</c> if all the records were successfully unbound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.SubscribeClient(System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Thread-safe addition to a client's subscriptions in the local cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if all the channels were successfully subscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.UnsubscribeClient(System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Thread-safe removal of a client's subscriptions in the local cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels to unsubscribe.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if all the channels were successfully unsubscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.RemoveClient(System.String,System.String,System.String)">
            <summary>
            Thread-safe removal of a client from the cache.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the client was removed successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.RemoveClients(FM.LiveSwitch.Signalling.Server.ClientReference[])">
            <summary>
            Thread-safe removal of a list of clients from the local cache.
            </summary>
            <param name="clients">The clients to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClients">
            <summary>
            Thread-safe compilation of all clients across all domain keys.
            </summary>
            <returns>An array of clients.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClientCount">
            <summary>
            Thread-safe compilation of the total client count across all domain keys.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClientCounts">
            <summary>
            Thread-safe compilation of all client counts by domain key.
            </summary>
            <returns>The number of clients connected by domain key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetIdledClients(System.Int32)">
            <summary>
            Thread-safe compilation of any clients that have exceeded the allowed inactivity threshold.
            </summary>
            <param name="allowedInactivity">The number of milliseconds the client is allowed to idle.</param>
            <returns>An array of idled clients.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.AuthorizeClientRequest(System.String,System.String,System.String,System.String,System.String@,System.String@,FM.LiveSwitch.Signalling.Server.Bindings@,FM.LiveSwitch.Signalling.Server.Subscriptions@)">
            <summary>
            Authorizes a client request.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="bindings">Any client bindings.</param>
            <param name="subscriptions">Any client subscriptions.</param>
            <returns>
              <c>true</c> if the client exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.AuthorizeServerRequest(System.String,System.String,System.String@,System.String@,System.String@,System.String@,FM.LiveSwitch.Signalling.Server.Bindings@,FM.LiveSwitch.Signalling.Server.Subscriptions@)">
            <summary>
            Authorizes a server request.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="bindings">Any client bindings.</param>
            <param name="subscriptions">Any client subscriptions.</param>
            <returns>
              <c>true</c> if the client exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.DistributeMessage(FM.LiveSwitch.Signalling.Message,System.String)">
            <summary>
            Thread-safe distribution of a message.
            </summary>
            <param name="message">The message to distribute.</param>
            <param name="domainKey">The publisher's domain.</param>
            <returns>True if the message was distributed, false otherwise.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.PickUpMessages(FM.LiveSwitch.Signalling.Server.ClientReference[])">
            <summary>
            Thread-safe pickup of messages for a given set of clients.
            </summary>
            <param name="clients">The clients to pickup messages for.</param>
            <returns>The picked-up message collection.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.RemovePickedUpMessages(System.String,System.String,System.String)">
            <summary>
            Thread-safe removal of picked up messages for a particular client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.ReaddPickedUpMessages(System.String,System.String,System.String)">
            <summary>
            Thread-safe retrying of picked up messages for a particular client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClient(System.String,System.String)">
            <summary>
            Gets details for a specific connected client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>The details for the clients currently connected.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClientCount(System.String)">
            <summary>
            Gets the number of clients connected for a given domain key.
            </summary>
            <param name="domainKey">The clients' domain.</param>
            <returns>The number of clients connected for a given domain key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetSubscribedClientCount(System.String,System.String)">
            <summary>
            Gets the number of clients subscribed to a given channel.
            </summary>
            <param name="channel">The channel to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The number of clients connected to the channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetBoundClientCount(System.String,System.String)">
            <summary>
            Gets the number of clients bound to a given record key.
            </summary>
            <param name="key">The key to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The number of clients bound to the record key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClientIds(System.String)">
            <summary>
            Gets a list of client IDs currently connected.
            </summary>
            <param name="domainKey">The clients' domain.</param>
            <returns>The client IDs currently connected.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetClients(System.String)">
            <summary>
            Gets a list of details for clients currently connected.
            </summary>
            <param name="domainKey">The clients' domain.</param>
            <returns>The details for the clients currently connected.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetSubscribedClientIds(System.String,System.String)">
            <summary>
            Gets a list of client IDs currently subscribed to a given channel.
            </summary>
            <param name="channel">The channel to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The client IDs currently subscribed to the channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetSubscribedClients(System.String,System.String)">
            <summary>
            Gets a list of details for clients currently subscribed to a given channel.
            </summary>
            <param name="channel">The channel to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The details for the clients currently subscribed to the channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetBoundClientIds(System.String,System.String)">
            <summary>
            Gets a list of client IDs currently bound to a given record key.
            </summary>
            <param name="key">The key to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The client IDs currently bound to the record key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetBoundClients(System.String,System.String)">
            <summary>
            Gets a list of details for clients currently bound to a given record key.
            </summary>
            <param name="key">The key to query.</param>
            <param name="domainKey">The clients' domain.</param>
            <returns>The details for the clients currently bound to the record key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetSubscriptions(System.String,System.String)">
            <summary>
            Gets a list of channels to which a client is subscribed.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>A list of channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheBase`1.GetBindings(System.String,System.String)">
            <summary>
            Gets a collection of key/value pairs bound to the client ID.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>Any key/value pairs bound to the client ID.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CachedBinding">
            <summary>
            Thread-safe bindings cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedBinding.RecordKey">
            <summary>
            The binding record key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CachedBinding"/> class.
            </summary>
            <param name="recordKey">The binding record key.</param>
            <param name="domainKey">The binding domain key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.Add(System.String)">
            <summary>
            Adds the specified client to the binding.
            </summary>
            <param name="clientId">The cached client ID to bind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.Remove(System.String)">
            <summary>
            Removes the specified client from the binding.
            </summary>
            <param name="clientId">The cached client ID to unbind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.GetClientIds">
            <summary>
            Gets the bound client IDs.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.GetClientIdCount">
            <summary>
            Gets the number of bound clients.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.ToJson">
            <summary>
            Serializes the cached binding to JSON.
            </summary>
            <returns>The cached binding in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.ToJson(FM.LiveSwitch.Signalling.Server.CachedBinding)">
            <summary>
            Serializes a cached binding to JSON.
            </summary>
            <param name="cachedBinding">The cached binding to serialize.</param>
            <returns>The JSON-serialized cached binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedBinding.FromJson(System.String)">
            <summary>
            Deserializes a cached binding from JSON.
            </summary>
            <param name="cachedBindingJson">The cached binding to deserialize.</param>
            <returns>The deserialized cached binding.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CachedClient">
            <summary>
            Thread-safe client cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.ClientId">
            <summary>
            Gets the client's ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.StreamId">
            <summary>
            Gets the client's stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.AuthToken">
            <summary>
            Gets the client's auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.UserId">
            <summary>
            Gets the client's user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.DeviceId">
            <summary>
            Gets the client's device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedClient.HasMessages">
            <summary>
            Gets whether or not the client has messages.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CachedClient"/> class.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain key.</param>
            <param name="lastActivity">The client's last activity timestamp (now).</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.GetLastActivity">
            <summary>
            Thread-safe operation to read the timestamp of the client's last activity.
            </summary>
            <returns>The date/time of the client's last activity.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.SetLastActivity(System.Int32)">
            <summary>
            Thread-safe operation to update the timestamp of the client's last activity.
            </summary>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.Bind(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Adds a record to the client's bindings.
            </summary>
            <param name="record">The record to bind.</param>
            <param name="isPrivate">Whether the record is private.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.Unbind(System.String)">
            <summary>
            Removes a record from the client's bindings.
            </summary>
            <param name="key">The key to unbind.</param>
            <returns><c>true</c> if the record was unbound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.Subscribe(System.String,System.String)">
            <summary>
            Adds a channel to the client's subscriptions list.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channel was subscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.Unsubscribe(System.String,System.String)">
            <summary>
            Removes a channel from the client's subscriptions list.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channel was unsubscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.IsSubscribed(System.String)">
            <summary>
            Determines whether the specified channel is subscribed.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if the specified channel is subscribed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.GetSubscriptions">
            <summary>
            Retrieves the current list of subscribed channels.
            </summary>
            <returns>An array of currently subscribed channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.GetBindings">
            <summary>
            Retrieves any key/value pairs bound to the client ID.
            </summary>
            <returns>A hashtable of key/value pairs bound to the client ID.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.AddMessage(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Adds a message to a client's list for pickup.
            </summary>
            <param name="message">The message to deliver.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.PickUpMessages">
            <summary>
            Gets a list of messages awaiting pickup.
            </summary>
            <returns>The list of waiting messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.RemovePickedUpMessages">
            <summary>
            Removes any messages that have been picked up.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.ReaddPickedUpMessages">
            <summary>
            Unflags any messages that were picked up.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.ToJson">
            <summary>
            Serializes the cached client to JSON.
            </summary>
            <returns>The cached client in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.ToJson(FM.LiveSwitch.Signalling.Server.CachedClient)">
            <summary>
            Serializes a cached client to JSON.
            </summary>
            <param name="cachedClient">The cached client to serialize.</param>
            <returns>The JSON-serialized cached client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedClient.FromJson(System.String)">
            <summary>
            Deserializes a cached client from JSON.
            </summary>
            <param name="cachedClientJson">The cached client to deserialize.</param>
            <returns>The deserialized cached client.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CachedItem">
            <summary>
            Base class for cached items.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedItem.DomainKey">
            <summary>
            The item's domain.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedItem.SyncRoot">
            <summary>
            The item's synchronization root.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CachedItem"/> class.
            </summary>
            <param name="domainKey">The item's domain.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.CachedSubscription">
            <summary>
            Thread-safe subscriptions cache.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.CachedSubscription.Channel">
            <summary>
            The subscription channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.CachedSubscription"/> class.
            </summary>
            <param name="channel">The subscription channel.</param>
            <param name="domainKey">The subscription domain key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.Add(System.String)">
            <summary>
            Adds the specified client to the subscription.
            </summary>
            <param name="clientId">The cached client ID to subscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.Remove(System.String)">
            <summary>
            Removes the specified client ID from the subscription.
            </summary>
            <param name="clientId">The cached client ID to unsubscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.GetClientIds">
            <summary>
            Gets the subscribed client IDs.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.GetClientIdCount">
            <summary>
            Gets the number of subscribed clients.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.ToJson">
            <summary>
            Serializes the cached subscription to JSON.
            </summary>
            <returns>The cached subscription in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.ToJson(FM.LiveSwitch.Signalling.Server.CachedSubscription)">
            <summary>
            Serializes a cached subscription to JSON.
            </summary>
            <param name="cachedSubscription">The cached subscription to serialize.</param>
            <returns>The JSON-serialized cached subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CachedSubscription.FromJson(System.String)">
            <summary>
            Deserializes a cached subscription from JSON.
            </summary>
            <param name="cachedSubscriptionJson">The cached subscription to deserialize.</param>
            <returns>The deserialized cached subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheKey`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheKey`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheKey`1.op_Equality(FM.LiveSwitch.Signalling.Server.CacheKey{`0},FM.LiveSwitch.Signalling.Server.CacheKey{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The first cache key.</param>
            <param name="obj2">The second cache key.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.CacheKey`1.op_Inequality(FM.LiveSwitch.Signalling.Server.CacheKey{`0},FM.LiveSwitch.Signalling.Server.CacheKey{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The first cache key.</param>
            <param name="obj2">The second cache key.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ClientMessages">
            <summary>
            A mapping of client identities to arrays of messages to deliver.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientMessages.ClientIdsToMessageIds">
            <summary>
            Gets or sets the mapping of client IDs to message IDs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientMessages.MessageIdsToMessages">
            <summary>
            Gets or sets the mapping of message IDs to messages.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientMessages.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.ClientMessages"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientMessages.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.Dictionary{System.Int32,FM.LiveSwitch.Signalling.Message})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.ClientMessages"/> class.
            </summary>
            <param name="clientIdsToMessageIds">The mapping of client IDs to message IDs.</param>
            <param name="messageIdsToMessages">The mapping of message IDs to messages.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientMessages.Add(System.String,System.Collections.Generic.IEnumerable{FM.LiveSwitch.Signalling.Message})">
            <summary>
            Adds a set of messages for a fully-qualified client identity.
            </summary>
            <param name="clientId">The fully-qualified client identity.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientMessages.TryGetMessages(System.String,FM.LiveSwitch.Signalling.Message[]@)">
            <summary>
            Tries to get the messages for a fully-qualified client identity.
            </summary>
            <param name="clientId">The fully-qualified client identity.</param>
            <param name="messages">The messages.</param>
            <returns><c>true</c> if the messages were retrieved successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ClientReference">
            <summary>
            A server-side reference to a signalling client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.ClientId">
            <summary>
            The client's ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.StreamId">
            <summary>
            The client's stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.AuthToken">
            <summary>
            The client's auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.UserId">
            <summary>
            The client's user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.DeviceId">
            <summary>
            The client's device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.DomainKey">
            <summary>
            The domain key for which the client is valid.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.Bindings">
            <summary>
            The client bindings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ClientReference.Subscriptions">
            <summary>
            The client subscriptions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.#ctor(FM.LiveSwitch.Signalling.Server.CachedClient)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.ClientReference"/> class.
            </summary>
            <param name="client">The cached client instance.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.#ctor(FM.LiveSwitch.Signalling.Server.ClientReference)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.ClientReference"/> class.
            </summary>
            <param name="clientReference">The client reference.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings,FM.LiveSwitch.Signalling.Server.Subscriptions)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.ClientReference"/> class.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain key.</param>
            <param name="bindings">The client's bindings.</param>
            <param name="subscriptions">The client's subscriptions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.ToJson">
            <summary>
            Serializes this client reference to a JSON string.
            </summary>
            <returns>The client reference JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.ToJson(FM.LiveSwitch.Signalling.Server.ClientReference)">
            <summary>
            Serializes a client reference to a JSON string.
            </summary>
            <param name="clientReference">The client reference.</param>
            <returns>The client reference JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.FromJson(System.String)">
            <summary>
            Deserializes a client reference from a JSON string.
            </summary>
            <param name="clientReferenceJson">The client reference JSON string.</param>
            <returns>The client reference.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.ToJsonArray(FM.LiveSwitch.Signalling.Server.ClientReference[])">
            <summary>
            Serializes an array of client references to a JSON string.
            </summary>
            <param name="clientReferences">The client references.</param>
            <returns>The client references JSON string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ClientReference.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of client references from a JSON string.
            </summary>
            <param name="clientReferencesJson">The client references JSON string.</param>
            <returns>The client references.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Config">
            <summary>
            Signalling configuration section definition.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Envelope">
            <summary>
            Message wrapper which includes contextual information relevant to delivery.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Envelope.Message">
            <summary>
            The message to be distributed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Envelope.DomainKey">
            <summary>
            The domain to which the message is targeted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Envelope.CreatedOn">
            <summary>
            The UTC date when the message was published.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ErrorCode">
            <summary>
            Defines all possible error codes used in signalling. Error codes are grouped into 4 categories:
            <list type="number">
            <item>600-level: indicate that the request could not be started</item>
            <item>700-level: indicate that a provider error occurred while the request was processing</item>
            <item>800-level: indicate that the request was denied by an event handler</item>
            <item>900-level: indicate that an internal server error occurred when processing the request</item>
            </list>
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.DeserializationFailure">
            <summary>
            This error occurs when the message and/or publication sent to signalling
            was invalid JSON.
            </summary>
            <remarks>
            The error text is:
            <code>601::Could not deserialize incoming messages or publications.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.EmptyRequest">
            <summary>
            This error occurs when signalling receives an empty POST or GET request.
            </summary>
            <remarks>
            The error text is:
            <code>602::Incoming request was empty.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoClientId">
            <summary>
            This error indicates that no client ID was specified in the request.
            </summary>
            <remarks>
            The error text is:
            <code>603::No client ID.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.ClientDoesNotExist">
            <summary>
            This error indicates that the client ID, stream ID, and auth token specified in the request do not represent a
            valid client record on the server. This can occur if 1) the server was reset and lost all its client information
            or 2) the client passed an invalid client ID, stream ID, and/or auth token after awakening from standby or some
            other client failure. This error is expected occasionally under normal use.
            </summary>
            <remarks>
            The error text is:
            <code>604::Client does not exist.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoStreamId">
            <summary>
            This error indicates that no stream ID was specified in the request.
            </summary>
            <remarks>
            The error text is:
            <code>605::No stream ID.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoAuthToken">
            <summary>
            This error indicates that no auth token was specified in the request.
            </summary>
            <remarks>
            The error text is:
            <code>606::No auth token.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.PublisherNotAllowed">
            <summary>
            This error occurs when a publisher attempts to interact with a signalling server, but publisher 
            access has been disabled. To enable publisher access, edit your Web.config’s <tt>allowPublishers</tt>
            entry as described in Security.
            </summary>
            <remarks>
            The error text is:
            <code>608::HTTP publication is disabled. Check your web.config settings.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoRequestHandler">
            <summary>
            This error occurs when the request handler failed to initialize. Typically, this results from an incorrectly configured 
            web.config, such as missing handlers, invalid types for the handlers, etc. If logging is configured, there will be additional 
            details available in your logs.
            </summary>
            <remarks>
            The error text is:
            <code>609::The request handler could not be initialized. Check your web.config settings and logs.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoThreadPool">
            <summary>
            This error occurs when the thread pool used for managing incoming requests could not be initialized.
            Typically, this results from an incorrectly configured web.config, such as missing handlers, invalid 
            handler types, etc. If logging is configured, there will be additional details available in your logs.
            </summary>
            <remarks>
            The error text is:
            <code>610::The thread pool has not been initialized. Check your web.config handler settings.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.HandshakeFailure">
            <summary>
            This error occurs when the client's attempt to connect to the server was denied. This could be for any number of reasons; 
            check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>701::The handshake operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.InvalidConnectionType">
            <summary>
            This error occurs when the client does not support any of the connection types supported by the server. 
            This should never occur when using the signalling server in association with a signalling client. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>702::A common connection type could not be negotiated.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.ExlusiveConnect">
            <summary>
            This error occurs when a streaming connection is opened to a handler that requires an exclusive session lock.
            </summary>
            <remarks>
            The error text is:
            <code>711::Streaming connections cannot be opened to a handler with an exclusive session lock.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.NoConnectionType">
            <summary>
            This error occurs when a streaming connection has no connection type specified.
            </summary>
            <remarks>
            The error text is:
            <code>712::Streaming connections require a connection type.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.SubscribeFailure">
            <summary>
            This error indicates that the client attempted to subscribe to a channel, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>721::The subscribe operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.PublishFailure">
            <summary>
            This error indicates that a client attempted to send a publication to a channel, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>731::The publish operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.UnsubscribeFailure">
            <summary>
            This error indicates that the client attempted to unsubscribe from a channel, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>741::The unsubscribe operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.DisconnectFailure">
            <summary>
            This error indicates that the client attempted to disconnect from the server, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>751::The disconnect operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.BindFailure">
            <summary>
            This error indicates that the client attempted to bind a key/value to itself, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>761::The bind operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.UnbindFailure">
            <summary>
            This error indicates that the client attempted to unbind a key from itself, but failed. Check your server logs for details.
            </summary>
            <remarks>
            The error text is:
            <code>771::The unbind operation failed.</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.GenericBeforeEventFailed">
            <summary>
            This error indicates that an error occurred or the request was flagged as unsuccessful in a `Before` event handler.
            A typical example of this would be authentication failure. 
            The [Anything] represents the actual error text specified by the developer.
            </summary>
            <remarks>
            The error text is:
            <code>801::[Anything].</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.GenericAfterEventFailed">
            <summary>
            This error indicates that an error occurred or the response was flagged as unsuccessful in an `After` event handler.
            This typically indicates a programming error, as successful responses should not be disguised as unsuccessful. 
            The [Anything] represents the actual error text specified by the developer.
            </summary>
            <remarks>
            The error text is:
            <code>802::[Anything].</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.GenericSignallingException">
            <summary>
            This error occurs when an unexpected exception occurs within signalling itself.  If this error occurs, more details 
            will be available in the logs (if configured). The [Anything] will contain the error messages from the source of the error.
            This should *never* be seen, so if you do, please contact us.
            </summary>
            <remarks>
            The error text is:
            <code>901::[Anything]</code>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.ErrorCode.GenericIISException">
            <summary>
            This error occurs when an unexpected exception occurs within the request handling of IIS.  If this error occurs, more details 
            will be available in the logs (if configured). The [Anything] will contain the error messages from the source of the error.
            </summary>
            <remarks>
            The error text is:
            <code>901::[Anything]</code>
            </remarks>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.EventSource">
            <summary>
            The originating source of an event.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventSource.Client">
            <summary>
            Indicates that the source is a signalling client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventSource.Publisher">
            <summary>
            Indicates that the source is a signalling publisher.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventSource.Server">
            <summary>
            Indicates that the source is a direct server-side method.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventSource.Idler">
            <summary>
            Indicates that the source is the idling client detector.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.EventType">
            <summary>
            The signalling event type.
            </summary>
            <remarks>
            <para>
            This enumeration describes all possible signalling server-side events triggered by
            clients, publishers, server-side methods, and the idling client detector.
            (See <see cref="T:FM.LiveSwitch.Signalling.Server.EventSource"/> for descriptions of the sources that can trigger
            events.)
            </para>
            <para>
            Event types can be combined using the bitwise OR (|) operator. This can be especially
            useful when using <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute" /> to define server-side event
            methods, as the same code can be used for multiple event types.
            </para>
            <para>
            The following example illustrates combining event types in a single event method.
            </para>
            <example>
            <code>
            [SignallingEvent(EventType.AfterSubscribe | EventType.AfterUnsubscribe)]
            public static void NotifySubscriptionChange(object sender, SignallingEventArgs args)
            {
                // publish notification that a client has subscribed or unsubscribed
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeConnect">
            <summary>
            Indicates that a connect (new client) request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeDisconnect">
            <summary>
            Indicates that a disconnect request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeBind">
            <summary>
            Indicates that a bind request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeUnbind">
            <summary>
            Indicates that an unbind request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeSubscribe">
            <summary>
            Indicates that a subscribe request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeUnsubscribe">
            <summary>
            Indicates that an unsubscribe request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforePublish">
            <summary>
            Indicates that a publish request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeService">
            <summary>
            Indicates that a service request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeStream">
            <summary>
            Indicates that a stream request is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterConnect">
            <summary>
            Indicates that a connect (new client) request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterDisconnect">
            <summary>
            Indicates that a disconnect request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterBind">
            <summary>
            Indicates that a bind request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterUnbind">
            <summary>
            Indicates that an unbind request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterSubscribe">
            <summary>
            Indicates that a subscribe request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterUnsubscribe">
            <summary>
            Indicates that an unsubscribe request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterPublish">
            <summary>
            Indicates that a publish request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterService">
            <summary>
            Indicates that a service request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AfterStream">
            <summary>
            Indicates that a stream request has been processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AllBefore">
            <summary>
            Indicates that a requests is about to be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.EventType.AllAfter">
            <summary>
            Indicates that a request has been processed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Execution">
            <summary>
            The manner in which the method should be executed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.Execution.FireAndForget">
            <summary>
            Indicates that the server should execute the method asynchronously
            and proceed immediately without waiting for it to return.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.Execution.Normal">
            <summary>
            Indicates that the server should execute the method synchronously
            and proceed when it returns.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.FilterMatch">
            <summary>
            Details about a filter expression match for server-side
            signalling events (see <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventArgs"/>).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FilterMatch.Value">
            <summary>
            The value matched by the filter expression - a channel
            for publish/service/subscribe/unsubscribe messages or a key
            for bind/unbind messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.FilterMatch.Parameters">
            <summary>
            The collection of parameters extracted from the matching value.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.FilterType">
            <summary>
            Enumeration that represents how to handle a filter string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.FilterType.Template">
            <summary>
            Indicates that the filter expression is matched
            using templating supplied by UriTemplate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.FilterType.Regex">
            <summary>
            Indicates that the filter expression is matched
            using a compiled regular expression.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Server.FilterType.None">
            <summary>
            Indicates that the filter expression should be
            ignored.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3">
            <summary>
            Definition for implementing the methods required for <see cref="T:FM.LiveSwitch.Signalling.Server.CacheBase`1"/> to
            interface with a specific type in a distributed or in-memory cache.
            </summary>
            <typeparam name="T">The type of object in the cache.</typeparam>
            <typeparam name="K">The type of the key used to identify objects unique to a domain.</typeparam>
            <typeparam name="L">The type of object used to lock record access.</typeparam>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.GetDomainKeys">
            <summary>
            Selects all the domain keys this instance has seen.
            </summary>
            <returns>The domain keys this instance has seen.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Insert(`1,System.String,`0)">
            <summary>
            Inserts an object into the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="item">The object.</param>
            <returns><c>true</c> if succesfully inserted; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Select(`1,System.String)">
            <summary>
            Selects an object from the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <returns>The selected object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Select(`1,System.String,`2@)">
            <summary>
            Selects and locks access to an object from the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="lockHandle">The object locking the record.</param>
            <returns>The selected object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Select(System.String)">
            <summary>
            Selects all objects from the cache for a specific domain.
            </summary>
            <param name="domainKey">The objects' domain.</param>
            <returns>The selected objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Select(`1[],System.String)">
            <summary>
            Selects a specific set of objects from the cache.
            </summary>
            <param name="keys">The object keys.</param>
            <param name="domainKey">The objects' domain.</param>
            <returns>The selected objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Update(`1,System.String,`0,`2)">
            <summary>
            Updates and unlocks access to an object in the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="item">The object.</param>
            <param name="lockHandle">The object locking the record.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Delete(`1,System.String,`0)">
            <summary>
            Deletes an object in the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="item">The object.</param>
            <returns><c>true</c> if succesfully deleted; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Delete(`1,System.String,`0,`2)">
            <summary>
            Deletes and unlocks access to an object in the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="item">The object.</param>
            <param name="lockHandle">The object locking the record.</param>
            <returns><c>true</c> if succesfully deleted; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ICacheAccessor`3.Unlock(`1,System.String,`0,`2)">
            <summary>
            Unlocks access to an object in the cache.
            </summary>
            <param name="key">The object key.</param>
            <param name="domainKey">The object's domain.</param>
            <param name="item">The object.</param>
            <param name="lockHandle">The object locking the record.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Manager">
            <summary>
            Base class with utilities for managing a server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Manager.CacheMethodsCallback">
            <summary>
            Delegate for callbacks invoked while caching event methods.
            </summary>
            <param name="methodInfo">Information about the discovered method.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Manager.RegisterMethodCallback`1">
            <summary>
            Delegate for callbacks invoked while registering event methods.
            </summary>
            <typeparam name="T">The type of attribute which must be attached to the method.</typeparam>
            <param name="attribute">The attribute which was attached to the method.</param>
            <param name="methodInfo">Information about the discovered method.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Manager.UnregisterMethodCallback`1">
            <summary>
            Delegate for callbacks invoked while unregistering event methods.
            </summary>
            <typeparam name="T">The type of attribute which must be attached to the method.</typeparam>
            <param name="attribute">The attribute which was attached to the method.</param>
            <param name="methodInfo">Information about the discovered method.</param>
            <param name="removed">The number of removed methods, which should be incremented if successful.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Manager.LoadType(System.String,System.Reflection.Assembly@)">
            <summary>
            Loads a type from the current set of assemblies.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assembly">The assembly in which the type was found.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Manager.CacheMethods(FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig,System.String[],FM.LiveSwitch.Signalling.Server.Manager.CacheMethodsCallback)">
            <summary>
            Scans all loaded assemblies for methods that could be used as event methods.
            </summary>
            <param name="config">The base server configuration.</param>
            <param name="blacklist">The blacklist of assembly names that are known to be void of event methods and can be skipped.</param>
            <param name="callback">The callback to execute for each method that is found.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Manager.RegisterMethod``2(System.Reflection.MethodInfo,System.IServiceProvider,System.String,System.Boolean,FM.LiveSwitch.Signalling.Server.Manager.RegisterMethodCallback{``0})">
            <summary>
            Tries to register an event method with the server.
            </summary>
            <typeparam name="TAttribute">The type of attribute which must be attached to the method.</typeparam>
            <typeparam name="TArgs">The type of arguments which must be specified as the second parameter of the method.</typeparam>
            <param name="methodInfo">Reflected information about the method.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="methodTypeDisplay">A friendly name describing the type of event methods (used for logging).</param>
            <param name="mustReturnVoid">If set to true, the method must return `void`.</param>
            <param name="callback">The callback to execute for each attribute attached to the method.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Manager.UnregisterMethod``1(System.Reflection.MethodInfo,FM.LiveSwitch.Signalling.Server.Manager.UnregisterMethodCallback{``0})">
            <summary>
            Tries to unregister an event method with the server.
            </summary>
            <typeparam name="TAttribute">The type of attribute which must be attached to the method.</typeparam>
            <param name="methodInfo">Reflected information about the method.</param>
            <param name="callback">The callback to execute for each attribute attached to the method.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Provider">
            <summary>
            Base definition of the methods required for a signalling provider implementation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.PersistsClients">
            <summary>
            Whether or not the signalling provider persists clients externally to the process.
            If this method returns <c>false</c>, then any pending HTTP requests will be ejected
            from the process when IIS starts to shut it down. Additionally, any clients in the
            sticky cache will be force-disconnected with appropriate unbind/unsubscribe/disconnect
            events. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.NewComb">
            <summary>
            Generates a new globally unique client ID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.NewId">
            <summary>
            Generates a new globally unique ID string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.IdFromGuid(System.Guid)">
            <summary>
            Converts a GUID to an ID string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.GuidFromId(System.String)">
            <summary>
            Converts an ID string to a GUID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.GuidFromBytes(System.Byte[])">
            <summary>
            Converts a GUID byte array to a GUID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.BytesFromGuid(System.Guid)">
            <summary>
            Converts a GUID to a GUID byte array.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.IdFromBytes(System.Byte[])">
            <summary>
            Converts a GUID byte array to an ID string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Provider.BytesFromId(System.String)">
            <summary>
            Converts an ID string to a GUID byte array.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.PublishInfo">
            <summary>
            Details about a publish request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.Channel">
            <summary>
            Gets or sets the channel to which the data is being sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.DataJson">
            <summary>
            Gets or sets the message data in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.DataBytes">
            <summary>
            Gets or sets the message data in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.Presence">
            <summary>
            Gets or sets whether the payload contains presence information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.PublishInfo.ReturnData">
            <summary>
            Gets or sets whether data should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.RequestHandler">
            <summary>
            HTTP handler that services Bayeux client/publisher requests.
            </summary>
            <remarks>
            <para>
            This handler is intended to be the primary endpoint for all Bayeux clients and
            publishers that integrate with signalling. The path to the handler is specified by its
            registration in web.config (system.web/httpHandlers or system.webServer/handlers).
            </para>
            <para>
            Several static methods on this class provide easy access to client and server
            manipulation - subscribing, publishing, binding, and retrieving statistics
            locally or globally.
            </para>
            <para>
            It is possible to attach custom code to the request handling process. This allows the
            requests to be modified on their way to the server, and the responses to be modified
            on their way back to the source client/publisher. To start, simply declare a static
            method and decorate it with <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute" />.
            </para>
            <para>
            If HttpContext.Session data is required in custom code, use
            <see cref="T:FM.LiveSwitch.Signalling.Server.RequestHandler" /> instead of this class in web.config. Note that
            the overhead associated with .NET session handling will decrease performance.
            </para>
            <para>
            See below for an example of how to attach to the <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeConnect" />
            event and authenticate the request.
            </para>
            <example>
            <code>
            [SignallingEventAttribute(EventType.BeforeConnect)]
            public static void Authenticator(object sender, SignallingEventArgs args)
            {
                foreach (Message m in args.Messages)
                {
                    if (!Authenticate(m.GetMeta&lt;Credentials&gt;()))
                    {
                        m.Successful = false;
                        m.Error = "Authentication failed.";
                    }
                }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.#ctor(FM.LiveSwitch.Signalling.Server.Provider,OpenTracing.ITracer,Microsoft.Extensions.Options.IOptions{FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig})">
            <summary>
            Initializes this RequestHandler
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.IsOfficial(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is the current assembly.
            </summary>
            <param name="assembly">The assembly to test.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.GetDefaultResponse(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the default response to a blank HTTP request.
            </summary>
            <param name="context">The current HTTP context.</param>
            <returns>The default response string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Publish(System.String,System.String)">
            <summary>
            Sends a publication directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="channel">The channel to which the data should be sent.
            Must start with a forward slash (/).</param>
            <param name="dataJson">The data to send in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Publish(System.String,System.Byte[],System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Sends a publication directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="channel">The channel to which the data should be sent.
            Must start with a forward slash (/).</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <param name="publishingClientId">The unique identifier to send as the publishing client ID.</param>
            <param name="domainKey">The domain key for which the channel is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Publish(System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Sends a publication directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="channel">The channel to which the data should be sent.
            Must start with a forward slash (/).</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <param name="publishingClientId">The unique identifier to send as the publishing client ID.</param>
            <param name="domainKey">The domain key for which the channel is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Publish(FM.LiveSwitch.Signalling.Publication,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Sends a publication directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="publication">The publication to send.</param>
            <param name="publishingClientId">The unique identifier to send as the publishing client ID.</param>
            <param name="domainKey">The domain key for which the publication is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The completed publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Publish(FM.LiveSwitch.Signalling.Publication[],System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Sends an array of publications directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="publications">The publications to send.</param>
            <param name="publishingClientId">The unique identifier to send as the publishing client ID.</param>
            <param name="domainKey">The domain key for which the publications are valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The completed publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Service(System.String,System.Byte[],System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Services a message directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="channel">The channel to which the data should be sent.
            Must start with a forward slash (/).</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <param name="servicingClientId">The unique identifier to send as the servicing client ID.</param>
            <param name="domainKey">The domain key for which the channel is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Service(System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Services a message directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="channel">The channel to which the data should be sent.
            Must start with a forward slash (/).</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <param name="servicingClientId">The unique identifier to send as the servicing client ID.</param>
            <param name="domainKey">The domain key for which the channel is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Service(FM.LiveSwitch.Signalling.Message,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Services a message directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="message">The message to send.</param>
            <param name="servicingClientId">The unique identifier to send as the servicing client ID.</param>
            <param name="domainKey">The domain key for which the message is valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The completed message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Service(FM.LiveSwitch.Signalling.Message[],System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings)">
            <summary>
            Services an array of messages directly.
            </summary>
            <remarks>
            When possible, use this instead of the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> as it avoids
            the overhead associated with transferring the data over HTTP.
            </remarks>
            <param name="messages">The messages to send.</param>
            <param name="servicingClientId">The unique identifier to send as the servicing client ID.</param>
            <param name="domainKey">The domain key for which the messages are valid. Only necessary when grouping connections.</param>
            <param name="bindings">The bindings to send with the request.</param>
            <returns>The completed messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Bind(System.String,FM.LiveSwitch.Signalling.Record,System.Boolean,System.String)">
            <summary>
            Binds a client to a public record.
            </summary>
            <param name="clientId">The ID of the client to bind.</param>
            <param name="record">The record to which the client should be bound.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been bound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the bind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.BindMany(System.String,FM.LiveSwitch.Signalling.Record[],System.Boolean,System.String)">
            <summary>
            Binds a client to an array of public records.
            </summary>
            <param name="clientId">The ID of the client to bind.</param>
            <param name="records">The records to which the client should be bound.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been bound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the bind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Bind(System.String,FM.LiveSwitch.Signalling.Record,System.Boolean,System.Boolean,System.String)">
            <summary>
            Binds a client to a record.
            </summary>
            <param name="clientId">The ID of the client to bind.</param>
            <param name="record">The record to which the client should be bound.</param>
            <param name="isPrivate">Whether the record is private.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been bound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the bind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.BindMany(System.String,FM.LiveSwitch.Signalling.Record[],System.Boolean,System.Boolean,System.String)">
            <summary>
            Binds a client to an array of records.
            </summary>
            <param name="clientId">The ID of the client to bind.</param>
            <param name="records">The records to which the client should be bound.</param>
            <param name="isPrivate">Whether the records are private.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been bound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the bind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Unbind(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Unbinds a client from a record.
            </summary>
            <param name="clientId">The ID of the client to unbind.</param>
            <param name="key">The key of the record to unbind.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unbound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unbind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.UnbindMany(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            Unbinds a client from a set of records.
            </summary>
            <param name="clientId">The ID of the client to unbind.</param>
            <param name="keys">The keys of the records from which the client should be unbound.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unbound.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unbind was succesful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.SubscribeManyWithTag(System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Subscribes a client to a set of channels with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to subscribe.</param>
            <param name="channels">The channels to which the client should be subscribed.</param>
            <param name="tag">The subscription identifier.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been subscribed.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Subscribe(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Subscribes a client to a channel.
            </summary>
            <param name="clientId">The ID of the client to subscribe.</param>
            <param name="channel">The channel to which the client should be subscribed.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been subscribed.</param>
            <param name="domainKey">The key for which the subscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the subscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.SubscribeMany(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            Subscribes a client to a set of channels.
            </summary>
            <param name="clientId">The ID of the client to subscribe.</param>
            <param name="channels">The channels to which the client should be subscribed.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been subscribed.</param>
            <param name="domainKey">The key for which the subscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the subscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.SubscribeWithTag(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Subscribes a client to a channel with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to subscribe.</param>
            <param name="channel">The channel to which the client should be subscribed.</param>
            <param name="tag">The subscription tag.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been subscribed.</param>
            <param name="domainKey">The key for which the subscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the subscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.SubscribeManyWithTag(System.String,System.String[],System.String,System.Boolean,System.String)">
            <summary>
            Subscribes a client to a set of channels with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to subscribe.</param>
            <param name="channels">The channels to which the client should be subscribed.</param>
            <param name="tag">The subscription identifier.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been subscribed.</param>
            <param name="domainKey">The key for which the subscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the subscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.UnsubscribeManyWithTag(System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Unsubscribes a client from a specific set of channels with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to unsubscribe.</param>
            <param name="channels">The channels from which the client should be unsubscribed.</param>
            <param name="tag">The subscription identifier.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unsubscribed.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.Unsubscribe(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Unsubscribes a client from a specific channel.
            </summary>
            <param name="clientId">The ID of the client to unsubscribe.</param>
            <param name="channel">The channel from which the client should be unsubscribed.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unsubscribed.</param>
            <param name="domainKey">The key for which the unsubscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unsubscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.UnsubscribeMany(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            Unsubscribes a client from a specific set of channels.
            </summary>
            <param name="clientId">The ID of the client to unsubscribe.</param>
            <param name="channels">The channels from which the client should be unsubscribed.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unsubscribed.</param>
            <param name="domainKey">The key for which the unsubscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unsubscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.UnsubscribeWithTag(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Unsubscribes a client from a specific channel with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to unsubscribe.</param>
            <param name="channel">The channel from which the client should be unsubscribed.</param>
            <param name="tag">The subscription identifier.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unsubscribed.</param>
            <param name="domainKey">The key for which the unsubscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unsubscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.UnsubscribeManyWithTag(System.String,System.String[],System.String,System.Boolean,System.String)">
            <summary>
            Unsubscribes a client from a specific set of channels with a subscription identifier.
            </summary>
            <param name="clientId">The ID of the client to unsubscribe.</param>
            <param name="channels">The channels from which the client should be unsubscribed.</param>
            <param name="tag">The subscription identifier.</param>
            <param name="notifyClient">Whether to automatically notify the client that they have been unsubscribed.</param>
            <param name="domainKey">The key for which the unsubscribe is valid. Only necessary when grouping connections.</param>
            <returns><c>true</c> if the unsubscribe was successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.GetClient(System.String,System.Boolean,System.String)">
            <summary>
            Gets information about a specific client.
            </summary>
            <param name="clientId">The ID of the client to retrieve.</param>
            <param name="local">Whether to use this instance or all instances for the result.</param>
            <param name="domainKey">The domain key for which the client is valid. Only necessary when grouping connections.</param>
            <returns>The client details.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.ProcessState(FM.LiveSwitch.Signalling.Server.State)">
            <summary>
            Processes the given signalling server state object.
            </summary>
            <param name="state">The state object to process.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestHandler.ProcessHttpRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Begins processing a standard signalling request.
            </summary>
            <param name="context">The HTTP context.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.RequestManager.EventSingleCallback">
            <summary>
            Method signature for continuing execution after a single-message event.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.RequestManager.EventMultipleCallback">
            <summary>
            Method signature for continuing execution after a multiple-message event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestManager.#ctor(FM.LiveSwitch.Signalling.Server.RequestHandler,OpenTracing.ITracer,FM.LiveSwitch.Signalling.Server.Provider,FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.RequestManager"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestManager.RaiseForcedDisconnect(FM.LiveSwitch.Signalling.Server.SignallingClientReference,FM.LiveSwitch.Signalling.Server.EventSource)">
            <summary>
            Raises events associated with a forced disconnect.
            </summary>
            <param name="client">The client that was forced to disconnect.</param>
            <param name="eventSource">The event source for the raised events.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestManager.RegisterEventMethod(System.Reflection.MethodInfo,System.IServiceProvider)">
            <summary>
            Tries to register a method associated with a signalling event.
            </summary>
            <param name="methodInfo">The reflected method.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestManager.UnregisterEventMethod(System.Reflection.MethodInfo)">
            <summary>
            Tries to unregister a method associated with a signalling event.
            </summary>
            <param name="methodInfo">The reflected method.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestManager.FireEvent(FM.LiveSwitch.Signalling.Server.EventType,FM.LiveSwitch.Signalling.Server.SignallingEventArgs,FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Fires an event handler.
            </summary>
            <param name="eventType">The type of event being fired.</param>
            <param name="args">The signalling event args.</param>
            <param name="messages">The messages (requests/responses) for which the event should be fired.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.RequestParser">
            <summary>
            Contains methods for parsing incoming signalling messages or publications.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.RequestParser.DeserializeMessages(System.String,System.Byte[],FM.LiveSwitch.Signalling.Message[]@,FM.LiveSwitch.Signalling.Publication[]@,FM.LiveSwitch.Signalling.Message[]@)">
            <summary>
            Deserializes the incoming messages or publications.
            </summary>
            <param name="json">The request data in JSON format.</param>
            <param name="bytes">The request data in binary format.</param>
            <param name="messages">The deserialized messages.</param>
            <param name="publications">The deserialized publications.</param>
            <param name="serviceMessages">The deserialized service messages.</param>
            <returns><c>true</c> if the deserialization succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ReturnDataEvents">
            <summary>
            The server-side events for the returnData extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ReturnDataEvents.RemovePublishResponseData(System.Object,FM.LiveSwitch.Signalling.Server.SignallingEventArgs)">
            <summary>
            Potentially removes data from the response to a publish request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.ReturnDataEvents.RemoveServiceResponseData(System.Object,FM.LiveSwitch.Signalling.Server.SignallingEventArgs)">
            <summary>
            Potentially removes data from the response to a service request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.ServiceInfo">
            <summary>
            Details about a service request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ServiceInfo.Channel">
            <summary>
            Gets or sets the channel over which the data is being serviced.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ServiceInfo.DataJson">
            <summary>
            Gets or sets the message data in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ServiceInfo.DataBytes">
            <summary>
            Gets or sets the message data in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ServiceInfo.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.ServiceInfo.ReturnData">
            <summary>
            Gets or sets whether data should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.State">
            <summary>
            A standard signalling server state object.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.Context">
            <summary>
            Gets or sets the context from which this state is processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.Handler">
            <summary>
            Gets or sets the request handler.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.RequestHeaders">
            <summary>
            Gets or sets the HTTP/WebSocket request headers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.DomainKey">
            <summary>
            Gets or sets the domain key associated with this request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.DomainName">
            <summary>
            Gets or sets the domain name associated with this request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.RequestJson">
            <summary>
            Gets or sets the request data to process (in JSON format).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.RequestBytes">
            <summary>
            Gets or sets the request data to process (in binary format).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.State.ClientReference">
            <summary>
            Gets or sets the client reference.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.StreamInfo">
            <summary>
            Details about a stream request or response.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.StreamInfo.IsTimeout">
            <summary>
            Whether or not the stream response is simply a timeout ping.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.StreamInfo.Channel">
            <summary>
            Gets or sets the channel to which the data is being sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.StreamInfo.DataJson">
            <summary>
            Gets or sets the message data.
            Must be valid JSON.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.StreamInfo.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SubscribeInfo">
            <summary>
            Details about a subscribe request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Channel">
            <summary>
            Gets or sets the channel being subscribed.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Channels"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Channels">
            <summary>
            Gets or sets the channels being subscribed.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Tag">
            <summary>
            Gets or sets the subscription tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.Presence">
            <summary>
            Gets or sets whether the payload contains presence information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindRecord">
            <summary>
            Gets or sets the record being bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindRecords">
            <summary>
            Gets or sets the records being bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindIsPrivate">
            <summary>
            Gets or sets whether the <see cref="P:FM.LiveSwitch.Signalling.Server.SubscribeInfo.BindRecords"/> are private.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.Subscriptions">
            <summary>
            A hash set of subscriptions (channel/tag pairs).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Subscriptions"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.#ctor(System.Collections.Generic.IEnumerable{FM.LiveSwitch.Signalling.Subscription})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.Subscriptions"/> class.
            </summary>
            <param name="subscriptions">The subscriptions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.Clone">
            <summary>
            Creates a deep clone of this subscriptions collection.
            </summary>
            <returns>A deep clone of this subscriptions collection.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.Subscriptions.Count">
            <summary>
            Gets the number of subscriptions in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.Add(FM.LiveSwitch.Signalling.Subscription)">
            <summary>
            Adds the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.Remove(FM.LiveSwitch.Signalling.Subscription)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.Clear">
            <summary>
            Removes all subscriptions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.ContainsChannel(System.String)">
            <summary>
            Determines whether the specified channel exists in the collection.
            </summary>
            <param name="channel">The channel.</param>
            <returns>
              <c>true</c> if the specified channel exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.GetSubscriptions">
            <summary>
            Gets the subscriptions in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.GetChannels">
            <summary>
            Gets the channels in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.ToJson">
            <summary>
            Serializes the subscriptions to JSON.
            </summary>
            <returns>The subscriptions in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.ToJson(FM.LiveSwitch.Signalling.Server.Subscriptions)">
            <summary>
            Serializes a subscriptions collection to JSON.
            </summary>
            <param name="subscriptions">The subscriptions to serialize.</param>
            <returns>The JSON-serialized subscriptions.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.Subscriptions.FromJson(System.String)">
            <summary>
            Deserializes a subscriptions collection from JSON.
            </summary>
            <param name="subscriptionsJson">The subscriptions to deserialize.</param>
            <returns>The deserialized subscriptions.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.UnbindInfo">
            <summary>
            Details about an unbind request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnbindInfo.Key">
            <summary>
            Gets or sets the record key being unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnbindInfo.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnbindInfo.Keys">
            <summary>
            Gets or sets the record keys being unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnbindInfo.Key"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo">
            <summary>
            Details about an unsubscribe request or response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.Channel">
            <summary>
            Gets or sets the channel being unsubscribed.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.Channels"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.Channels">
            <summary>
            Gets or sets the channels being unsubscribed.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.Tag">
            <summary>
            Gets or sets the subscription tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.UnbindKey">
            <summary>
            Gets or sets the record key being unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.UnbindKeys">
            <summary>
            Gets or sets the record keys being unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.UnsubscribeInfo.UnbindKey"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignallingClientReference">
            <summary>
            A server-side reference to a signalling client with methods for
            performing actions while impersonating the client.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.#ctor(FM.LiveSwitch.Signalling.Server.RequestHandler,FM.LiveSwitch.Signalling.Server.CachedClient)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingClientReference"/> class.
            </summary>
            <param name="handler">The request handler.</param>
            <param name="client">The cached client instance.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.#ctor(FM.LiveSwitch.Signalling.Server.RequestHandler,FM.LiveSwitch.Signalling.Server.ClientReference)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingClientReference"/> class.
            </summary>
            <param name="handler">The request handler.</param>
            <param name="clientReference">The client reference.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.#ctor(FM.LiveSwitch.Signalling.Server.RequestHandler,System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.Bindings,FM.LiveSwitch.Signalling.Server.Subscriptions)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingClientReference"/> class.
            </summary>
            <param name="handler">The request handler.</param>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain key.</param>
            <param name="bindings">The client's bindings.</param>
            <param name="subscriptions">The client's subscriptions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Publish(System.String,System.String,System.String)">
            <summary>
            Sends a publication directly as this client.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Publish(System.String,System.Byte[],System.String)">
            <summary>
            Sends a publication directly as this client.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Publish(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Sends a publication directly as this client.
            </summary>
            <param name="publication">The publication to send.</param>
            <returns>The completed publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Publish(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Sends an array of publications directly as this client.
            </summary>
            <param name="publications">The publications to send.</param>
            <returns>The completed publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Bind(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Binds the client to a public record.
            </summary>
            <param name="record">The record.</param>
            <returns><c>true</c> if the record was bound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.BindMany(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Binds the client to an array of public records.
            </summary>
            <param name="records">The records.</param>
            <returns><c>true</c> if the records were bound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Bind(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Binds the client to a record.
            </summary>
            <param name="record">The record.</param>
            <param name="isPrivate">Whether the record is private.</param>
            <returns><c>true</c> if the record was bound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.BindMany(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Binds the client to an array of records.
            </summary>
            <param name="records">The records.</param>
            <param name="isPrivate">Whether the records are private.</param>
            <returns><c>true</c> if the records were bound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Unbind(System.String)">
            <summary>
            Unbinds the client from a record.
            </summary>
            <param name="key">The record key.</param>
            <returns><c>true</c> if the record was unbound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.UnbindMany(System.String[])">
            <summary>
            Unbinds the client from an array of records.
            </summary>
            <param name="keys">The keys.</param>
            <returns><c>true</c> if the records were unbound; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Subscribe(System.String)">
            <summary>
            Subscribes the client to a channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns><c>true</c> if the channels were subscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.SubscribeMany(System.String[])">
            <summary>
            Subscribes the client to an array of channels.
            </summary>
            <param name="channels">The channels.</param>
            <returns><c>true</c> if the channels were subscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.SubscribeWithTag(System.String,System.String)">
            <summary>
            Subscribes the client to a channel with a subscription identifier.
            </summary>
            <param name="channel">The channel.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channels were subscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.SubscribeManyWithTag(System.String[],System.String)">
            <summary>
            Subscribes the client to an array of channels with a subscription identifier.
            </summary>
            <param name="channels">The channels.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channels were subscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.Unsubscribe(System.String)">
            <summary>
            Unsubscribes the client from a channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns><c>true</c> if the channels were unsubscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.UnsubscribeMany(System.String[])">
            <summary>
            Unsubscribes the client from an array of channels.
            </summary>
            <param name="channels">The channels.</param>
            <returns><c>true</c> if the channels were unsubscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.UnsubscribeWithTag(System.String,System.String)">
            <summary>
            Unsubscribes the client from a channel with a subscription identifier.
            </summary>
            <param name="channel">The channel.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channels were unsubscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingClientReference.UnsubscribeManyWithTag(System.String[],System.String)">
            <summary>
            Unsubscribes the client from an array of channels with a subscription identifier.
            </summary>
            <param name="channels">The channels.</param>
            <param name="tag">The subscription identifier.</param>
            <returns><c>true</c> if the channels were unsubscribed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignallingContextExtensions">
            <summary>
            Extensions to instances of <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingContextExtensions.SetDomainKey(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Sets the domain key for this signalling context.
            </summary>
            <param name="context">The signalling context.</param>
            <param name="domainKey">The domain key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingContextExtensions.GetDomainKey(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.IHeaderDictionary)">
            <summary>
            Gets the domain key from this signalling context.
            </summary>
            <param name="context">The signalling context.</param>
            <param name="headers">The header collection from the current HTTP context.</param>
            <returns>The domain key associated with the context.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingContextExtensions.SetDomainName(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            Sets the domain name for this signalling context.
            </summary>
            <param name="context">The signalling context.</param>
            <param name="domainName">The domain name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingContextExtensions.GetDomainName(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.IHeaderDictionary)">
            <summary>
            Gets the domain name from this signalling context.
            </summary>
            <param name="context">The signalling context.</param>
            <param name="headers">The header collection from the current HTTP context.</param>
            <returns>The domain name associated with the context.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignallingEventArgs">
            <summary>
            Arguments for methods decorated with <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Message">
            <summary>
            Gets the underlying/raw signalling message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.EventType">
            <summary>
            The type of event being raised.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Filter">
            <summary>
            The filter that produced this match.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.FilterType">
            <summary>
            The filter type that produced this match.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Execution">
            <summary>
            The execution context for this match.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Source">
            <summary>
            The originating source of the event.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Forced">
            <summary>
            Whether or not the event was forced by an external trigger and therefore ignores
            any changes to <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Successful" /> (cannot be cancelled).
            </summary>
            <remarks>
            <para>
            This property is <c>true</c> under very specific conditions:
            </para>
            <list>
            <item>
            A client disconnecting with subscribed channels forces an implicit unsubscribe
            of those channels. If a disconnecting client was subscribed to any channels,
            then after <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeDisconnect" /> with
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Client" /> is fired,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeUnsubscribe" /> and 
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.AfterUnsubscribe" /> with
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Client" /> will be fired sequentially with this property
            set to <c>true</c>.
            </item>
            <item>
            A client being disconnected due to idling forces a disconnect as well as an
            implicit unsubscribe of any subscribed channels. If an idling client was
            subscribed to any channels,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeDisconnect" />,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeUnsubscribe" />,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.AfterUnsubscribe" />,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.AfterDisconnect" /> with
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Idler" /> will be fired sequentially with this property
            set to <c>true</c>. If an idling client was not subscribed to any channels,
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeUnsubscribe" /> and
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.AfterUnsubscribe" /> will not fire.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Context">
            <summary>
            The current context for the request/response. This is set to <c>null</c>
            if <see cref="T:FM.LiveSwitch.Signalling.Server.EventSource" /> is <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Server" /> or
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Idler" />/ since they are local event sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.RequestHeaders">
            <summary>
            The request headers from the current request/response. This is set to
            <c>null</c> if <see cref="T:FM.LiveSwitch.Signalling.Server.EventSource" /> is <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Server" />
            or <see cref="F:FM.LiveSwitch.Signalling.Server.EventSource.Idler" />/ since they are local event sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.DomainKey">
            <summary>
            The domain key associated with the request/response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.DomainName">
            <summary>
            The domain name associated with the request/response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.RequestHandler">
            <summary>
            Gets the RequestHandler that handled this message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Client">
            <summary>
            Details about the client the event targets. This is set to <c>null</c> if
            the event does not target a client in existence or if the event is
            <see cref="F:FM.LiveSwitch.Signalling.Server.EventType.BeforeConnect"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Match">
            <summary>
            Details about the match from the filter expression (if supplied) for
            publish/service messages, subscribe/unsubscribe messages that match one channel,
            or bind/unbind messages that match one key.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Matches"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Matches">
            <summary>
            Details about the matches from the filter expression (if supplied) for
            subscribe/unsubscribe messages that match more than one channel or
            bind/unbind messages that match more than one key.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Match"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Batch">
            <summary>
            Details about the message batch currently being processed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Cancel(System.String)">
            <summary>
            Sets <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Successful"/> to <c>false</c> and sets
            <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Error"/> to the supplied error message if
            this is a "before" event. If this is an "after" event, a
            runtime exception (<see cref="T:System.NotSupportedException"/>) will be
            thrown since the operation has already completed.
            </summary>
            <param name="error">The error to store with the message.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Successful">
            <summary>
            Gets the flag that indicates whether the request should be
            processed. If the message represents a response, this indicates whether the
            processing was successful (and is always non-null). If set to <c>false</c>, the
            <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Error" /> property should be set to a friendly error
            message. This property is set to <c>false</c> by the <see cref="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Cancel(System.String)"/> method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Error">
            <summary>
            Gets the friendly error message if <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Successful" /> is
            <c>false</c>. This property is set by the <see cref="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Cancel(System.String)"/> method.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Timestamp">
            <summary>
            Gets or sets the date/time the message was processed on the server (in UTC/GMT).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.ClientId">
            <summary>
            Gets the request/response client ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.StreamId">
            <summary>
            Gets the request/response stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.UserId">
            <summary>
            Gets the request/response user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.DeviceId">
            <summary>
            Gets the request/response device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.MetaJson">
            <summary>
            Gets or sets the meta data for the request/response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.SubscribeInfo">
            <summary>
            Subscribe-specific details for subscribe requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.UnsubscribeInfo">
            <summary>
            Unsubscribe-specific details for unsubscribe requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.BindInfo">
            <summary>
            Bind-specific details for bind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.UnbindInfo">
            <summary>
            Unbind-specific details for unbind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.PublishInfo">
            <summary>
            Publish-specific details for publish requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.ServiceInfo">
            <summary>
            Service-specific details for service requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.StreamInfo">
            <summary>
            Stream-specific details for stream requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Type">
            <summary>
            Gets the type of the request/response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.Extensions">
            <summary>
            Gets or sets the message extensions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.GetExtensionValueJson(System.String)">
            <summary>
            Gets a serialized value stored in the extensions.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <returns>The extension value in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.SetExtensionValueJson(System.String,System.String)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsBindingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a bind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents a bind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsUnbindingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unbind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents an unbind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsSubscribingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a subscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents a subscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsUnsubscribingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unsubscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents an unsubscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsConnect">
            <summary>
            Detects whether this is a connect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsDisconnect">
            <summary>
            Detects whether this is a disconnect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsBind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsUnbind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsSubscribe">
            <summary>
            Detects whether this is a subscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsUnsubscribe">
            <summary>
            Detects whether this is an unsubscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsService">
            <summary>
            Detects whether this is a service request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventArgs.IsPublish">
            <summary>
            Detects whether this is a publish request/response.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute">
            <summary>
            Declares a static method to be invoked on <see cref="T:FM.LiveSwitch.Signalling.Server.RequestHandler" /> events related
            to the processing of signalling requests.
            </summary>
            <remarks>
            <para>
            Decorating a method with this attribute will cause it to attach to the specified
            <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.EventType" /> and execute whenever that <see cref="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.EventType" /> is raised.
            Decorated methods can be declared anywhere, but the recommended practice is to create
            a static containing class (i.e. <tt>SignallingEvents</tt>) that houses all decorated
            methods. If signalling is configured to run with <tt>targetedScan=true</tt> (see
            web.config options), then it is necessary to define the assembly-level
            <see cref="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute" /> for each class containing signalling
            event methods.
            </para>
            <para>
            Use of this attribute is intended for application developers writing custom code
            as well as third-party signalling extension developers. When writing a third-party
            extension for distribution, defining <see cref="T:FM.LiveSwitch.Signalling.Server.EventContainerAttribute" />
            is not optional.
            </para>
            <example>
            <code>
            [SignallingEvent(EventType.AfterConnect)]
            public static void MyMethod(object sender, SignallingEventArgs args)
            {
                // handle the event, deny the request, etc.
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.#ctor(FM.LiveSwitch.Signalling.Server.EventType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/> class.
            </summary>
            <param name="eventType">The event type(s) to which the method should attach.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.#ctor(FM.LiveSwitch.Signalling.Server.EventType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/> class.
            </summary>
            <param name="eventType">The event type(s) to which the method should attach.</param>
            <param name="filter">The filter (a template) for the method.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.#ctor(FM.LiveSwitch.Signalling.Server.EventType,System.String,FM.LiveSwitch.Signalling.Server.FilterType)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/> class.
            </summary>
            <param name="eventType">The event type(s) to which the method should attach.</param>
            <param name="filter">The filter (either a template or regex) for the method.</param>
            <param name="filterType">The type of the filter.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.#ctor(FM.LiveSwitch.Signalling.Server.EventType,System.String,FM.LiveSwitch.Signalling.Server.FilterType,FM.LiveSwitch.Signalling.Server.Execution)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/> class.
            </summary>
            <param name="eventType">The event type(s) the method will attach to.</param>
            <param name="filter">The filter (either a template or regex) for the method.</param>
            <param name="filterType">The type of the filter.</param>
            <param name="execution">The manner in which the method should be executed.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.#ctor(FM.LiveSwitch.Signalling.Server.EventType,System.String,FM.LiveSwitch.Signalling.Server.FilterType,FM.LiveSwitch.Signalling.Server.Execution,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/> class.
            </summary>
            <param name="eventType">The event type(s) to which the method should attach.</param>
            <param name="filter">The filter (either a template or regex) for the method.</param>
            <param name="filterType">The type of the filter.</param>
            <param name="execution">The manner in which the method should be executed.</param>
            <param name="order">The order with which the method should execute (lowest values execute first).</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.EventType">
            <summary>
            The event type(s) to which the method should attach.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.Filter">
            <summary>
            The filter for this particular method. For subscribes, unsubscribes, services, and
            publishes, this filters on the channel name. For binds and unbinds, this filters
            on the key. This property is ignored for connects and disconnects.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.FilterType">
            <summary>
            The type of the filter string passed into the attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.Execution">
            <summary>
            The manner in which the method should be executed.
            Defaults to <see cref="F:FM.LiveSwitch.Signalling.Server.Execution.Normal" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.Order">
            <summary>
            The order with which the method should execute (lowest values execute first).
            Defaults to 0.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute.IsEquivalent(FM.LiveSwitch.Signalling.Server.SignallingEventAttribute)">
            <summary>
            Determines whether the specified attribute is equivalent.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingEventMethodInfo.IsEquivalent(FM.LiveSwitch.Signalling.Server.SignallingEventMethodInfo)">
            <summary>
            Determines whether the specified information is equivalent.
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute">
            <summary>
            Used in conjunction with the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingEventAttribute"/>,
            configures a signalling event to require authentication and optionally,
            one of a defined set of roles.
            </summary>
            <remarks>
            <para>
            Decorating a method/class with this attribute will cause it to verify authentication
            before allowing access to the signalling event(s). If roles are specified, the currently
            logged-in user is allowed to proceed only if it belongs to one of the roles.
            </para>
            <example>
            <code>
            [SignallingSecurity("Administrator")]
            [SignallingEvent(EventType.BeforeConnect)]
            public static void Authenticate(object sender, SignallingEventArgs args)
            {
                // only users with the Administrator role will be allowed to connect
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute.RequiresAuthentication">
            <summary>
            Whether or not authentication is required for this method/class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute.Roles">
            <summary>
            The roles to which a user must belong for access.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute"/> class
            to define whether or not authentication is required to access the method/class.
            </summary>
            <param name="requiresAuthentication">if set to <c>true</c> [requires authentication].</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Server.SignallingSecurityAttribute"/> class
            to require authentication for this method/class along with membership in at
            least one of the specified role(s).
            </summary>
            <param name="roles">The roles to which a user must belong for access.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Advice">
            <summary>
            Advice class used in messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.WebSocket">
            <summary>
            Gets or sets advice specific to WebSocket clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.LongPolling">
            <summary>
            Gets or sets advice specific to long-polling clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Advice.CallbackPolling">
            <summary>
            Gets or sets advice specific to callback-polling clients.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.ToJson">
            <summary>
            Serializes the advice object to JSON.
            </summary>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.ToJson(FM.LiveSwitch.Signalling.Advice)">
            <summary>
            Serializes a single advice object to JSON.
            </summary>
            <param name="advice">The advice object to serialize.</param>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Advice.FromJson(System.String)">
            <summary>
            Deserializes a single advice object from JSON.
            </summary>
            <param name="adviceJson">The JSON advice object to deserialize.</param>
            <returns>The deserialized advice object.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BaseAdvice">
            <summary>
            Base advice class used in messages and for nested advice.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BaseAdvice"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Reconnect">
            <summary>
            Gets or sets how the client should attempt to re-establish a connection with the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Interval">
            <summary>
            Gets or sets the interval to wait before following the reconnect advice.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BaseAdvice.Hosts">
            <summary>
            Gets or sets the list of host names that may be used as alternate servers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.ToJson">
            <summary>
            Serializes the base advice object to JSON.
            </summary>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.ToJson(FM.LiveSwitch.Signalling.BaseAdvice)">
            <summary>
            Serializes a single base advice object to JSON.
            </summary>
            <param name="baseAdvice">The base advice object to serialize.</param>
            <returns>The serialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.FromJson(System.String)">
            <summary>
            Deserializes a single base advice object from JSON.
            </summary>
            <param name="baseAdviceJson">The JSON base advice object to deserialize.</param>
            <returns>The deserialized advice object.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.SerializeReconnect(FM.LiveSwitch.Signalling.Reconnect)">
            <summary>
            Serializes a reconnect value.
            </summary>
            <param name="reconnect">The reconnect value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BaseAdvice.DeserializeReconnect(System.String)">
            <summary>
            Deserializes a reconnect value.
            </summary>
            <param name="reconnectJson">The reconnect value JSON.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindArgs">
            <summary>
            Arguments for client bind requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
            <param name="record">The record to bind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindArgs.#ctor(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindArgs"/> class.
            </summary>
            <param name="records">The records to bind.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.Record">
            <summary>
            Gets or sets the record to bind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.Records">
            <summary>
            Gets or sets the records to bind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindArgs.IsPrivate">
            <summary>
            Gets or sets whether the record(s) are private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindFailureArgs">
            <summary>
            Arguments for bind failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.Record">
            <summary>
            Gets the record to which the client failed to be bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindFailureArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.Records">
            <summary>
            Gets the records to which the client failed to be bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindFailureArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindFailureArgs.IsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindFailureArgs.#ctor(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindFailureArgs"/> class.
            </summary>
            <param name="records">The records to which the client failed to be bound.</param>
            <param name="isPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Binding">
            <summary>
            A key/value/privacy identifier for a client binding.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Binding.Record">
            <summary>
            Gets or sets the binding record.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Binding.IsPrivate">
            <summary>
            Gets or sets whether the record is private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.#ctor(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Binding" /> class.
            </summary>
            <param name="record">The binding record.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.#ctor(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Binding" /> class.
            </summary>
            <param name="record">The binding record.</param>
            <param name="isPrivate">Whether or not the record is private.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.Duplicate">
            <summary>
            Creates a deep clone of this binding.
            </summary>
            <returns>A deep clone of this binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJson(FM.LiveSwitch.Signalling.Binding)">
            <summary>
            Serializes a binding to JSON.
            </summary>
            <param name="binding">A binding to serialize.</param>
            <returns>A JSON-serialized binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.FromJson(System.String)">
            <summary>
            Deserializes a binding from JSON.
            </summary>
            <param name="bindingJson">A JSON string to deserialize.</param>
            <returns>A deserialized binding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.ToJsonArray(FM.LiveSwitch.Signalling.Binding[])">
            <summary>
            Serializes a list of bindings to JSON.
            </summary>
            <param name="bindings">A list of bindings to serialize.</param>
            <returns>A JSON-serialized array of bindings.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Binding.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of bindings from JSON.
            </summary>
            <param name="bindingsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of bindings.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.BindSuccessArgs">
            <summary>
            Arguments for bind success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Record">
            <summary>
            Gets the record to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Records">
            <summary>
            Gets the records to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.BindSuccessArgs.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.BindSuccessArgs.IsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.BindSuccessArgs.#ctor(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.BindSuccessArgs"/> class.
            </summary>
            <param name="records">The records to which the client was bound.</param>
            <param name="isPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Client">
            <summary>
            A signalling client, used to create a persistent
            connection to a signalling server for the purposes
            of receiving JSON and binary data in real-time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DisconnectException">
            <summary>
            Gets the disconnect exception, which is set if
            the connection is reset abnormally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.ClientId">
            <summary>
            Gets or sets the client ID. The client ID
            is generated by the server and remains
            constant for the lifetime of this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamId">
            <summary>
            Gets or sets the stream ID. The stream ID
            is generated by the server and changes each
            time the client reconnects.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.AuthToken">
            <summary>
            Gets or sets the auth token. The auth token
            is generated by the server and changes each
            time the client reconnects.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.UserId">
            <summary>
            Gets or sets the user ID. The user ID
            can be set before connecting to the server
            to allow client events to be associated
            with a particular user.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DeviceId">
            <summary>
            Gets or sets the device ID. The device ID
            can be set before connecting to the server
            to allow client events to be associated
            with a particular device.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.ServerTimeout">
            <summary>
            Gets or sets the number of milliseconds before the server takes action to discover
            if this client is idling or still active.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnStateChange">
            <summary>
            Raised when the state changes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamRequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler for streaming connections, typically
            ending with sync.ashx.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.Synchronous">
            <summary>
            Gets or sets whether or not to execute client methods synchronously. This approach is not
            recommended for UI threads, as it will block until the request completes.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.Token">
            <summary>
            Gets or sets the token sent with each request for load balancing purposes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.StreamRequestTimeout">
            <summary>
            Gets the number of milliseconds to wait for a stream request to
            return a response before it is aborted and another stream request is attempted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Client.DisableWebSockets">
            <summary>
            Gets or sets whether to disable WebSocket protocol support and use long-polling,
            even if the server is capable of accepting WebSocket requests.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnClientChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved client channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDeviceChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved device channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUserChannelReceive">
            <summary>
            Raised whenever a message is received on the reserved user channel.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerBind">
            <summary>
            Raised whenever the server binds
            the client to a record or set of records.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerUnbind">
            <summary>
            Raised whenever the server unbinds
            the client from a record or set of records.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerSubscribe">
            <summary>
            Raised whenever the server subscribes
            the client to a channel or set of channels.
            The OnReceive and OnPresence properties of
            <see cref="T:FM.LiveSwitch.Signalling.ServerSubscribeArgs"/> should be set
            if you want to process incoming messages and/or
            presence notifications.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServerUnsubscribe">
            <summary>
            Raised whenever the server unsubscribes
            the client from a channel or set of channels.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectSuccess">
            <summary>
            Raised whenever a client successfully connects.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectFailure">
            <summary>
            Raised whenever a client fails to connect.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeSuccess">
            <summary>
            Raised whenever a client successfully subscribes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeFailure">
            <summary>
            Raised whenever a client fails to subscribe.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindSuccess">
            <summary>
            Raised whenever a client successfully binds.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindFailure">
            <summary>
            Raised whenever a client fails to bind.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeSuccess">
            <summary>
            Raised whenever a client successfully unsubscribes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeFailure">
            <summary>
            Raised whenever a client fails to unsubscribe.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindSuccess">
            <summary>
            Raised whenever a client successfully unbinds.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindFailure">
            <summary>
            Raised whenever a client fails to unbind.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectComplete">
            <summary>
            Raised whenever a client completes a disconnect.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishSuccess">
            <summary>
            Raised whenever a client successfully publishes.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishFailure">
            <summary>
            Raised whenever a client fails to publish.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceSuccess">
            <summary>
            Raised whenever a client successfully services.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceFailure">
            <summary>
            Raised whenever a client fails to service.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
            <param name="sharedLock">Shared application lock object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler for non-streaming requests.</param>
            <param name="streamRequestUrl">The absolute URL of the signalling server request handler for streaming requests.</param>
            <param name="sharedLock">Shared application lock object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GenerateToken">
            <summary>
            Generates a new token based on the current date/time.
            </summary>
            <returns>The generated token.</returns>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectRequest">
            <summary>
            Raised before a client connect request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectResponse">
            <summary>
            Raised after a client connect response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnConnectEnd">
            <summary>
            Raised after a client connect ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectRequest">
            <summary>
            Raised before a client disconnect request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectResponse">
            <summary>
            Raised after a client disconnect response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnDisconnectEnd">
            <summary>
            Raised after a client disconnect ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindRequest">
            <summary>
            Raised before a client bind request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindResponse">
            <summary>
            Raised after a client bind response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnBindEnd">
            <summary>
            Raised after a client bind ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientBindEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindRequest">
            <summary>
            Raised before a client unbind request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindResponse">
            <summary>
            Raised after a client unbind response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnbindEnd">
            <summary>
            Raised after a client unbind ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeRequest">
            <summary>
            Raised before a client subscribe request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeResponse">
            <summary>
            Raised after a client subscribe response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnSubscribeEnd">
            <summary>
            Raised after a client subscribe ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeRequest">
            <summary>
            Raised before a client unsubscribe request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeResponse">
            <summary>
            Raised after a client unsubscribe response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnUnsubscribeEnd">
            <summary>
            Raised after a client unsubscribe ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishRequest">
            <summary>
            Raised before a client publish request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishResponse">
            <summary>
            Raised after a client publish response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnPublishEnd">
            <summary>
            Raised after a client publish ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceRequest">
            <summary>
            Raised before a client service request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceResponse">
            <summary>
            Raised after a client service response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Client.OnServiceEnd">
            <summary>
            Raised after a client service ends. This event is
            designed to support extensions by allowing modifications to be applied
            to the client after processing.
            </summary>
            <parameter name="source">The client that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SetCustomOnReceive(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Sets a callback to be invoked whenever messages are received on the specified
            channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> subscribe you to a channel. Rather, it caches a
            callback to be executed when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages will be received.</param>
            <param name="onReceive">The callback to invoke when a message is received.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SetCustomOnReceiveWithTag(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Sets a callback to be invoked whenever messages are received on the specified
            channel. The tag allows multiple callbacks to be registered for
            the same channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> subscribe you to a channel. Rather, it caches a
            callback to be executed when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages will be received.</param>
            <param name="tag">The identifier for this callback.</param>
            <param name="onReceive">The callback to invoke when a message is received.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetCustomOnReceive(System.String)">
            <summary>
            Gets the callback invoked whenever messages are received on the specified
            channel.
            </summary>
            <param name="channel">The channel over which the messages are being received.</param>
            <returns>The callback invoked when a message is received, if a callback
            is set; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetCustomOnReceiveWithTag(System.String,System.String)">
            <summary>
            Gets the callback invoked whenever messages are received on the specified
            channel.  The tag denotes a specific callback.
            </summary>
            <param name="channel">The channel over which the messages are being received.</param>
            <param name="tag">The identifier for the callback.</param>
            <returns>The callback invoked when a message is received, if a callback
            is set; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsetCustomOnReceive(System.String)">
            <summary>
            Unsets a callback invoked whenever messages are received on the specified
            channel.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> unsubscribe you from a channel. Rather, it stops the
            callback from executing when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages are being received.</param>
            <returns><c>true</c> if the callback was previously set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsetCustomOnReceiveWithTag(System.String,System.String)">
            <summary>
            Unsets a callback invoked whenever messages are received on the specified
            channel.  The tag denotes a specific callback.
            </summary>
            <remarks>
            <para>
            This method does <b>not</b> unsubscribe you from a channel. Rather, it stops the
            callback from executing when messages are received on a particular
            channel.
            </para>
            </remarks>
            <param name="channel">The channel over which the messages are being received.</param>
            <param name="tag">The identifier for this callback.</param>
            <returns><c>true</c> if the callback was previously set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Connect">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Connect(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            <param name="connectArgs">The connect arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Disconnect">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Disconnect(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            <param name="disconnectArgs">The disconnect arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Bind(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="bindArgs">The bind arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Unbind(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="unbindArgs">The unbind arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Subscribe(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Unsubscribe(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="unsubscribeArgs">The unsubscribe arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Publish(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="publishArgs">The publish arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.Service(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="serviceArgs">The service arguments.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.StartBatch">
            <summary>
            Flags the start of a batch of requests to be sent together to the server.
            </summary>
            <remarks>
            This is used in conjunction with <see cref="M:FM.LiveSwitch.Signalling.Client.EndBatch" />, which flags
            the end of a batch of requests and starts sending them to the server. Batching
            is used to optimize round-trips to the server by reducing the overhead
            associated with creating multiple HTTP requests.
            </remarks>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.InBatch">
            <summary>
            Gets whether or not requests are currently being batched.
            </summary>
            <returns><c>true</c> if requests are being batched; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.EndBatch">
            <summary>
            Flags the end of a batch of requests and starts sending them to the server.
            </summary>
            <remarks>
            This is used in conjunction with <see cref="M:FM.LiveSwitch.Signalling.Client.StartBatch" />, which must
            be called first to flag the start of a batch of requests to be sent together
            to the server. Batching is used to optimize round-trips to the server by
            reducing the overhead associated with creating multiple HTTP requests.
            </remarks>
            <returns>The client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.CreateFailureResponse(FM.LiveSwitch.Signalling.InputArgs,System.String)">
            <summary>
            Creates failure response arguments.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            <param name="error">The error.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseAction``1(FM.LiveSwitch.Action1{``0},``0,System.String)">
            <summary>
            Raises an action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback">The callback.</param>
            <param name="args">The arguments.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseFunction``2(FM.LiveSwitch.Function1{``0,``1},``0,System.String)">
            <summary>
            Raises a function.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="callback">The callback.</param>
            <param name="args">The arguments.</param>
            <param name="source">The source.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseSubscribeFailure(FM.LiveSwitch.Signalling.SubscribeArgs,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises the subscribe failure.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String)">
            <summary>
            Raises an event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseRequestEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String)">
            <summary>
            Raises a request event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseResponseEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises a response event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.RaiseEndEvent``1(FM.LiveSwitch.Action2{FM.LiveSwitch.Signalling.Client,``0},``0,System.String,FM.LiveSwitch.Signalling.ClientResponse)">
            <summary>
            Raises an end event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMethod">The event method.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="response">The response arguments.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetSubscribedChannels">
            <summary>
            Gets a list of all the channels to which the client is currently subscribed.
            </summary>
            <returns>A list of all the channels to which the client is currently subscribed</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetSubscribedChannels(System.String)">
            <summary>
            Gets a list of all the channels to which the client is currently subscribed.
            </summary>
            <param name="tag">The subscription tag identifier.</param>
            <returns>
            A list of all the channels to which the client is currently subscribed
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.GetBoundRecords">
            <summary>
            Gets a collection of all the records to which the client is currently bound.
            </summary>
            <returns>A collection of all the records to which the client is currently bound</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ConnectAsync">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ConnectAsync(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Creates a persistent streaming connection to the signalling server.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="connectArgs">The connect arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.DisconnectAsync">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.DisconnectAsync(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Destroys the persistent streaming connection to the signalling server.
            Note that this will override OnComplete.
            </summary>
            <param name="disconnectArgs">The disconnect arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="bindArgs">The bind arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="record">The record to bind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.BindAsync(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Adds key/value metadata to the client record for the lifetime of the connection.
            </summary>
            <param name="records">The records to bind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Removes key/value metadata from the client record.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="unbindArgs">The unbind arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(System.String)">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="key">The key to unbind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnbindAsync(System.String[])">
            <summary>
            Removes key/value metadata from the client record.
            </summary>
            <param name="keys">The keys to unbind.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="subscribeArgs">The subscribe arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[])">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String)">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.SubscribeAsync(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Adds a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="unsubscribeArgs">The unsubscribe arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String[])">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String,System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.UnsubscribeAsync(System.String[],System.String)">
            <summary>
            Removes a listener for incoming messages on one or more channels.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="publishArgs">The publish arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.Byte[])">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.String,System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.PublishAsync(System.String,System.Byte[],System.String)">
            <summary>
            Broadcasts data to all client subscribers on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Sends data to the server on a given channel.
            Note that this will override OnSuccess/OnFailure.
            </summary>
            <param name="serviceArgs">The service arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.Byte[])">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.String,System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Client.ServiceAsync(System.String,System.Byte[],System.String)">
            <summary>
            Sends data to the server on a given channel.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientArgs">
            <summary>
            Base arguments for <see cref="P:FM.LiveSwitch.Signalling.ClientArgs.Client" />-triggered events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientArgs.Client">
            <summary>
            Gets or sets the <see cref="P:FM.LiveSwitch.Signalling.ClientArgs.Client" /> triggering the event.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBase">
            <summary>
            Base class for signalling clients and publishers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler, typically
            ending with sync.ashx.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestTimeout">
            <summary>
            Gets or sets the number of milliseconds to wait for a standard request to
            return a response before it is aborted and another request is attempted.
            Defaults to 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.RequestMaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed for a standard request.
            Defaults to 0.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DomainKey">
            <summary>
            Gets or sets the domain key for sandboxing connections to the server.
            Defaults to "11111111-1111-1111-1111-111111111111".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DomainName">
            <summary>
            Gets or sets the domain name to send as the <tt>Referrer</tt> with each request.
            Defaults to "localhost".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.DisableBinary">
            <summary>
            Gets or sets whether to disable the transmission of binary payloads
            as binary on the wire. If set to <c>true</c>, binary payloads will
            be sent over the wire as base64-encoded strings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientBase.ConcurrencyMode">
            <summary>
            Gets or sets a flag indicating the level of concurrency in the current process.
            The intended use of this property is to lighten the processor load when hundreds
            or thousands of instances are created in a single process for the purposes of
            generating load for testing.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnUnhandledException">
            <summary>
            Raised when an exception is thrown in user code and not handled,
            typically in a callback or event handler.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnRequestCreated">
            <summary>
            Raised whenever a new request is created
            and about to be transferred to the server. This is a good place to read
            or modify outgoing messages.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnResponseReceived">
            <summary>
            Raised whenever a new response is received
            and about to be processed by the client. This is a good place to read
            or modify incoming messages.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpRequestCreated">
            <summary>
            Raised whenever an underlying HTTP request
            has been created and is about to be transferred to the server. This is a
            good place to add headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpResponseReceived">
            <summary>
            Raised whenever an underlying HTTP response
            has been received and is about to be processed by the client. This is a
            good place to read headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnRequestCreated(FM.LiveSwitch.Signalling.MessageRequestCreatedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnRequestCreated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnResponseReceived(FM.LiveSwitch.Signalling.MessageResponseReceivedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnResponseReceived"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnHttpRequestCreated(FM.LiveSwitch.HttpRequestCreatedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpRequestCreated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.InternalOnHttpResponseReceived(FM.LiveSwitch.HttpResponseReceivedArgs)">
            <summary>
            Wrapper for the <see cref="E:FM.LiveSwitch.Signalling.ClientBase.OnHttpResponseReceived"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBase"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.CreateHeaders">
            <summary>
            Creates an initial set of headers, including
            the domain key and domain name.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.SanitizeDomainName(System.String)">
            <summary>
            Takes a domain name and ensures it starts with http:// or https://.
            </summary>
            <param name="domainName">The domain name to sanitize.</param>
            <returns>The sanitized domain name.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBase.RaiseUnhandledException(System.Exception)">
            <summary>
            Raises an unhandled exception.
            </summary>
            <param name="exception">The unhandled exception.</param>
            <returns><c>true</c> if the exception was handled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindEndArgs">
            <summary>
            Arguments for OnBindEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindEndArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs">
            <summary>
            Arguments forClient.OnBindRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindRequestArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs">
            <summary>
            Arguments for OnBindResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientBindResponseArgs.#ctor(FM.LiveSwitch.Signalling.BindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientBindResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs">
            <summary>
            Arguments for OnConnectEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectEndArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs">
            <summary>
            Arguments for OnConnectRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectRequestArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs">
            <summary>
            Arguments for OnConnectResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientConnectResponseArgs.#ctor(FM.LiveSwitch.Signalling.ConnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientConnectResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs">
            <summary>
            Arguments for OnDisconnectEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs">
            <summary>
            Arguments for OnDisconnectRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs">
            <summary>
            Arguments for OnDisconnectResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs.#ctor(FM.LiveSwitch.Signalling.DisconnectArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientDisconnectResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientEndArgs">
            <summary>
            Base arguments for client events that occur
            after a response has been processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgs.Message">
            <summary>
            Gets or sets the message received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            after a response has been processed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientEndArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs">
            <summary>
            Arguments for OnPublishEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishEndArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs">
            <summary>
            Arguments for OnPublishRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishRequestArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs">
            <summary>
            Arguments for Client.OnPublishResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientPublishResponseArgs.#ctor(FM.LiveSwitch.Signalling.PublishArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientPublishResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequest">
            <summary>
            Internal class used to hold details about a client request queued for
            delivery to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequest.Message">
            <summary>
            Gets or sets the request the client wishes to send to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequest.Callback">
            <summary>
            Gets or sets the callback to invoke after receiving a response from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequestArgs">
            <summary>
            Base arguments for client events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequestArgs.Cancel">
            <summary>
            Gets or sets whether or not to cancel the request.
            If set to <c>true</c>, the request will not be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientRequestArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponse">
            <summary>
            The internal representation of data received in response to a client request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Message">
            <summary>
            Gets or sets the first response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Messages">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.Exception">
            <summary>
            Gets or sets the exception generated by the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.ErrorCode">
            <summary>
            Gets the error code value, if the exception was generated by the signalling engine; otherwise -1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponse.ErrorMessage">
            <summary>
            Gets the error message value, if the exception was generated by the signalling engine; otherwise <c>null</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponseArgs">
            <summary>
            Base arguments for client events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgs.Message">
            <summary>
            Gets or sets the message received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1">
            <summary>
            Generic base arguments for client events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1.MethodArgs">
            <summary>
            Gets or sets the original arguments passed into the client method.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientResponseArgsGeneric`1"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSendState">
            <summary>
            The internal state of a client request batch sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.Requests">
            <summary>
            Gets or sets the requests to be sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.RequestMapping">
            <summary>
            Gets or sets the mapping of request IDs to requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ClientSendState.IsStream">
            <summary>
            Gets or sets whether this is a streaming request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs">
            <summary>
            Arguments for Client.OnServiceEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceEndArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs">
            <summary>
            Arguments for Client.OnServiceRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceRequestArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs">
            <summary>
            Arguments for OnServiceResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientServiceResponseArgs.#ctor(FM.LiveSwitch.Signalling.ServiceArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientServiceResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientState">
            <summary>
            The state of a signalling client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.New">
            <summary>
            Indicates that the client is new and has not yet connected to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Connecting">
            <summary>
            Indicates that the client is connecting to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Connected">
            <summary>
            Indicates that the client is connected to the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Disconnecting">
            <summary>
            Indicates that the client is disconnecting from the server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ClientState.Disconnected">
            <summary>
            Indicates that the client has disconnected from the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs">
            <summary>
            Arguments for OnSubscribeEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs">
            <summary>
            Arguments for OnSubscribeRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs">
            <summary>
            Arguments for OnSubscribeResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs.#ctor(FM.LiveSwitch.Signalling.SubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientSubscribeResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs">
            <summary>
            Arguments for OnUnbindEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindEndArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs">
            <summary>
            Arguments for OnUnbindRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs">
            <summary>
            Arguments for OnUnbindResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs.#ctor(FM.LiveSwitch.Signalling.UnbindArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnbindResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs">
            <summary>
            Arguments for OnUnsubscribeEnd.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeEndArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs">
            <summary>
            Arguments for OnUnsubscribeRequest.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeRequestArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs">
            <summary>
            Arguments for OnUnsubscribeResponse.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs.#ctor(FM.LiveSwitch.Signalling.UnsubscribeArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ClientUnsubscribeResponseArgs"/> class.
            </summary>
            <param name="methodArgs">The method arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.CompleteArgs">
            <summary>
            Base arguments for client "OnComplete" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConcurrencyMode">
            <summary>
            Various behaviour modes for the streaming connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Low">
            <summary>
            Indicates that the client will not be competing with
            many other clients within the same process.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.High">
            <summary>
            Indicates that the client will have to compete with
            hundreds or thousands of other clients within the same
            process for processor time.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Default">
            <summary>
            Same as <see cref="F:FM.LiveSwitch.Signalling.ConcurrencyMode.Low"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectArgs">
            <summary>
            Arguments for client connect requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectFailureArgs">
            <summary>
            Arguments for connect failure callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectionType">
            <summary>
            Allowed connection type values for <see cref="T:FM.LiveSwitch.Signalling.Message">Messages</see>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.WebSocket">
            <summary>
            Indicates that the WebSocket connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.LongPolling">
            <summary>
            Indicates that the long-polling connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.CallbackPolling">
            <summary>
            Indicates that the callback-polling connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.IFrame">
            <summary>
            (Unsupported) Indicates that the iframe connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.Flash">
            <summary>
            (Unsupported) Indicates that the flash connection type is supported.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.ConnectionType.NotSet">
            <summary>
            Indicates that the value was not set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ConnectSuccessArgs">
            <summary>
            Arguments for connect success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ConnectSuccessArgs.ConnectionType">
            <summary>
            Gets or sets the connection type of the stream.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Defaults">
            <summary>
            A collection of read-only default values for signalling.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Defaults.DomainKey">
            <summary>
            Gets the default domain key ("11111111-1111-1111-1111-111111111111").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Defaults.DomainName">
            <summary>
            Gets the default domain name ("localhost").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DeferredStreamState">
            <summary>
            The state of a deferred stream call.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DeferredStreamState.ReceivedMessages">
            <summary>
            Gets or sets whether the client received messages.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DisconnectArgs">
            <summary>
            Arguments for client disconnect requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DisconnectArgs.OnComplete">
            <summary>
            Gets or sets the callback to invoke after the disconnection is complete.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.DisconnectCompleteArgs">
            <summary>
            Arguments for disconnect complete callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.DisconnectCompleteArgs.Exception">
            <summary>
            Gets or sets the exception that was thrown while disconnecting.
            Will be <c>null</c> if the disconnect was performed gracefully.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Extensible">
            <summary>
            <para>
            Base class that defines the properties and methods shared by any class that
            is considered extensible by the Bayeux specification.
            </para>
            <para>
            The Bayeux specification defines the Ext field, which allows custom data to be
            stored with a message using a namespaced key to access the information. This class
            provides methods that store and retrieve JSON data stored in this manner. For example,
            the <see cref="P:FM.LiveSwitch.Signalling.Extensible.MetaJson" /> property uses the Ext field to store its value
            using "fm.meta" as a key.
            </para>
            <para>
            In addition, classes which inherit from <see cref="T:FM.LiveSwitch.Signalling.Extensible" /> can store
            dynamic property values for local read/write access without the need to serialize
            to JSON. This can aid greatly in the
            development of third-party extensions to signalling. Custom information can be stored
            with method arguments in the "before" event and read out again for further
            processing in the "after" event.
            </para>
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.MetaExtensionName">
            <summary>
            Gets the reserved extension name for message/publication meta-data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ReturnDataExtensionName">
            <summary>
            Gets the reserved extension name for whether or not data should be included in the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.RemoteClientExtensionName">
            <summary>
            Gets the reserved extension name for details about a remote client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.SubscribedClientsExtensionName">
            <summary>
            Gets the reserved extension name for details about subscribed clients.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ServerTimeoutExtensionName">
            <summary>
            Gets the reserved extension name for the server-defined timeout interval.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.UserIdExtensionName">
            <summary>
            Gets the reserved extension name for the user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.DeviceIdExtensionName">
            <summary>
            Gets the reserved extension name for the device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.StreamIdExtensionName">
            <summary>
            Gets the reserved extension name for the stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.AuthTokenExtensionName">
            <summary>
            Gets the reserved extension name for the auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.TagExtensionName">
            <summary>
            Gets the reserved extension name for tags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.PresenceExtensionName">
            <summary>
            Gets the reserved extension name for requesting presence.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.IsPrivateExtensionName">
            <summary>
            Gets the reserved extension name for indicating privacy.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.AcknowledgementExtensionName">
            <summary>
            Gets the reserved extension name for acknowledgement of received messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ServerActionsExtensionName">
            <summary>
            Gets the reserved extension name for passing back server actions to a client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.DisableBinaryExtensionName">
            <summary>
            Gets the reserved extension name for disabling the transmission of binary data as binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.Extensions">
            <summary>
            Gets or sets the internal extensions collection.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ExtensionCount">
            <summary>
            Gets the number of extensions stored with this instance.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.ExtensionNames">
            <summary>
            Gets the names of the extensions stored with this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.CopyExtensions(FM.LiveSwitch.Signalling.Extensible)">
            <summary>
            Copies extension values from one instance into this instance.
            </summary>
            <param name="extensible">The object with the extensions to copy.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SetExtensionValueJson(System.String,System.String)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SetExtensionValueJson(System.String,System.String,System.Boolean)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
            <param name="validate">Whether or not to validate the JSON value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.GetExtensionValueJson(System.String)">
            <summary>
            Gets a serialized value stored in the extensions.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <returns>The extension value in JSON format.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensible.MetaJson">
            <summary>
            Gets or sets meta-data associated with the message/publication.  Must be valid JSON. 
            </summary>
            <remarks>
            Use this property to define meta-data about the request itself, such as
            authentication details, etc.
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetKey(System.String[])">
            <summary>
            Gets the first key from an array of keys.
            </summary>
            <param name="keys">The keys to scan.</param>
            <returns>The first key.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKey(System.String)">
            <summary>
            Converts a key to a validated key array.
            </summary>
            <param name="key">The key to convert.</param>
            <returns>The validated key array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKey(System.String,System.Boolean)">
            <summary>
            Converts a key to a validated key array.
            </summary>
            <param name="key">The key to convert.</param>
            <param name="validate">Whether or not to validate the record.</param>
            <returns>The validated key array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetKeys(System.String[])">
            <summary>
            Converts an array of keys to itself.
            </summary>
            <param name="keys">The array of keys.</param>
            <returns>The array of keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKeys(System.String[])">
            <summary>
            Converts an array of keys to a validated key array.
            </summary>
            <param name="keys">The array of keys.</param>
            <returns>The array of validated keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetKeys(System.String[],System.Boolean)">
            <summary>
            Converts an array of keys to a validated key array.
            </summary>
            <param name="keys">The array of keys.</param>
            <param name="validate">Whether or not to validate the records.</param>
            <returns>The array of validated keys.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetRecord(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Gets the first record from an array of records.
            </summary>
            <param name="records">The records to scan.</param>
            <returns>The first record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecord(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Converts a record to a validated record array.
            </summary>
            <param name="record">The record to convert.</param>
            <returns>The validated record array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecord(FM.LiveSwitch.Signalling.Record,System.Boolean)">
            <summary>
            Converts a record to a validated record array.
            </summary>
            <param name="record">The record to convert.</param>
            <param name="validate">Whether or not to validate the record.</param>
            <returns>The validated record array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetRecords(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Converts an array of records to itself.
            </summary>
            <param name="records">The array of records.</param>
            <returns>The array of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecords(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Converts an array of records to an array of validated records.
            </summary>
            <param name="records">The array of records.</param>
            <returns>The array of validated records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetRecords(FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Converts an array of records to an array of validated records.
            </summary>
            <param name="records">The array of records.</param>
            <param name="validate">Whether or not to validate the records.</param>
            <returns>The array of validated records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetChannel(System.String[])">
            <summary>
            Gets the first channel from an array of channels.
            </summary>
            <param name="channels">The channels to scan.</param>
            <returns>The first channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannel(System.String)">
            <summary>
            Converts a channel to a validated channel array.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The validated channel array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannel(System.String,System.Boolean)">
            <summary>
            Converts a channel to a validated channel array.
            </summary>
            <param name="channel">The channel to convert.</param>
            <param name="validate">Whether or not to validate the channel.</param>
            <returns>The validated channel array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedGetChannels(System.String[])">
            <summary>
            Converts an array of channels to itself.
            </summary>
            <param name="channels">The array of channels.</param>
            <returns>The array of channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannels(System.String[])">
            <summary>
            Converts an array of channels to an array of validated channels.
            </summary>
            <param name="channels">The array of channels.</param>
            <returns>The array of validated channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.SharedSetChannels(System.String[],System.Boolean)">
            <summary>
            Converts an array of channels to an array of validated channels.
            </summary>
            <param name="channels">The array of channels.</param>
            <param name="validate">Whether or not to validate the channels.</param>
            <returns>The array of validated channels.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateChannel(System.String,System.String@)">
            <summary>
            Validates a channel.
            </summary>
            <param name="channel">The channel to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateRecord(FM.LiveSwitch.Signalling.Record,System.String@)">
            <summary>
            Validates a record.
            </summary>
            <param name="record">The record to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensible.ValidateKey(System.String,System.String@)">
            <summary>
            Validates a key.
            </summary>
            <param name="key">The key to validate.</param>
            <param name="error">The error, if validation failed.</param>
            <returns><c>true</c> if validation succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Extensions">
            <summary>
            The extensions library that wraps the Bayeux Ext field, used with instances of classes
            that derive from <see cref="T:FM.LiveSwitch.Signalling.Extensible" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensions.Count">
            <summary>
            Gets the number of extensions in the library.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Extensions.Names">
            <summary>
            Gets the names of the extensions in the library.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Extensions"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.GetValueJson(System.String)">
            <summary>
            Gets a serialized value stored in the extensions.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <returns>The extension value (in JSON format).</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.SetValueJson(System.String,System.String)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.SetValueJson(System.String,System.String,System.Boolean)">
            <summary>
            Stores a serialized value in the extensions.  Must be valid JSON.
            </summary>
            <param name="name">Fully-qualified extension name.</param>
            <param name="valueJson">The extension value in valid JSON format.</param>
            <param name="validate">Whether or not to validate the JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.ToJson">
            <summary>
            Serializes the extensions library to JSON.
            </summary>
            <returns>The serialized extensions library.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.ToJson(FM.LiveSwitch.Signalling.Extensions)">
            <summary>
            Serializes a single extensions library to JSON.
            </summary>
            <param name="extensions">The extensions library to serialize.</param>
            <returns>The serialized extensions library.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Extensions.FromJson(System.String)">
            <summary>
            Deserializes a single extensions library from JSON.
            </summary>
            <param name="extensionsJson">The JSON extensions library to deserialize.</param>
            <returns>The deserialized extensions library.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.FailureArgs">
            <summary>
            Base arguments for client "OnFailure" callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.ErrorCode">
            <summary>
            Gets the error code value, if the exception was generated by the signalling engine; otherwise -1.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.FailureArgs.ErrorMessage">
            <summary>
            Gets the error message value, if the exception was generated by the signalling engine; otherwise <c>null</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.HttpMessageTransfer">
            <summary>
            Defines methods for transferring messages using an instance of <see cref="T:FM.LiveSwitch.HttpWebRequestTransfer"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.HttpMessageTransfer"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.HttpMessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.InputArgs">
            <summary>
            Base input arguments for signalling client methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestUrl">
            <summary>
            Gets or sets the absolute URL of the signalling request handler, typically
            ending with sync.ashx, to use for this request. Overrides the
            client-level setting. This request will be sent using the
            StreamRequestTransfer class (especially relevant if
            WebSockets are in use).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestTimeout">
            <summary>
            Gets or sets the request timeout to use for this request. This will
            override any client-level request timeout settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.RequestMaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed for this request.
            This will override any client-level maximum retry settings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.InputArgs.Synchronous">
            <summary>
            Gets or sets whether the request should be executed asynchronously.
            If <c>true</c>, the request will be executed synchronously.
            If <c>false</c>, the request will be executed asynchronously.
            If <c>null</c>, the request will be executed synchronously or asynchronously,
            depending on the value of Synchronous.
            Defaults to <c>null</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Message">
            <summary>
            The signalling message used for all client requests/responses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="bayeuxChannel">The Bayeux channel with which to initialize the message.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Id">
            <summary>
            Gets or sets the message ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.StreamId">
            <summary>
            Gets or sets the stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.AuthToken">
            <summary>
            Gets or sets the auth token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.DeviceId">
            <summary>
            Gets or sets the device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Channel">
            <summary>
            Gets or sets the channel to which the current client is publishing, subscribing, or unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Channels"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Channels">
            <summary>
            Gets or sets the channels to which the current client is subscribing or unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Tag">
            <summary>
            Gets or sets the tag associated with the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Presence">
            <summary>
            Gets or sets whether this message includes presence-related data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Record">
            <summary>
            Gets or sets the record to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Records">
            <summary>
            Gets or sets the records to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Record"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.IsPrivate">
            <summary>
            Gets or sets whether the records associated with the request are private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Key">
            <summary>
            Gets or sets the record key to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Keys">
            <summary>
            Gets or sets the record keys to which the current client is binding or unbinding.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.Message.Key"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.DisableBinary">
            <summary>
            Gets or sets whether binary is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Acknowledgement">
            <summary>
            Gets or sets the acknowledgement flag, used internally for stream requests following message delivery.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ServerActions">
            <summary>
            Gets or sets the server actions, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ReturnData">
            <summary>
            Gets or sets whether data should be included in the server response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Type">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.BayeuxChannel">
            <summary>
            Gets or sets the Bayeux message channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Advice">
            <summary>
            Gets or sets details on how the client should reconnect, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ConnectionType">
            <summary>
            Gets or sets the type of connection the client is using, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.SupportedConnectionTypes">
            <summary>
            Gets or sets the connection types supported by an endpoint, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.MinimumVersion">
            <summary>
            Gets or sets the minimum supported server version, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.Version">
            <summary>
            Gets or sets the current server version, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.ServerTimeout">
            <summary>
            Gets or sets the server timeout, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.RemoteClient">
            <summary>
            Gets or sets the publishing client details, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Message.SubscribedClients">
            <summary>
            Gets or sets the subscribed client details, used internally.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsBindingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a bind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents a bind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnbindingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unbind
            request/response for a particular key.
            </summary>
            <param name="key">The key to test.</param>
            <returns><c>true</c> if the message represents an unbind request/response
            for the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsSubscribingTo(System.String)">
            <summary>
            Determines whether or not the current message represents a subscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents a subscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnsubscribingFrom(System.String)">
            <summary>
            Determines whether or not the current message represents an unsubscribe
            request/response for a particular channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns><c>true</c> if the message represents an unsubscribe request/response
            for the specified channel; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsConnect">
            <summary>
            Detects whether this is a connect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsDisconnect">
            <summary>
            Detects whether this is a disconnect request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsBind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnbind">
            <summary>
            Detects whether this is a bind request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsSubscribe">
            <summary>
            Detects whether this is a subscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsUnsubscribe">
            <summary>
            Detects whether this is an unsubscribe request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsService">
            <summary>
            Detects whether this is a service request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsPublish">
            <summary>
            Detects whether this is a publish request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.IsStream">
            <summary>
            Detects whether this is a stream request/response.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJsonNoData(System.Byte[]@,System.String@)">
            <summary>
            Serializes the message to JSON (skipping the data field).
            </summary>
            <param name="dataBytes">The data bytes.</param>
            <param name="dataJson">The data JSON.</param>
            <returns>
            The message in JSON-serialized format.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJson">
            <summary>
            Serializes the message to JSON.
            </summary>
            <returns>The message in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJson(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Serializes a message to JSON.
            </summary>
            <param name="message">A message to serialize.</param>
            <returns>A JSON-serialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromJson(System.String)">
            <summary>
            Deserializes a message from JSON.
            </summary>
            <param name="messageJson">A JSON string to deserialize.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToJsonArray(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Serializes a list of messages to JSON.
            </summary>
            <param name="messages">A list of messages to serialize.</param>
            <returns>A JSON-serialized array of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of messages from JSON.
            </summary>
            <param name="messagesJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinary">
            <summary>
            Serializes the message to binary.
            </summary>
            <returns>The message in binary-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinary(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Serializes a message to binary.
            </summary>
            <param name="message">A message to serialize.</param>
            <returns>A binary-serialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinary(System.Byte[])">
            <summary>
            Deserializes a message from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinary(System.Byte[],System.Int32)">
            <summary>
            Deserializes a message from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <param name="offset">The offset into the array.</param>
            <returns>A deserialized message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.ToBinaryMultiple(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Serializes a list of messages to binary.
            </summary>
            <param name="messages">A list of messages to serialize.</param>
            <returns>A binary-serialized array of messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Message.FromBinaryMultiple(System.Byte[])">
            <summary>
            Deserializes a list of messages from binary.
            </summary>
            <param name="bytes">A byte array to deserialize.</param>
            <returns>A deserialized list of messages.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageBase">
            <summary>
            Base class for signalling client/publisher messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Validate">
            <summary>
            Gets or sets whether to skip validation while deserializing, used internally.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Successful">
            <summary>
            Gets or sets the flag that indicates whether the request should be
            processed. If the message represents a response, this indicates whether the
            processing was successful. If set to <c>false</c>, the <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Error" />
            property should be set to a friendly error message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Error">
            <summary>
            Gets or sets the friendly error message if <see cref="P:FM.LiveSwitch.Signalling.MessageBase.Successful" /> is
            <c>false</c>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.Timestamp">
            <summary>
            Gets or sets the date/time the message was processed on the server (in UTC/GMT).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.DataJson">
            <summary>
            Gets or sets the data payload
            in JSON format. (Overrides <see cref="P:FM.LiveSwitch.Signalling.MessageBase.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.DataBytes">
            <summary>
            Gets or sets the data payload
            in binary format. (Overrides <see cref="P:FM.LiveSwitch.Signalling.MessageBase.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageBase.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageBase"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.SerializeTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Serializes a timestamp (yyyy-MM-ddTHH:mm:ss.ff).
            </summary>
            <param name="timestamp">The timestamp.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageBase.DeserializeTimestamp(System.String)">
            <summary>
            Deserializes a timestamp (yyyy-MM-ddTHH:mm:ss.ff).
            </summary>
            <param name="timestampJson">The timestamp json.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageRequestArgs">
            <summary>
            Arguments for sending a message request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Sender">
            <summary>
            Gets or sets the sender of the content, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Messages">
            <summary>
            Gets or sets the messages to transfer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Url">
            <summary>
            Gets or sets the target URL for the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Headers">
            <summary>
            Gets or sets the headers for the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before timing out the transfer.
            Defaults to 15000 (15 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.MaxRetries">
            <summary>
            Gets or sets the maximum number of retries allowed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke whenever a new request is created
            and about to be transferred to the server. This is a good place to read
            or modify outgoing messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke whenever a new response is received
            and about to be processed by the client. This is a good place to read
            or modify incoming messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnHttpRequestCreated">
            <summary>
            Gets or sets the callback to invoke whenever an underlying HTTP request
            has been created and is about to be transferred to the server. This is a
            good place to add headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.OnHttpResponseReceived">
            <summary>
            Gets or sets the callback to invoke whenever an underlying HTTP response
            has been received and is about to be processed by the client. This is a
            good place to read headers/cookies. For WebSocket streams, this will fire
            only once for the initial HTTP-based handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestArgs.IsBinary">
            <summary>
            Gets whether or not each message in the batch is in binary format and can
            be tranferred as such.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageRequestArgs.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/> class
            with default values.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs">
            <summary>
            Arguments passed into callbacks when a message request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageRequestCreatedArgs.Requests">
            <summary>
            Gets or sets the outgoing messages about to be sent to the server.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageResponseArgs">
            <summary>
            Arguments for receiving a message response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Messages">
            <summary>
            Gets or sets the messages read from the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Headers">
            <summary>
            Gets or sets the headers for the response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.StatusCode">
            <summary>
            Gets or sets the status code received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.TextContent">
            <summary>
            Gets or sets the text content received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.BinaryContent">
            <summary>
            Gets or sets the binary content received while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.Retries">
            <summary>
            Gets or sets the number of retries that were required.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseArgs.RequestArgs">
            <summary>
            Gets or sets the original <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageResponseArgs.#ctor(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.MessageResponseArgs"/> class.
            </summary>
            <param name="requestArgs">The request arguments.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs">
            <summary>
            Arguments passed into callbacks when a message response is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs.Sender">
            <summary>
            Gets or sets the sender of the request, either a client or publisher.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageResponseReceivedArgs.Responses">
            <summary>
            Gets or sets the incoming messages about to be processed by the client.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageTransfer">
            <summary>
            Base class that defines methods for transferring messages over HTTP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.Send(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends messages synchronously.
            </summary>
            <param name="requestArgs">The message parameters.</param>
            <returns>The resulting response.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends messages asynchronously.
            </summary>
            <param name="requestArgs">The message parameters.</param>
            <param name="callback">The callback to execute with the resulting response.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>The response parameters.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the response parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.MessageRequestArgsToHttpRequestArgs(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/> to an <see cref="T:FM.LiveSwitch.HttpRequestArgs"/>.
            </summary>
            <param name="requestArgs">The request arguments.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransfer.HttpResponseArgsToMessageResponseArgs(FM.LiveSwitch.HttpResponseArgs)">
            <summary>
            Converts an <see cref="T:FM.LiveSwitch.HttpResponseArgs"/> to a <see cref="T:FM.LiveSwitch.Signalling.MessageRequestArgs"/>.
            </summary>
            <param name="httpResponseArgs">The HTTP response arguments.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageTransferFactory">
            <summary>
            Creates implementations of <see cref="T:FM.LiveSwitch.Signalling.MessageTransfer"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageTransferFactory.CreateHttpMessageTransfer">
            <summary>
            Gets or sets the callback that creates an HTTP-based message transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransferFactory.GetHttpMessageTransfer">
            <summary>
            Gets an instance of the HTTP-based message transfer class.
            </summary>
            
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MessageTransferFactory.CreateWebSocketMessageTransfer">
            <summary>
            Gets or sets the callback that creates a WebSocket-based message transfer class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MessageTransferFactory.GetWebSocketMessageTransfer(System.String)">
            <summary>
            Gets an instance of the WebSocket-based message transfer class.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MessageType">
            <summary>
            Possible message types for messages.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Connect">
            <summary>
            Message is a connect request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Disconnect">
            <summary>
            Message is a disconnect request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Bind">
            <summary>
            Messages is a bind request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unbind">
            <summary>
            Messages is an unbind request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Subscribe">
            <summary>
            Message is a subscribe request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unsubscribe">
            <summary>
            Message is an unsubscribe request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Publish">
            <summary>
            Message is a publish request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Service">
            <summary>
            Message is a service request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Stream">
            <summary>
            Message is a stream request/response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.MessageType.Unknown">
            <summary>
            Message is an unknown request/response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.MetaChannels">
            <summary>
            Contains the reserved Bayeux meta-channels and methods to assist in detecting them.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.MetaPrefix">
            <summary>
            Gets the reserved prefix for Bayeux meta-channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.ServicePrefix">
            <summary>
            Gets the reserved prefix for Bayeux service-channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Handshake">
            <summary>
            Gets the reserved channel for handshake requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Connect">
            <summary>
            Gets the reserved channel for connect requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Disconnect">
            <summary>
            Gets the reserved channel for disconnect requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Bind">
            <summary>
            Gets the reserved channel for bind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Unbind">
            <summary>
            Gets the reserved channel for unbind requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Subscribe">
            <summary>
            Gets the reserved channel for subscribe requests/responses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.MetaChannels.Unsubscribe">
            <summary>
            Gets the reserved channel for unsubscribe requests/responses.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsReservedChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsMetaChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux /meta channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is a reserved Bayeux /meta channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.IsServiceChannel(System.String)">
            <summary>
            Determines whether the specified channel name is a reserved Bayeux /service channel.
            </summary>
            <param name="channel">The channel name to check.</param>
            <returns>
            	<c>true</c> if the specified channel name is a reserved Bayeux /service channel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.ConvertChannelToServiced(System.String)">
            <summary>
            Converts a channel into its serviced equivalent.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The channel with the service prefix.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.ConvertChannelFromServiced(System.String)">
            <summary>
            Converts a serviced channel into its original form.
            </summary>
            <param name="channel">The channel to convert.</param>
            <returns>The channel without the service prefix.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.MetaChannels.GetMessageType(System.String)">
            <summary>
            Gets the type of the message.
            </summary>
            <param name="bayeuxChannel">The bayeux channel.</param>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.OutputArgs">
            <summary>
            Base output arguments for signalling <see cref="P:FM.LiveSwitch.Signalling.OutputArgs.Client" /> methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.OutputArgs.Timestamp">
            <summary>
            Gets or sets the date/time the message was processed on the server (in UTC/GMT).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.OutputArgs.Client">
            <summary>
            Gets or sets the active signalling client who made the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PresenceNotification">
            <summary>
            A presence notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.RemoteClient">
            <summary>
            Gets or sets the channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PresenceNotification.Type">
            <summary>
            Gets or sets the presence type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.ToJson">
            <summary>
            Serializes to JSON.
            </summary>
            <returns>A JSON value.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.ToJson(FM.LiveSwitch.Signalling.PresenceNotification)">
            <summary>
            Serializes to JSON.
            </summary>
            <param name="presenceNotification">The presence notification.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PresenceNotification.FromJson(System.String)">
            <summary>
            Deserializes from JSON.
            </summary>
            <param name="presenceNotificationJson">The presence notification JSON.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PresenceType">
            <summary>
            Types of presence notifications.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.PresenceType.Subscribe">
            <summary>
            Indicates that a client subscribed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.PresenceType.Unsubscribe">
            <summary>
            Indicates that a client unsubscribed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Publication">
            <summary>
            The signalling publication used for direct publishing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor">
            <summary>
            Creates a new publication.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String)">
            <summary>
            Creates a new publication with a channel.
            </summary>
            <param name="channel">The channel to target.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.String)">
            <summary>
            Creates a new publication with a channel and JSON data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new publication with a channel, JSON data, and binary data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new publication with a channel and JSON data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Creates a new publication with a channel, JSON data, and binary data.
            </summary>
            <param name="channel">The channel to target.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Channel">
            <summary>
            Gets or sets the channel the publisher is targeting.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Publication.Presence">
            <summary>
            Gets or sets whether this message includes presence-related data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJson">
            <summary>
            Serializes the publication to JSON.
            </summary>
            <returns>The publication in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJson(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Serializes a publication to JSON.
            </summary>
            <param name="publication">A publication to serialize.</param>
            <returns>A JSON-serialized publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromJson(System.String)">
            <summary>
            Deserializes a publication from JSON.
            </summary>
            <param name="publicationJson">A JSON string to deserialize.</param>
            <returns>A deserialized publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToJsonArray(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Serializes a list of publications to JSON.
            </summary>
            <param name="publications">A list of publications to serialize.</param>
            <returns>A JSON-serialized array of publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of publications from JSON.
            </summary>
            <param name="publicationsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToMessage(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Converts a Publication to its Message format.
            </summary>
            <param name="publication">The publication.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromMessage(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Converts a Publication from its Message format.
            </summary>
            <param name="message">The message.</param>
            <returns>The publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.ToMessages(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Converts a set of Publications to their Message formats.
            </summary>
            <param name="publications">The publications.</param>
            <returns>The messages.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publication.FromMessages(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Converts a set of Publications from their Message formats.
            </summary>
            <param name="messages">The messages.</param>
            <returns>The publications.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishArgs">
            <summary>
            Arguments for client publish requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.Channel">
            <summary>
            Gets or sets the channel to which the data should be sent.
            Must start with a forward slash (/).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.DataJson">
            <summary>
            Gets or sets the data to send in JSON format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.PublishArgs.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.DataBytes">
            <summary>
            Gets or sets the data to send in binary format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.PublishArgs.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishArgs.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Publisher">
            <summary>
            <para>
            The signalling publisher, used for publishing data rapidly and efficiently.
            </para>
            </summary>
            <remarks>
            <para>
            When developing real-time applications, it is often most efficient and secure to
            publish data from a server, a web service, or in general, a source that doesn't
            require the ability to subscribe to channels.  The <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> is 
            designed to do just that.
            </para>
            <para>
            A common use case for the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> is to send out data as it
            arrives from a real-time feed (e.g. stock data, sports scores, news articles, etc.).
            Wherever the feed is located, the <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> can be used to send
            out the data rapidly to any subscribed clients.
            </para>
            <para>
            For security reasons, signalling Server blocks Publisher requests by default. To
            enable direct publication, make sure "allowPublishers" is enabled in web.config.
            </para>
            <para>
            The publisher always runs synchronously.
            </para>
            <example>
            <para>
            Here's a simple example of how to create a publisher in C# and publish some data.
            </para>
            <code>
            using System;
            using System.Runtime.Serialization;
            using FM;
            using FM.LiveSwitch.Signalling;
            
            namespace Sample
            {
                class Program
                {
                    [DataContract]
                    private class Payload
                    {
                        [DataMember(Name = "message")]
                        public string Message { get; set; }
                        
                        public Payload(string message)
                        {
                            Message = message;
                        }
                    }
            
                    static void Main(string[] args)
                    {
                        var publisher = new Publisher("http://localhost/sync.ashx");
                        
                        // publish
                        var channel = "/test";
                        var payloadJson = Json.Serialize(new Payload("Hello, this is .NET Publisher."));
                        var p = publisher.Publish(channel, payloadJson);
                        if (p.Successful)
                        {
                            Console.WriteLine("Published.");
                        }
                        else
                        {
                            Console.WriteLine("Could not publish.");
                            Console.WriteLine(p.Error);
                        }
                    }
                }
            }
            </code>
            </example>
            <para>
            There are multiple overloads for the "Publish" method. For batch
            publications, use the overloads that take a collection of
            <see cref="T:FM.LiveSwitch.Signalling.Publication">Publications</see>. They will be automatically batched and
            delivered in a single round-trip.
            </para>
            </remarks>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Publisher"/> class.
            </summary>
            <param name="requestUrl">The absolute URL of the signalling server request handler.</param>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnPublishRequest">
            <summary>
            Raised before a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> publish request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnPublishResponse">
            <summary>
            Raised after a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> publish response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnServiceRequest">
            <summary>
            Raised before a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> service request begins. This event is
            designed to support extensions by allowing modifications to be applied
            to a request before it is sent to the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs"/> associated with the event.</parameter>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.Publisher.OnServiceResponse">
            <summary>
            Raised after a <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> service response returns. This event is
            designed to support extensions by allowing modifications to be applied
            to a response after it is received from the server.
            </summary>
            <parameter name="source">The publisher that fired the event</parameter>
            <parameter name="args">The <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs"/> associated with the event.</parameter>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.Byte[])">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.String,System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(System.String,System.Byte[],System.String)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Publish(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Sends a publication synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication" /> it sends.
            </remarks>
            <param name="publication">The publication to send.</param>
            <returns>The completed publication.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.PublishMany(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Sends an array of publications synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            <see cref="T:FM.LiveSwitch.Signalling.Publication">Publications</see> it sends.
            <example>
            <code>
            var publications = new[]
            {
                new Publication
                {
                    Channel = "/channel1",
                    DataJson = "{\"text\":\"Hello, channel #1!\"}"
                },
                new Publication
                {
                    Channel = "/channel2",
                    DataJson = "{\"text\":\"Hello, channel #2!\"}"
                }
            };
            try
            {
                publications = publisher.PublishMany(publications);
            }
            catch (Exception ex) { ... }
            
            foreach (var publication in publications)
            {
                if (publication.Successful)
                {
                    Console.WriteLine("Sent " + publication.DataJson + " to " + publication.Channel + ".");
                }
                else
                {
                    Console.WriteLine("Could not publish. " + publication.Error);
                }
            }
            </code>
            </example>
            </remarks>
            <param name="publications">The publications to send.</param>
            <returns>The completed publications.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.Byte[])">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.String,System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataJson">The data to send (in JSON format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(System.String,System.Byte[],System.String)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it automatically creates.
            </remarks>
            <param name="channel">The channel to which the data should be serviced.</param>
            <param name="dataBytes">The data to send (in binary format).</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
            <returns>The generated message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.Service(FM.LiveSwitch.Signalling.Message)">
            <summary>
            Services a message synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            message it sends.
            </remarks>
            <param name="message">The message to send.</param>
            <returns>The completed message.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Publisher.ServiceMany(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Services an array of messages synchronously over HTTP.
            </summary>
            <remarks>
            This method always executes synchronously and returns the
            messages it sends.
            <example>
            <code>
            var messages = new[]
            {
                new Message
                {
                    Channel = "/channel1",
                    DataJson = "{\"text\":\"Hello, channel #1!\"}"
                },
                new Message
                {
                    Channel = "/channel2",
                    DataJson = "{\"text\":\"Hello, channel #2!\"}"
                }
            };
            try
            {
                messages = publisher.ServiceMany(messages);
            }
            catch (Exception ex) { ... }
            
            foreach (var message in messages)
            {
                if (message.Successful)
                {
                    Console.WriteLine("Serviced " + message.DataJson + " to " + message.Channel + ".");
                }
                else
                {
                    Console.WriteLine("Could not service. " + message.Error);
                }
            }
            </code>
            </example>
            </remarks>
            <param name="messages">The messages to send.</param>
            <returns>The completed messages.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherArgs">
            <summary>
            Base arguments for <see cref="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher" />-triggered events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher">
            <summary>
            Gets or sets the <see cref="P:FM.LiveSwitch.Signalling.PublisherArgs.Publisher" /> triggering the event.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnPublishRequest" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs.#ctor(FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishRequestArgs"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnPublishResponse" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs.#ctor(FM.LiveSwitch.Signalling.Publication[],FM.LiveSwitch.Signalling.Publication[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherPublishResponseArgs" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherQueue">
            <summary>
            A thread-safe publisher queue that ensures synchronous
            delivery of publications from anywhere in your application
            while optimizing network resource consumption.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherQueue.Publisher">
            <summary>
            Gets the <see cref="P:FM.LiveSwitch.Signalling.PublisherQueue.Publisher"/> used by the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherQueue.MaxBatchSize">
            <summary>
            Gets or sets the maximum number of publications that
            will be transferred to a server in one HTTP request.
            A MaxBatchSize of 0 or less will remove the maximum
            limit, and all queued publications will be sent every
            time. Defaults to 1000.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.PublisherQueue.Published">
            <summary>
            Raised immediately after a Publish call has been made.
            </summary>
        </member>
        <member name="E:FM.LiveSwitch.Signalling.PublisherQueue.Exception">
            <summary>
            Raised when an exception is thrown while publishing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.#ctor(FM.LiveSwitch.Signalling.Publisher)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherQueue"/> class.
            </summary>
            <param name="publisher">The publisher to use for sending messages to the signalling server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.AddPublication(FM.LiveSwitch.Signalling.Publication)">
            <summary>
            Adds a publication to the queue.
            </summary>
            <param name="publication">The publication to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.Start">
            <summary>
            Starts the queue's internal thread.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherQueue.Stop">
            <summary>
            Stops the queue's internal thread.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherRequestArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherRequestArgs.Cancel">
            <summary>
            Gets or sets whether or not to cancel the request.
            If set to <c>true</c>, the request will not be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1">
            <summary>
            Generic base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            before a request is sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1.Requests">
            <summary>
            Gets or sets the requests being sent to the server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherRequestArgsGeneric`1"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponse">
            <summary>
            The internal representation of data received in response to a publisher request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Message">
            <summary>
            Gets or sets the first response received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Messages">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponse.Exception">
            <summary>
            Gets or sets the exception generated by the request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponseArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgs.Exception">
            <summary>
            Gets or sets the exception generated while completing the request, if any.
            Will be <c>null</c> if no exception was generated.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1">
            <summary>
            Generic base arguments for <see cref="T:FM.LiveSwitch.Signalling.Publisher" /> events that occur
            after a response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.Requests">
            <summary>
            Gets or sets the requests sent to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.Responses">
            <summary>
            Gets or sets the responses received from the server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1.#ctor(`0[],`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherResponseArgsGeneric`1" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnServiceRequest" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs.#ctor(FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceRequestArgs"/> class.
            </summary>
            <param name="requests">The requests.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs">
            <summary>
            Arguments for <see cref="E:FM.LiveSwitch.Signalling.Publisher.OnServiceResponse" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs.#ctor(FM.LiveSwitch.Signalling.Message[],FM.LiveSwitch.Signalling.Message[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublisherServiceResponseArgs" /> class.
            </summary>
            <param name="requests">The requests.</param>
            <param name="responses">The responses.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishFailureArgs">
            <summary>
            Arguments for publish failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.Channel">
            <summary>
            Gets the channel to which the data failed to be sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.DataJson">
            <summary>
            Gets the data that failed to be sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.DataBytes">
            <summary>
            Gets the data that failed to be sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishFailureArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishFailureArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishFailureArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data failed to be sent.</param>
            <param name="dataJson">The data that failed to be sent in JSON format.</param>
            <param name="dataBytes">The data that failed to be sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.PublishSuccessArgs">
            <summary>
            Arguments for publish success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.Channel">
            <summary>
            Gets the channel to which the data was sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.PublishSuccessArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.PublishSuccessArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.PublishSuccessArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data was sent.</param>
            <param name="dataJson">The data that was sent in JSON format.</param>
            <param name="dataBytes">The data that was sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ReceiveArgs.#ctor(System.String,System.Byte[],FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ReceiveArgs" /> class.
            </summary>
            <param name="dataJson">The data in JSON format.</param>
            <param name="dataBytes">The data in binary format.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.ConnectionType">
            <summary>
            Gets the current connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.ReconnectAfter">
            <summary>
            Gets or sets the amount of time in milliseconds to pause
            before reconnecting to the server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ReceiveArgs.RemoteClient">
            <summary>
            Gets or sets details about the remote client.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Reconnect">
            <summary>
            Allowed reconnect advice values for <see cref="T:FM.LiveSwitch.Signalling.Message"> Messages</see>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.Retry">
            <summary>
            Indicates that the client should retry its last request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.Handshake">
            <summary>
            Indicates that the client should attempt to handshake.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.None">
            <summary>
            Indicates that the client should not attempt to reconnect.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Signalling.Reconnect.NotSet">
            <summary>
            Indicates that the value was not set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Record">
            <summary>
            A key-value record for binding to a client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.Validate">
            <summary>
            Gets or sets whether to skip validation while deserializing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.Key">
            <summary>
            Gets or sets the key used to locate the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Record.ValueJson">
            <summary>
            Gets or sets the record value. This must be valid JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
            <param name="key">The key used to locate the value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Record"/> class.
            </summary>
            <param name="key">The key used to locate the value.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.Duplicate">
            <summary>
            Creates a deep clone of this record.
            </summary>
            <returns>A deep clone of this record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJson(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Serializes a record to JSON.
            </summary>
            <param name="record">A record to serialize.</param>
            <returns>A JSON-serialized record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.FromJson(System.String)">
            <summary>
            Deserializes a record from JSON.
            </summary>
            <param name="recordJson">A JSON string to deserialize.</param>
            <returns>A deserialized record.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToJsonArray(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Serializes a list of records to JSON.
            </summary>
            <param name="records">A list of records to serialize.</param>
            <returns>A JSON-serialized array of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of records from JSON.
            </summary>
            <param name="recordsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Record.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Records">
            <summary>
            A dictionary of records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Records"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.#ctor(FM.LiveSwitch.Signalling.Record[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Records"/> class.
            </summary>
            <param name="records">The records.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Clone">
            <summary>
            Creates a deep clone of this records collection.
            </summary>
            <returns>A deep clone of this records collection.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Records.Count">
            <summary>
            Gets the number of records in the collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Add(FM.LiveSwitch.Signalling.Record)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Remove(System.String)">
            <summary>
            Removes the record associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.Clear">
            <summary>
            Removes all records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key exists in the collection.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetKeys">
            <summary>
            Gets the keys in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetRecords">
            <summary>
            Gets the records in the collection.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetRecord(System.String)">
            <summary>
            Gets the a record from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.GetValueJson(System.String)">
            <summary>
            Gets a JSON value from the collection.
            </summary>
            <param name="key">The record key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ToJson">
            <summary>
            Serializes the bindings to JSON.
            </summary>
            <returns>The bindings in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.ToJson(FM.LiveSwitch.Signalling.Records)">
            <summary>
            Serializes a records collection to JSON.
            </summary>
            <param name="records">The records to serialize.</param>
            <returns>The JSON-serialized records.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Records.FromJson(System.String)">
            <summary>
            Deserializes a records collection from JSON.
            </summary>
            <param name="recordsJson">The records to deserialize.</param>
            <returns>The deserialized records.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.RemoteClient">
            <summary>
            Details about the remote client.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.RemoteClient"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.#ctor(System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Records)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.RemoteClient" /> class.
            </summary>
            <param name="clientId">The remote client's ID.</param>
            <param name="streamId">The remote client's stream ID.</param>
            <param name="userId">The remote client's user ID.</param>
            <param name="deviceId">The remote client's device ID.</param>
            <param name="boundRecords">The remote client's bound records.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.ClientId">
            <summary>
            Gets or sets the remote client's ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.StreamId">
            <summary>
            Gets or sets the remote client's stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.UserId">
            <summary>
            Gets or sets the remote client's user ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.DeviceId">
            <summary>
            Gets or sets the remote client's device ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.RemoteClient.BoundRecords">
            <summary>
            Gets or sets the remote client's bound records.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.GetBoundValueJson(System.String)">
            <summary>
            Gets the JSON value of a record bound to the remote client.
            </summary>
            <param name="key">The record key.</param>
            <returns>The JSON value of the record, if it exists, or <c>null</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>The JSON-formatted remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJson(FM.LiveSwitch.Signalling.RemoteClient)">
            <summary>
            Serializes a remote client to JSON.
            </summary>
            <param name="remoteClient">The remote client to serialize.</param>
            <returns>The JSON-formatted remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.FromJson(System.String)">
            <summary>
            Deserializes a JSON-formatted remote client.
            </summary>
            <param name="remoteClientJson">The JSON-formatted remote client to deserialize.</param>
            <returns>The remote client.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.ToJsonArray(FM.LiveSwitch.Signalling.RemoteClient[])">
            <summary>
            Serializes an array of remote clients to JSON.
            </summary>
            <param name="remoteClients">The array of remote clients to serialize.</param>
            <returns>The JSON-formatted array of remote clients.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.RemoteClient.FromJsonArray(System.String)">
            <summary>
            Deserializes a JSON-formatted array of remote clients.
            </summary>
            <param name="remoteClientsJson">The JSON-formatted array of remote clients to deserialize.</param>
            <returns>The array of remote clients.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Reserved">
            <summary>
            Channels that are reserved for internal use.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetClientChannel(System.String)">
            <summary>
            Gets the client channel for a given client ID.
            </summary>
            <param name="clientId">The client ID.</param>
            <returns>The client channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetDeviceChannel(System.String)">
            <summary>
            Gets the device channel for a given device ID.
            </summary>
            <param name="deviceId">The device ID.</param>
            <returns>The device channel.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Reserved.GetUserChannel(System.String)">
            <summary>
            Gets the user channel for a given user ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>The user channel.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.ClientChannelPrefix">
            <summary>
            Gets the default client channel prefix ("/fm/client").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.DeviceChannelPrefix">
            <summary>
            Gets the default device channel prefix ("/fm/device").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Reserved.UserChannelPrefix">
            <summary>
            Gets the default user channel prefix ("/fm/user").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerArgs">
            <summary>
            Base arguments for <see cref="T:FM.LiveSwitch.Signalling.ConnectArgs" /> "OnServer" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerBindArgs">
            <summary>
            Arguments for OnServerBind.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerBindArgs.Record">
            <summary>
            Gets or sets the record to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerBindArgs.Records"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerBindArgs.Records">
            <summary>
            Gets or sets the records to which the client was bound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerBindArgs.Record"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerSubscribeArgs">
            <summary>
            Arguments for OnServerSubscribe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channel">
            <summary>
            Gets or sets the channel to which the client was subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channels">
            <summary>
            Gets or sets the channels to which the client was subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.Tag">
            <summary>
            Gets or sets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.OnReceive">
            <summary>
            Gets or sets the callback to execute when messages are received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerSubscribeArgs.OnPresence">
            <summary>
            Gets or sets the callback to execute when presence notifications are received on the channel(s).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerUnbindArgs">
            <summary>
            Arguments for OnServerUnbind.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Key">
            <summary>
            Gets or sets the record key from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Keys">
            <summary>
            Gets or sets the record keys from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnbindArgs.Key"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs">
            <summary>
            Arguments for OnServerUnsubscribe.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channel">
            <summary>
            Gets or sets the channel from which the client was unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channels">
            <summary>
            Gets or sets the channels from which the client was unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServerUnsubscribeArgs.Tag">
            <summary>
            Gets or sets the tag associated with the unsubscribe request.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceArgs">
            <summary>
            Arguments for client service requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataJson">The data to send in JSON format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data should be sent.</param>
            <param name="dataBytes">The data to send in binary format.</param>
            <param name="tag">The tag that identifies the contents of the payload.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.Channel">
            <summary>
            Gets or sets the channel to which the data should be sent.
            Must start with a forward slash (/).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.DataJson">
            <summary>
            Gets or sets the data to send in JSON format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.ServiceArgs.DataBytes"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.DataBytes">
            <summary>
            Gets or sets the data to send in binary format.
            (Overrides <see cref="P:FM.LiveSwitch.Signalling.ServiceArgs.DataJson"/>.)
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.Tag">
            <summary>
            Gets or sets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceArgs.ReturnData">
            <summary>
            Gets or sets whether the data payload should be included in the server response.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceFailureArgs">
            <summary>
            Arguments for service failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.Channel">
            <summary>
            Gets the channel to which the data failed to be sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.DataJson">
            <summary>
            Gets the data that failed to be sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.DataBytes">
            <summary>
            Gets the data that failed to be sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceFailureArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceFailureArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceFailureArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data failed to be sent.</param>
            <param name="dataJson">The data that failed to be sent in JSON format.</param>
            <param name="dataBytes">The data that failed to be sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.ServiceSuccessArgs">
            <summary>
            Arguments for service success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.Channel">
            <summary>
            Gets the channel to which the data was sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.DataJson">
            <summary>
            Gets the data that was sent in JSON format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.DataBytes">
            <summary>
            Gets the data that was sent in binary format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.IsBinary">
            <summary>
            Gets whether or not the data is binary.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.ServiceSuccessArgs.Tag">
            <summary>
            Gets the tag that identifies the contents of the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.ServiceSuccessArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.ServiceSuccessArgs"/> class.
            </summary>
            <param name="channel">The channel to which the data was sent.</param>
            <param name="dataJson">The data that was sent in JSON format.</param>
            <param name="dataBytes">The data that was sent in binary format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeArgs">
            <summary>
            Arguments for client subscribe requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String,System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channel.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeArgs.#ctor(System.String[],System.String,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribeReceiveArgs},FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.SubscribePresenceArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to subscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
            <param name="onReceive">The callback to invoke when data is received on the channels.</param>
            <param name="onPresence">The callback to invoke when a presence notification is received on the channels.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive">
            <summary>
            Gets or sets the callback to invoke when data is received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnPresence">
            <summary>
            Gets or sets the callback to invoke when a presence notification is received on the channel(s).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channel">
            <summary>
            Gets or sets the channel to which the client should be subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channels">
            <summary>
            Gets or sets the channels to which the client should be subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.Tag">
            <summary>
            Gets or sets a tag that will uniquely identify this subscription so it
            can be unsubscribed later without affecting other subscriptions with the same channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecord">
            <summary>
            Gets or sets the record to bind while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecords">
            <summary>
            Gets or sets the records to bind while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeArgs.BindIsPrivate">
            <summary>
            Gets or sets whether the record(s) to bind while subscribing
            are private to this client (and the
            server) or visible to other clients. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeFailureArgs">
            <summary>
            Arguments for subscribe failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channel">
            <summary>
            Gets the channel to which the client failed to be subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channels">
            <summary>
            Gets the channels to which the client failed to be subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecord">
            <summary>
            Gets the record to which the client failed to be bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecords">
            <summary>
            Gets the records to which the client failed to be bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeFailureArgs.BindIsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeFailureArgs.#ctor(System.String[],FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeFailureArgs"/> class.
            </summary>
            <param name="channels">The channels to which the client failed to be subscribed.</param>
            <param name="bindRecords">The records to which the client failed to be found while subscribing.</param>
            <param name="bindIsPrivate">Whether the records are private.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribePresenceArgs">
            <summary>
            Arguments for the subscriber change callback.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribePresenceArgs.#ctor(System.String,FM.LiveSwitch.Signalling.RemoteClient,FM.LiveSwitch.Signalling.PresenceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribePresenceArgs" /> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="remoteClient">The remote client.</param>
            <param name="presenceType">The presence type.</param>
            <param name="firstUserSubscribe">Whether this is the first client to subscribe with a given user ID.</param>
            <param name="lastUserUnsubscribe">Whether this is the last client to unsubscribe with a given user ID.</param>
            <param name="firstDeviceSubscribe">Whether this is the first client to subscribe with a given device ID.</param>
            <param name="lastDeviceUnsubscribe">Whether this is the last client to unsubscribe with a given device ID.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.Channel">
            <summary>
            Gets the channel on which the presence change occurred.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.RemoteClient">
            <summary>
            Gets the client who triggered the presence notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.PresenceType">
            <summary>
            Gets the presence type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.FirstUserSubscribe">
            <summary>
            Gets whether this is the first client to subscribe
            with a given user ID (user is transitioning from
            offline to online).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.LastUserUnsubscribe">
            <summary>
            Gets whether this is the last client to unsubscribe
            with a given user ID (user is transitioning from
            online to offline).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.FirstDeviceSubscribe">
            <summary>
            Gets whether this is the first client to subscribe
            with a given device ID (device is transitioning from
            offline to online).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribePresenceArgs.LastDeviceUnsubscribe">
            <summary>
            Gets whether this is the last client to unsubscribe
            with a given device ID (device is transitioning from
            online to offline).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeReceiveArgs">
            <summary>
            Arguments for <see cref="P:FM.LiveSwitch.Signalling.SubscribeArgs.OnReceive" />.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.#ctor(System.String,System.String,System.Byte[],FM.LiveSwitch.Signalling.ConnectionType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeReceiveArgs"/> class.
            </summary>
            <param name="channel">The channel over which data was received.</param>
            <param name="dataJson">The data in JSON format.</param>
            <param name="dataBytes">The data in binary format.</param>
            <param name="connectionType">The current connection type.</param>
            <param name="reconnectAfter">The amount of time in milliseconds to pause before reconnecting to the server.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.Channel">
            <summary>
            Gets the channel over which the data was published.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.WasSentByMe">
            <summary>
            Gets whether the data was sent by the current client.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeReceiveArgs.RemoteClient">
            <summary>
            Gets or sets details about the client sending the publication.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SubscribeSuccessArgs">
            <summary>
            Arguments for subscribe success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channel">
            <summary>
            Gets the channel to which the client was subscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channels">
            <summary>
            Gets the channels to which the client was subscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecord">
            <summary>
            Gets the record to which the client was bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecords"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecords">
            <summary>
            Gets the records to which the client was bound while subscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindRecord"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.BindIsPrivate">
            <summary>
            Gets whether the records are private.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.SubscribedClients">
            <summary>
            Gets the clients currently subscribed to the channel
            if presence was requested.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.SubscribedClientsByChannel">
            <summary>
            Gets the clients currently subscribed to the channels
            if presence was requested.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.SubscribeSuccessArgs.#ctor(System.String[],FM.LiveSwitch.Signalling.Record[],System.Boolean,System.Collections.Generic.Dictionary{System.String,FM.LiveSwitch.Signalling.RemoteClient[]})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.SubscribeSuccessArgs"/> class.
            </summary>
            <param name="channels">The channels to which the client was subscribed.</param>
            <param name="bindRecords">The records to which the client was bound while subscribing.</param>
            <param name="bindIsPrivate">Whether the records are private.</param>
            <param name="subscribedClients">The the clients currently subscribed to the channels if presence was requested.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Subscription">
            <summary>
            A channel/tag identifier for a client subscription.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Subscription.Channel">
            <summary>
            Gets or sets the subscription channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.Subscription.Tag">
            <summary>
            Gets or sets the identifier for the subscription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Subscription"/> class.
            </summary>
            <param name="channel">The subscription channel.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Subscription"/> class.
            </summary>
            <param name="channel">The subscription channel.</param>
            <param name="tag">The identifier for the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.Duplicate">
            <summary>
            Creates a deep clone of this subscription.
            </summary>
            <returns>A deep clone of this subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJson">
            <summary>
            Serializes the record to JSON.
            </summary>
            <returns>The record in JSON-serialized format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJson(FM.LiveSwitch.Signalling.Subscription)">
            <summary>
            Serializes a subscription to JSON.
            </summary>
            <param name="subscription">A subscription to serialize.</param>
            <returns>A JSON-serialized subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.FromJson(System.String)">
            <summary>
            Deserializes a subscription from JSON.
            </summary>
            <param name="subscriptionJson">A JSON string to deserialize.</param>
            <returns>A deserialized subscription.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.ToJsonArray(FM.LiveSwitch.Signalling.Subscription[])">
            <summary>
            Serializes a list of subscriptions to JSON.
            </summary>
            <param name="subscriptions">A list of subscriptions to serialize.</param>
            <returns>A JSON-serialized array of subscriptions.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Subscription.FromJsonArray(System.String)">
            <summary>
            Deserializes a list of subscriptions from JSON.
            </summary>
            <param name="subscriptionsJson">A JSON string to deserialize.</param>
            <returns>A deserialized list of subscriptions.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.SuccessArgs">
            <summary>
            Base arguments for client "OnSuccess" callbacks.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindArgs">
            <summary>
            Arguments for client unbind requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
            <param name="key">The key to unbind.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindArgs"/> class.
            </summary>
            <param name="keys">The keys to unbind.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.Key">
            <summary>
            Gets or sets the record key to unbind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindArgs.Keys">
            <summary>
            Gets or sets the record keys to unbind.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindArgs.Key"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindFailureArgs">
            <summary>
            Arguments for unbind failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Key">
            <summary>
            Gets the record key from which the client failed to be unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Keys">
            <summary>
            Gets the record keys from which the client failed to be unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindFailureArgs.Key"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindFailureArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindFailureArgs"/> class.
            </summary>
            <param name="keys">The record keys from which the client failed to be unbound.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnbindSuccessArgs">
            <summary>
            Arguments for unbind success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Key">
            <summary>
            Gets the record key from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Keys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Keys">
            <summary>
            Gets the record keys from which the client was unbound.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Key"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnbindSuccessArgs.Forced">
            <summary>
            Gets whether this unbind was forced due to a disconnect.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnbindSuccessArgs.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnbindSuccessArgs"/> class.
            </summary>
            <param name="keys">The record keys from which the client was unbound.</param>
            <param name="forced">Whether this unbind was forced due to a disconnect.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeArgs">
            <summary>
            Arguments for client unsubscribe requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.OnFailure">
            <summary>
            Gets or sets the callback to invoke if the request fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.OnSuccess">
            <summary>
            Gets or sets the callback to invoke if the request succeeds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channel">The channel to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeArgs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeArgs"/> class.
            </summary>
            <param name="channels">The channels to unsubscribe.</param>
            <param name="tag">The tag identifying the subscription.</param>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channel">
            <summary>
            Gets or sets the channel from which the client should be unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channels">
            <summary>
            Gets or sets the channels from which the client should be unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.Tag">
            <summary>
            Gets or sets a tag that uniquely identifies a subscription so
            other subscriptions with the same channel are not affected.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKey">
            <summary>
            Gets or sets the record key to unbind while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKeys">
            <summary>
            Gets or sets the record keys to unbind while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs">
            <summary>
            Arguments for unsubscribe failure callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channel">
            <summary>
            Gets the channel from which the client failed to be unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channels">
            <summary>
            Gets the channels from which the client failed to be unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKey">
            <summary>
            Gets the record key from which the client failed to be unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKeys">
            <summary>
            Gets the record keys from which the client failed to be unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeFailureArgs"/> class.
            </summary>
            <param name="channels">The channels from which the client failed to be unsubscribed.</param>
            <param name="unbindKeys">The record keys from which the client failed to be unbound while unsubscribing.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs">
            <summary>
            Arguments for unsubscribe success callbacks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channel">
            <summary>
            Gets the channel from which the client was unsubscribed.
            Must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channels" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channels">
            <summary>
            Gets the channels from which the client was unsubscribed.
            Each must start with a forward slash (/).
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Channel" />.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Tag">
            <summary>
            Gets the tag associated with the subscribe request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKey">
            <summary>
            Gets the record key from which the client was unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKeys"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKeys">
            <summary>
            Gets the record keys from which the client was unbound while unsubscribing.
            Overrides <see cref="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.UnbindKey"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.Forced">
            <summary>
            Gets whether this unsubscribe was forced due to a disconnect.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs.#ctor(System.String[],System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.UnsubscribeSuccessArgs"/> class.
            </summary>
            <param name="channels">The channels from which the client was unsubscribed.</param>
            <param name="unbindKeys">The record keys from which the client was unbound while unsubscribing.</param>
            <param name="forced">Whether this unsubscribe was forced due to a disconnect.</param>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.WebSocketMessageTransfer">
            <summary>
            Base class that defines methods for transferring messages over HTTP.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.HandshakeTimeout">
            <summary>
            Gets or sets the timeout for the initial handshake.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.StreamTimeout">
            <summary>
            Gets or sets the timeout for the stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Sender">
            <summary>
            Gets or sets the sender of the messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnRequestCreated">
            <summary>
            Gets or sets the callback to invoke when the handshake request is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnResponseReceived">
            <summary>
            Gets or sets the callback to invoke when the handshake response is received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnOpenSuccess">
            <summary>
            Gets or sets the callback to invoke if the handshake succeeds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnOpenFailure">
            <summary>
            Gets or sets the callback to invoke if the handshake fails.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.OnStreamFailure">
            <summary>
            Gets or sets the callback to invoke if the stream errors out.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.WebSocketMessageTransfer"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Open(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Opens the socket.
            </summary>
            <param name="headers">The headers to pass in with the initial handshake.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.SendMessages(FM.LiveSwitch.Signalling.MessageRequestArgs)">
            <summary>
            Sends a request synchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <returns>
            The response parameters.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.SendMessagesAsync(FM.LiveSwitch.Signalling.MessageRequestArgs,FM.LiveSwitch.Action1{FM.LiveSwitch.Signalling.MessageResponseArgs})">
            <summary>
            Sends a request asynchronously.
            </summary>
            <param name="requestArgs">The request parameters.</param>
            <param name="callback">The callback to execute with the response parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.WebSocketMessageTransfer.Shutdown">
            <summary>
            Releases any resources and shuts down.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Redis.RedisMqProvider">
            <summary>
            Signalling provider using Redis for client state storage and message transfer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.#ctor(FM.LiveSwitch.Service.MessageQueue.IConnection,StackExchange.Redis.IConnectionMultiplexer,OpenTracing.ITracer,FM.LiveSwitch.Service.Metrics.IMetricProvider,Microsoft.Extensions.Options.IOptions{FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Redis.RedisProvider"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.Startup">
            <summary>
            Initializes the provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.Shutdown">
            <summary>
            Disposes the provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.ConnectClient(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Connects a client.
            </summary>
            <param name="requestedClientId">The client's requested ID.</param>
            <param name="lastStreamId">The client's last stream ID.</param>
            <param name="lastAuthToken">The client's last auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the client was connected; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.BindClient(System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Binds a client to a set of records.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="records">The records to bind.</param>
            <param name="isPrivate">Whether the records are private.</param>
            <returns><c>true</c> if all the records were successfully bound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.UnbindClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Unbinds a client from a set of records.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="keys">The keys to unbind.</param>
            <returns><c>true</c> if all the records were successfully unbound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.SubscribeClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Subscribes a client to a set of channels.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels to which the client should be subscribed.</param>
            <param name="tag">The identifier for the subscription.</param>
            <returns><c>true</c> if all the channels were successfully subscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.UnsubscribeClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Unsubscribes a client from a set of channels.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels from which the client should be unsubscribed.</param>
            <param name="tag">The identifier for the subscription.</param>
            <returns><c>true</c> if all the channels were successfully unsubscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.DisconnectClient(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Disconnects a client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>
            True if the client was disconnected, false otherwise.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.DisconnectIdleClients(System.Int32)">
            <summary>
            Disconnects clients who have exceeded the allowed inactivity threshold,
            returning the removed clients.
            </summary>
            <param name="allowedInactivity">The allowed inactivity threshold.</param>
            <returns>
            An array of idled clients.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.PublishMessage(FM.LiveSwitch.Signalling.Message,System.String)">
            <summary>
            Sends a message to a channel.
            </summary>
            <param name="message">The message to send.</param>
            <param name="domainKey">The publisher's domain.</param>
            <returns><c>true</c> if the message was sent; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.RemovePickedUpMessages(System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.State)">
            <summary>
            Removes any messages flagged as being picked up.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.ReaddPickedUpMessages(System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.State)">
            <summary>
            Re-adds any messages flagged as being picked up.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.AuthorizeServerRequest(System.String,System.String)">
            <summary>
            Authorizes a server request, returning subscribed channels and bound records if available.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the AuthorizeServerRequest exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.AuthorizeClientRequest(System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes a client request, returning subscribed channels and bound records if available.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the client exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisMqProvider.GetClient(System.String,System.Boolean,System.String)">
            <summary>
            Gets the details of a connected client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="local">Ignored</param>
            <param name="domainKey">The client's domain.</param>
            <returns>The client details.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Signalling.Redis.RedisProvider">
            <summary>
            Signalling provider using Redis for client state storage and message transfer.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.#ctor(StackExchange.Redis.IConnectionMultiplexer,OpenTracing.ITracer,FM.LiveSwitch.Service.Metrics.IMetricProvider,Microsoft.Extensions.Options.IOptions{FM.LiveSwitch.Signalling.Server.Configuration.ServerConfig})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Signalling.Redis.RedisProvider"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.Startup">
            <summary>
            Initializes the provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.Shutdown">
            <summary>
            Disposes the provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.ConnectClient(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Connects a client.
            </summary>
            <param name="requestedClientId">The client's requested ID.</param>
            <param name="lastStreamId">The client's last stream ID.</param>
            <param name="lastAuthToken">The client's last auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the client was connected; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.BindClient(System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.Signalling.Record[],System.Boolean)">
            <summary>
            Binds a client to a set of records.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="records">The records to bind.</param>
            <param name="isPrivate">Whether the records are private.</param>
            <returns><c>true</c> if all the records were successfully bound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.UnbindClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Unbinds a client from a set of records.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="keys">The keys to unbind.</param>
            <returns><c>true</c> if all the records were successfully unbound; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.SubscribeClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Subscribes a client to a set of channels.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels to which the client should be subscribed.</param>
            <param name="tag">The identifier for the subscription.</param>
            <returns><c>true</c> if all the channels were successfully subscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.UnsubscribeClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Unsubscribes a client from a set of channels.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <param name="channels">The channels from which the client should be unsubscribed.</param>
            <param name="tag">The identifier for the subscription.</param>
            <returns><c>true</c> if all the channels were successfully unsubscribed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.DisconnectClient(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Disconnects a client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="userId">The client's user ID.</param>
            <param name="deviceId">The client's device ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns>
            True if the client was disconnected, false otherwise.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.DisconnectIdleClients(System.Int32)">
            <summary>
            Disconnects clients who have exceeded the allowed inactivity threshold,
            returning the removed clients.
            </summary>
            <param name="allowedInactivity">The allowed inactivity threshold.</param>
            <returns>
            An array of idled clients.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.PublishMessage(FM.LiveSwitch.Signalling.Message,System.String)">
            <summary>
            Sends a message to a channel.
            </summary>
            <param name="message">The message to send.</param>
            <param name="domainKey">The publisher's domain.</param>
            <returns><c>true</c> if the message was sent; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.RemovePickedUpMessages(System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.State)">
            <summary>
            Removes any messages flagged as being picked up.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.ReaddPickedUpMessages(System.String,System.String,System.String,FM.LiveSwitch.Signalling.Server.State)">
            <summary>
            Re-adds any messages flagged as being picked up.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="domainKey">The client's domain.</param>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.AuthorizeServerRequest(System.String,System.String)">
            <summary>
            Authorizes a server request, returning subscribed channels and bound records if available.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the AuthorizeServerRequest exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.AuthorizeClientRequest(System.String,System.String,System.String,System.String)">
            <summary>
            Authorizes a client request, returning subscribed channels and bound records if available.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="streamId">The client's stream ID.</param>
            <param name="authToken">The client's auth token.</param>
            <param name="domainKey">The client's domain.</param>
            <returns><c>true</c> if the client exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FM.LiveSwitch.Signalling.Redis.RedisProvider.GetClient(System.String,System.Boolean,System.String)">
            <summary>
            Gets the details of a connected client.
            </summary>
            <param name="clientId">The client's ID.</param>
            <param name="local">Ignored</param>
            <param name="domainKey">The client's domain.</param>
            <returns>The client details.</returns>
        </member>
        <member name="T:FM.LiveSwitch.AudioConfig">
            <summary>
            An audio configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.AudioConfig.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioConfig" /> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioConfig.IsEquivalent(FM.LiveSwitch.AudioConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.BandwidthAdaptationPolicy">
            <summary>
            RTP packet header Extension support policies.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BandwidthAdaptationPolicy.Disabled">
            <summary>
            Indicates a policy where stream bandwidth adaptation of encoder bitrates is disabled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.BandwidthAdaptationPolicy.Enabled">
            <summary>
            Indicates a policy where stream bandwidth adaptation of encoder bitrates is enabled.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.BaseStats">
            <summary>
            Base stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BaseStats.Id">
            <summary>
            Gets the identifier of
            the object generating these stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BaseStats.Timestamp">
            <summary>
            Gets the timestamp when
            these stats were generated.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BaseStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.BaseStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.BitrateNotification">
            <summary>
            A bitrate notification.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.MediaDescriptionId">
            <summary>
            Gets or sets the media description ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.RtpStreamId">
            <summary>
            Gets or sets the RTP stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateNotification.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateNotification"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON target.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="key">The property key.</param>
            <param name="valueJson">The property value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJson(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="bitrateNotification">The instance.</param>
            <returns>The instance in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="bitrateNotificationJson">The instance in JSON format.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.ToJsonArray(FM.LiveSwitch.BitrateNotification[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="bitrateNotifications">The array.</param>
            <returns>The array in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateNotification.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="bitrateNotificationsJson">The array in JSON format.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.BitrateRequest">
            <summary>
            A bitrate request.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.MediaDescriptionId">
            <summary>
            Gets or sets the media description ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.RtpStreamId">
            <summary>
            Gets or sets the RTP stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.BitrateRequest.SenderSynchronizationSource">
            <summary>
            Gets or sets the sender synchronization source.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.BitrateRequest"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON target.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="key">The property key.</param>
            <param name="valueJson">The property value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJson(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="bitrateRequest">The instance.</param>
            <returns>The instance in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="bitrateRequestJson">The instance in JSON format.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.ToJsonArray(FM.LiveSwitch.BitrateRequest[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="bitrateRequests">The array.</param>
            <returns>The array in JSON format.</returns>
        </member>
        <member name="M:FM.LiveSwitch.BitrateRequest.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="bitrateRequestsJson">The array in JSON format.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateInfo">
            <summary>
            Candidate information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.IPAddress">
            <summary>
            Gets or sets the candidate IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Port">
            <summary>
            Gets or sets the candidate port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelatedIPAddress">
            <summary>
            Gets or sets the candidate related IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelatedPort">
            <summary>
            Gets or sets the candidate related port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Protocol">
            <summary>
            Gets or sets the candidate protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.RelayProtocol">
            <summary>
            Gets or sets the candidate relay protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Type">
            <summary>
            Gets or sets the candidate type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateInfo.Priority">
            <summary>
            Gets or sets the candidate priority.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidateInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJson(FM.LiveSwitch.CandidateInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="candidateReport">The instance.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="candidateReportJson">The JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.ToJsonArray(FM.LiveSwitch.CandidateInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="candidateReports">The array.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="candidateReportsJson">The JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairInfo">
            <summary>
            Candidate pair information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.LocalCandidateId">
            <summary>
            Gets or sets the candidate pair's local candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.RemoteCandidateId">
            <summary>
            Gets or sets the candidate pair's remote candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.State">
            <summary>
            Gets or sets the candidate pair state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Priority">
            <summary>
            Gets or sets the candidate pair priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Nominated">
            <summary>
            Gets or sets whether the candidate pair is nominated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairInfo.Report">
            <summary>
            Gets or sets whether the candidate pair report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJson(FM.LiveSwitch.CandidatePairInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.ToJsonArray(FM.LiveSwitch.CandidatePairInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairState">
            <summary>
            The state of a candidate pair.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.New">
            <summary>
            Indicates that the candidate pair has been formed,
            but connectivity checks have not yet started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Waiting">
            <summary>
            Indicates that the connectivity check is ready for
            connectivity checks, but checks have not yet started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.InProgress">
            <summary>
            Indicates that connectivity checks are in progress.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Succeeded">
            <summary>
            Indicates that a connectivity check was successful.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Failed">
            <summary>
            Indicates that all connectivity checks have timed
            out or produced a failure response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.Closed">
            <summary>
            Indicates that connectivity checks have been stopped
            intentionally due to transport closure.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidatePairState.ConnectivityLost">
            <summary>
            Indicates that connectivity checks have succeeded in
            the past, but are currently not responding.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairStats">
            <summary>
            Candidate pair stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.TransportId">
            <summary>
            Gets the transport identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.LocalCandidateId">
            <summary>
            Gets the local candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RemoteCandidateId">
            <summary>
            Gets the remote candidate identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.Nominated">
            <summary>
            Gets whether the candidate pair is nominated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RequestsSent">
            <summary>
            Gets the number of requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.RequestsReceived">
            <summary>
            Gets the number of requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ResponsesSent">
            <summary>
            Gets the number of responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ResponsesReceived">
            <summary>
            Gets the number of responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentRequestsSent">
            <summary>
            Gets the number of consent requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentRequestsReceived">
            <summary>
            Gets the number of consent requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentResponsesSent">
            <summary>
            Gets the number of consent responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.ConsentResponsesReceived">
            <summary>
            Gets the number of consent responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.TotalRoundTripTime">
            <summary>
            Gets the total round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairStats.CurrentRoundTripTime">
            <summary>
            Gets the current round trip time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairStats"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJson(FM.LiveSwitch.CandidatePairStats)">
            <summary>
            Serializes candidate pair stats to JSON.
            </summary>
            <param name="candidatePair">The candidate pair's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.FromJson(System.String)">
            <summary>
            Derializes candidate pair stats from JSON.
            </summary>
            <param name="candidatePairJson">The candidate pair's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.ToJsonArray(FM.LiveSwitch.CandidatePairStats[])">
            <summary>
            Serializes an array of candidate pair stats to JSON.
            </summary>
            <param name="candidatePairs">The candidate pairs' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of candidate pair stats from JSON.
            </summary>
            <param name="candidatePairsJson">The candidate pairs' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairStats.IsEquivalent(FM.LiveSwitch.CandidatePairStats)">
            <summary>
            Checks if a candidate pair is equivalent to this one.
            </summary>
            <param name="instance">The candidate pair.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateStats">
            <summary>
            Candidate stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IPAddress">
            <summary>
            Gets the IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelatedIPAddress">
            <summary>
            Gets the related IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelatedPort">
            <summary>
            Gets the related port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Protocol">
            <summary>
            Gets the protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.TurnProtocol">
            <summary>
            Gets the relay protocol.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.CandidateStats.RelayProtocol"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.RelayProtocol">
            <summary>
            Gets the relay protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsRelayed">
            <summary>
            Gets whether the candidate is relayed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsReflexive">
            <summary>
            Gets whether the candidate is reflexive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidateStats.IsHost">
            <summary>
            Gets whether the candidate is host/local.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidateStats"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJson(FM.LiveSwitch.CandidateStats)">
            <summary>
            Serializes candidate stats to JSON.
            </summary>
            <param name="candidate">The candidate's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.FromJson(System.String)">
            <summary>
            Derializes candidate stats from JSON.
            </summary>
            <param name="candidateJson">The candidate's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.ToJsonArray(FM.LiveSwitch.CandidateStats[])">
            <summary>
            Serializes an array of candidate stats to JSON.
            </summary>
            <param name="candidates">The candidates' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of candidate stats from JSON.
            </summary>
            <param name="candidatesJson">The candidates' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidateStats.IsEquivalent(FM.LiveSwitch.CandidateStats)">
            <summary>
            Checks if a candidate is equivalent to this one.
            </summary>
            <param name="instance">The candidate.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidateType">
            <summary>
            The type of a candidate.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Host">
            <summary>
            Indicates a 'host' candidate, discovered by
            querying a local network interface adapter.
            The candidate should contain a private IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.ServerReflexive">
            <summary>
            Indicates a 'srflx' candidate, discovered by
            using a STUN server to echo back the source
            IP address it sees in a UDP binding request.
            When the STUN server is properly configured,
            the candidate should contain a public IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Relayed">
            <summary>
            Indicates a 'relay' candidate, discovered by
            using a TURN server to set up a public port
            in response to a UDP or TCP allocate request.
            When the TURN server is properly configured,
            the candidate should contain a public IP
            address of the TURN server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.PeerReflexive">
            <summary>
            Indicates a 'prflx' candidate, discovered by
            sending STUN connectivity checks between peers
            residing behind more restrictive firewalls.
            The candidate should contain a public IP
            address of this client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CandidateType.Unknown">
            <summary>
            Indicates an unknown candidate type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.CandidateUtility">
            <summary>
            Utility functions for candidate and candidate pair.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.ProtocolTypeToString(FM.LiveSwitch.ProtocolType)">
            <summary>
            Convert ProtocolType to string.
            </summary>
            <param name="protocolType"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.ProtocolTypeFromString(System.String)">
            <summary>
            Convert string to ProtocolType.
            </summary>
            <param name="protocolTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.CandidatePairStateFromString(System.String)">
            <summary>
            Convert string to CandidatePairState.
            </summary>
            <param name="stateString"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.CandidatePairStateToString(FM.LiveSwitch.CandidatePairState)">
            <summary>
            Convert CandidatePairState to string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.TypeToString(FM.LiveSwitch.CandidateType)">
            <summary>
            Convert CandidateType to string.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidateUtility.TypeFromString(System.String)">
            <summary>
            Convert string to CandidateType.
            </summary>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CertificateInfo">
            <summary>
            Certificate information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.Fingerprint">
            <summary>
            Gets or sets the certificate fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.FingerprintAlgorithm">
            <summary>
            Gets or sets the certificate fingerprint algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateInfo.Base64">
            <summary>
            Gets or sets the certificate in Base64 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CertificateInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJson(FM.LiveSwitch.CertificateInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.ToJsonArray(FM.LiveSwitch.CertificateInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CertificateStats">
            <summary>
            Certificate stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.Fingerprint">
            <summary>
            Gets the fingerprint.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.FingerprintAlgorithm">
            <summary>
            Gets the fingerprint algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CertificateStats.CertificateBase64">
            <summary>
            Gets the certificate in Base64 format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJson(FM.LiveSwitch.CertificateStats)">
            <summary>
            Serializes certificate stats to JSON.
            </summary>
            <param name="certificate">The certificate's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.FromJson(System.String)">
            <summary>
            Derializes certificate stats from JSON.
            </summary>
            <param name="certificateJson">The certificate's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.ToJsonArray(FM.LiveSwitch.CertificateStats[])">
            <summary>
            Serializes an array of certificate stats to JSON.
            </summary>
            <param name="certificates">The certificates' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of certificate stats from JSON.
            </summary>
            <param name="certificatesJson">The certificates' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CertificateStats.IsEquivalent(FM.LiveSwitch.CertificateStats)">
            <summary>
            Checks if a certificate is equivalent to this one.
            </summary>
            <param name="instance">The certificate.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CodecInfo">
            <summary>
            Codec information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.Name">
            <summary>
            Gets or sets the codec name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.ClockRate">
            <summary>
            Gets or sets the codec clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.ChannelCount">
            <summary>
            Gets or sets the codec channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.Parameters">
            <summary>
            Gets or sets the codec parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecInfo.PayloadType">
            <summary>
            Gets or sets the codec payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJson(FM.LiveSwitch.CodecInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="codecInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="codecInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.ToJsonArray(FM.LiveSwitch.CodecInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="codecInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="codecInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.CodecStats">
            <summary>
            Codec stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.CodecType">
            <summary>
            Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.PayloadType">
            <summary>
            Gets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.ClockRate">
            <summary>
            Gets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CodecStats.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.ToJson(FM.LiveSwitch.CodecStats)">
            <summary>
            Serializes codec stats to JSON.
            </summary>
            <param name="codec">The codec's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.FromJson(System.String)">
            <summary>
            Derializes codec stats from JSON.
            </summary>
            <param name="codecJson">The codec's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.CodecStats.IsEquivalent(FM.LiveSwitch.CodecStats)">
            <summary>
            Checks if a codec is equivalent to this one.
            </summary>
            <param name="instance">The codec.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.CodecType">
            <summary>
            A value used to indicate whether this codec is used to encode or decode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CodecType.Encode">
            <summary>
            The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.CodecType.Decode">
            <summary>
            The attached RTCCodecStats represents a media format that the implementation is prepared to decode.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionState">
            <summary>
            The state of a connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.New">
            <summary>
            Indicates that the connection is new and has not been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Initializing">
            <summary>
            Indicates that the connection is being initialized but no connecting attempts have been made.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Connecting">
            <summary>
            Indicates that the connection is currently connecting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Connected">
            <summary>
            Indicates that the connection is currently connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Failing">
            <summary>
            Indicates that the connection has encountered an error and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Failed">
            <summary>
            Indicates that the connection has encountered an error and has cleaned up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Closing">
            <summary>
            Indicates that the connection has been instructed to close and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionState.Closed">
            <summary>
            Indicates that the connection has been instructed to close and has cleaned up.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionStats">
            <summary>
            Connection stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.ExternalId">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.MediaStream">
            <summary>
            Gets the first media stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.MediaStreams">
            <summary>
            Gets the media streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.AudioStream">
            <summary>
            Gets the first audio stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.AudioStreams">
            <summary>
            Gets the audio streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.VideoStream">
            <summary>
            Gets the first video stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.VideoStreams">
            <summary>
            Gets the video streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.DataStream">
            <summary>
            Gets the data stream's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.Streams">
            <summary>
            Gets the streams' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsRelayed">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsReflexive">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionStats.IsHost">
            <summary>
            Gets whether any of the streams are using a transport
            whose active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.GetMediaStream(System.String)">
            <summary>
            Gets a media stream by its identifier.
            </summary>
            <param name="mediaStreamId">The media stream identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.ToJson(FM.LiveSwitch.ConnectionStats)">
            <summary>
            Serializes connection stats to JSON.
            </summary>
            <param name="connection">The connection's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.FromJson(System.String)">
            <summary>
            Derializes connection stats from JSON.
            </summary>
            <param name="connectionJson">The connection's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelInfo">
            <summary>
            Data channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Label">
            <summary>
            Gets or sets the data channel label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Ordered">
            <summary>
            Gets or sets whether the data channel is ordered.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Subprotocol">
            <summary>
            Gets or sets the data channel subprotocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.State">
            <summary>
            Gets or sets the data channel state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelInfo.Report">
            <summary>
            Gets or sets the data channel report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJson(FM.LiveSwitch.DataChannelInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataChannelInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataChannelInfo.
            </summary>
            <param name="dataChannelInfoJson">The serialized Json.</param>
            <returns>The deserialized DataChannelInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.ToJsonArray(FM.LiveSwitch.DataChannelInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="dataChannelInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to an array.
            </summary>
            <param name="dataChannelInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelState">
            <summary>
            A data channel state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.New">
            <summary>
            Indicates the data channel has been created and has not started negotiating yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Connecting">
            <summary>
            Indicates the data channel is in the process of negotiating a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Connected">
            <summary>
            Indicates the data channel has completed negotiation of a secure connection.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Closing">
            <summary>
            Indicates the data channel is in the process of closing due to an intentional request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Closed">
            <summary>
            Indicates the data channel has been closed due to an intentional request.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.DataChannelState.Failed">
            <summary>
            Indicates the data channel has been closed as the result of an error.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelStats">
            <summary>
            Data channel stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Label">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Ordered">
            <summary>
            Gets whether the channel is ordered.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.Protocol">
            <summary>
            Gets the protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:FM.LiveSwitch.DataChannelStats"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJson(FM.LiveSwitch.DataChannelStats)">
            <summary>
            Serializes data channel stats to JSON.
            </summary>
            <param name="dataChannel">The data channel's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.FromJson(System.String)">
            <summary>
            Derializes data channel stats from JSON.
            </summary>
            <param name="dataChannelJson">The data channel's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.ToJsonArray(FM.LiveSwitch.DataChannelStats[])">
            <summary>
            Serializes an array of data channel stats to JSON.
            </summary>
            <param name="dataChannels">The data channels' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of data channel stats from JSON.
            </summary>
            <param name="dataChannelsJson">The data channels' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamInfo">
            <summary>
            Data stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamInfo.Channels">
            <summary>
            Gets or sets the data stream channels.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamInfo.Report">
            <summary>
            Gets or sets the data stream report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJson(FM.LiveSwitch.DataStreamInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataStreamInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataStreamInfo.
            </summary>
            <param name="dataStreamInfoJson">The serialized Json.</param>
            <returns>The deserialized DataStreamInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.ToJsonArray(FM.LiveSwitch.DataStreamInfo[])">
            <summary>
            Serializes an instance array to JSON.
            </summary>
            <param name="dataStreamInfos">The instance array to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to a DataStreamInfo array.
            </summary>
            <param name="dataStreamInfosJson">The serialized JSON.</param>
            <returns>The deserialized DataStreamInfo array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamStats">
            <summary>
            Data stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.MessagesSent">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.MessagesReceived">
            <summary>
            Gets the number of messages received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.DataChannel">
            <summary>
            Gets the first channel's stats.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.DataStreamStats.Channel"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.DataChannels">
            <summary>
            Gets the channels' stats.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.DataStreamStats.Channels"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.GetDataChannel(System.String)">
            <summary>
            Gets a channel by its identifier.
            Obsolete. Alias for GetChannel.
            </summary>
            <param name="dataChannelId">The channel identifier.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.Channel">
            <summary>
            Gets the first channel's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamStats.Channels">
            <summary>
            Gets the channels' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.GetChannel(System.String)">
            <summary>
            Gets a channel by its identifier.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJson(FM.LiveSwitch.DataStreamStats)">
            <summary>
            Serializes data stream stats to JSON.
            </summary>
            <param name="dataStream">The data stream's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.FromJson(System.String)">
            <summary>
            Derializes data stream stats from JSON.
            </summary>
            <param name="dataStreamJson">The data stream's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.ToJsonArray(FM.LiveSwitch.DataStreamStats[])">
            <summary>
            Serializes an array of data stream stats to JSON.
            </summary>
            <param name="dataStreams">The data streams' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of data stream stats from JSON.
            </summary>
            <param name="dataStreamsJson">The data streams' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.AudioEncodingConfig">
            <summary>
            Audio encoding configuration.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioEncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.AudioEncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJson(FM.LiveSwitch.AudioEncodingConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingConfig">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingConfigJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToJsonArray(FM.LiveSwitch.AudioEncodingConfig[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingConfigs">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingConfigsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.AudioEncodingConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Packet">
            <summary>
            A DTMF (telephone-event) packet.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.EventCode">
            <summary>
            Gets or sets the event code.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.End">
            <summary>
            Gets or sets the end-bit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.Volume">
            <summary>
            Gets or sets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
            so the value of this field ranges from 0-63, with higher values indicating lower volume.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Packet.Duration">
            <summary>
            Gets or sets the duration in timestamp units (based on the negotiated clock rate).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Packet" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.ReadFrom(FM.LiveSwitch.DataBuffer)">
            <summary>
            Reads from a data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.GetLength">
            <summary>
            Gets the length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Packet.WriteTo(FM.LiveSwitch.DataBuffer)">
            <summary>
            Writes to a data buffer.
            </summary>
            <param name="dataBuffer">The data buffer.</param>
        </member>
        <member name="T:FM.LiveSwitch.Dtmf.Tone">
            <summary>
            A DTMF (telephone-event) tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Duration">
            <summary>
            Gets or sets the duration in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.End">
            <summary>
            Gets or sets whether this is the final
            tone raised for the current value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Tone"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Dtmf.Tone"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.Clone(System.Int32)">
            <summary>
            Clones this instance.
            </summary>
            <param name="duration">The new duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJson">
            <summary>
            Serializes to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJson(FM.LiveSwitch.Dtmf.Tone)">
            <summary>
            Serializes to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromJson(System.String)">
            <summary>
            Deserializes from JSON.
            </summary>
            <param name="toneJson">The JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToJsonArray(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="tones">The array.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="tonesJson">The JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToPacket(System.Int32)">
            <summary>
            Serializes to a packet.
            </summary>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromPacket(FM.LiveSwitch.Dtmf.Packet,System.Int32)">
            <summary>
            Deserializes from a packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="clockRate">The clock rate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToString">
            <summary>
            Serializes to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.EmptyValue">
            <summary>
            Gets the empty value ("").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.PauseValue">
            <summary>
            Gets the pause value (",").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.ZeroValue">
            <summary>
            Gets the zero value ("0").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.OneValue">
            <summary>
            Gets the one value ("1").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.TwoValue">
            <summary>
            Gets the two value ("2").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.ThreeValue">
            <summary>
            Gets the three value ("3").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.FourValue">
            <summary>
            Gets the four value ("4").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.FiveValue">
            <summary>
            Gets the five value ("5").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.SixValue">
            <summary>
            Gets the six value ("6").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.SevenValue">
            <summary>
            Gets the seven value ("7").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.EightValue">
            <summary>
            Gets the eight value ("8").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.NineValue">
            <summary>
            Gets the nine value ("9").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.StarValue">
            <summary>
            Gets the star value ("*").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.HashValue">
            <summary>
            Gets the hash value ("#").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.AValue">
            <summary>
            Gets the A value ("A").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.BValue">
            <summary>
            Gets the B value ("B").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.CValue">
            <summary>
            Gets the C value ("C").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.DValue">
            <summary>
            Gets the D value ("D").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.PauseDuration">
            <summary>
            Gets the pause duration in milliseconds (2000).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Empty">
            <summary>
            Gets the empty tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Pause">
            <summary>
            Gets the pause tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Zero">
            <summary>
            Gets the zero tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.One">
            <summary>
            Gets the one tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Two">
            <summary>
            Gets the two tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Three">
            <summary>
            Gets the three tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Four">
            <summary>
            Gets the four tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Five">
            <summary>
            Gets the five tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Six">
            <summary>
            Gets the six tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Seven">
            <summary>
            Gets the seven tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Eight">
            <summary>
            Gets the eight tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Nine">
            <summary>
            Gets the nine tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Star">
            <summary>
            Gets the star tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.Hash">
            <summary>
            Gets the hash tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.A">
            <summary>
            Gets A tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.B">
            <summary>
            Gets the B tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.C">
            <summary>
            Gets the C tone.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Dtmf.Tone.D">
            <summary>
            Gets the D tone.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            Each tone will have a duration of 100ms and an inter-tone gap of 100ms.
            </summary>
            <param name="toneString">The tone string.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String,System.Int32)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            Each tone will have an inter-tone gap of 100ms.
            </summary>
            <param name="toneString">The tone string.</param>
            <param name="duration">The duration, in milliseconds (minimum of 40, maximum of 2,000).</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.FromToneString(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a DTMF tone string into an array of tones.
            </summary>
            <param name="toneString">The tone string.</param>
            <param name="duration">The duration, in milliseconds (minimum of 40, maximum of 2,000).</param>
            <param name="interToneGap">The time between tones, in milliseconds (minimum of 40).</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Dtmf.Tone.ToToneString(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Converts an array of DTMF tones into a tone string.
            This discards duration and inter-tone gap data.
            </summary>
            <param name="tones">The tones.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamDescription">
            <summary>
            A stream description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.MediaDescription">
            <summary>
            Gets or sets the media description associated with this stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.StreamType">
            <summary>
            Gets the stream type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamDescription.MediaDescriptionIdentifier">
            <summary>
            Gets the mid associated with this stream, if present. Null if not.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamDescription.#ctor(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Creates a new StreamDescription object.
            </summary>
            <param name="description">SDP MediaDescription of the stream.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoEncodingConfig">
            <summary>
            Video encoding configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncodingConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoEncodingConfig.Scale">
            <summary>
            Gets or sets the target scale.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoEncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoEncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJson(FM.LiveSwitch.VideoEncodingConfig)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingConfig">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingConfigJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToJsonArray(FM.LiveSwitch.VideoEncodingConfig[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingConfigs">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingConfigsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoEncodingConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.EncodingConfig">
            <summary>
            Encoding configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.RtpStreamId">
            <summary>
            Gets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.SynchronizationSource">
            <summary>
            Gets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.Deactivated">
            <summary>
            Gets or sets whether this encoding is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingConfig.Bitrate">
            <summary>
            Gets or sets the bitrate, in kbps.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.EncodingConfig"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.#ctor(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.EncodingConfig"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingConfig.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EncryptionMode">
            <summary>
            The encryption mode for the stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Null">
            <summary>
            No encryption and no integrity checking.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Aes128Strong">
            <summary>
            AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.Aes128Weak">
            <summary>
            AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.NullStrong">
            <summary>
            Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EncryptionMode.NullWeak">
            <summary>
            Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.FormatInfo">
            <summary>
            Format information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.CodecName">
            <summary>
            Gets or sets the name.
            Obsolete. Alias for <see cref="P:FM.LiveSwitch.FormatInfo.Name"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.ClockRate">
            <summary>
            Gets or sets the clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.FormatInfo.ChannelCount">
            <summary>
            Gets or sets the channel count if available. Unused for video codecs.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
            <param name="codecName">The codec name.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a FormatInfo.
            </summary>
            <param name="name">The name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJson(FM.LiveSwitch.FormatInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="formatInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a FormatInfo.
            </summary>
            <param name="formatInfoJson">The serialized Json.</param>
            <returns>The deserialized FormatInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToJsonArray(FM.LiveSwitch.FormatInfo[])">
            <summary>
            Serializes an array of format infos to JSON.
            </summary>
            <param name="formatInfos">The format infos.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromJsonArray(System.String)">
            <summary>
            Derializes an array of format infos from JSON.
            </summary>
            <param name="formatInfosJson">The format infos in JSON format.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.FromSdpMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Converts the RTP map attributes in an SDP media description
            to an array of FormatInfo objects.
            </summary>
            <param name="sdpMediaDescription">The SDP media description.</param>
            <returns>An array of FormatInfo objects.</returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.IsEquivalent(System.String,System.Int32,System.Int32)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="name">The format name.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.FormatInfo.IsEquivalent(FM.LiveSwitch.FormatInfo)">
            <summary>
            Checks if an instance is equivalent to this one.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Info">
            <summary>
            Information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Info.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Info.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Info.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessBoolean(System.Boolean,System.Boolean)">
            <summary>
            Processes a boolean for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessShort(System.Int16,System.Int16)">
            <summary>
            Processes a short for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessInteger(System.Int32,System.Int32)">
            <summary>
            Processes an integer for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessLong(System.Int64,System.Int64)">
            <summary>
            Processes a long for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloat(System.Single,System.Single)">
            <summary>
            Processes a float for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessDouble(System.Double,System.Double)">
            <summary>
            Processes a double for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessString(System.String,System.String)">
            <summary>
            Processes a string for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessBooleanArray(System.Boolean[],System.Boolean[])">
            <summary>
            Processes a boolean array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessShortArray(System.Int16[],System.Int16[])">
            <summary>
            Processes a short array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessIntegerArray(System.Int32[],System.Int32[])">
            <summary>
            Processes a integer array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessLongArray(System.Int64[],System.Int64[])">
            <summary>
            Processes a long array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloatArray(System.Single[],System.Single[])">
            <summary>
            Processes a float array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessFloatArray(System.Double[],System.Double[])">
            <summary>
            Processes a double array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessObject``1(``0,``0)">
            <summary>
            Processes an object for an info.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Info.ProcessArray``1(``0[],``0[])">
            <summary>
            Processes an array for an info.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values are not equivalent to the old values; otherwise null.</returns>
        </member>
        <member name="T:FM.LiveSwitch.LayoutFrame">
            <summary>
            A layout frame definition, including X/Y coordinates and width/height values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Width">
            <summary>
            Gets or sets the width value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Height">
            <summary>
            Gets or sets the height value.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.ViewId">
            <summary>
            Gets or sets the view ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LayoutFrame.Orientation">
            <summary>
            Gets or sets the orientation in degrees.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.LayoutFrame"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="width">The width value.</param>
            <param name="height">The height value.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.IsEquivalent(FM.LiveSwitch.LayoutFrame)">
            <summary>
            Determines whether the specified layout frame is equivalent.
            </summary>
            <param name="layoutFrame">The layout frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.ToJson(FM.LiveSwitch.LayoutFrame)">
            <summary>
            Serializes a layout frame to JSON.
            </summary>
            <param name="layoutFrame">The layout frame.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.FromJson(System.String)">
            <summary>
            Deserializes a layout frame from JSON.
            </summary>
            <param name="layoutFrameJson">The layout frame JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.LayoutFrame.GetScaledFrame(FM.LiveSwitch.LayoutScale,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a scaled frame.
            </summary>
            <param name="scale">The scaling algorithm to use.</param>
            <param name="outerWidth">The width of the outer container.</param>
            <param name="outerHeight">The height of the outer container.</param>
            <param name="innerWidth">The width of the inner element.</param>
            <param name="innerHeight">The height of the inner element.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.LayoutScale">
            <summary>
            Specifies how an element should be scaled within a layout.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Contain">
            <summary>
            Indicates that the element should be uniformly scaled
            (maintaining aspect ratio) to the largest size such
            that both its width and its height can fit inside its
            bounding box.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Cover">
            <summary>
            Indicates that the element should be uniformly scaled
            (maintaining aspect ratio) to be as large as possible
            so that the bounding box is completely covered. Some
            parts of the element may not be in view (cropped).
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.LayoutScale.Stretch">
            <summary>
            Indicates that the element should be non-uniformly
            scaled (not maintaining aspect ratio) so that the
            bounding box is completely covered, but all parts
            of the element are in view (no cropping).
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentInfo">
            <summary>
            Media component information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.Track">
            <summary>
            Gets or sets track.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.Codec">
            <summary>
            Gets or sets codec.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentInfo.SynchronizationSource">
            <summary>
            Gets or sets synchronization source of media track.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.#ctor(FM.LiveSwitch.MediaComponentStats,FM.LiveSwitch.MediaComponentStats)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentInfo"/> class.
            </summary>
            <param name="stats"></param>
            <param name="lastStats"></param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentStats">
            <summary>
            Media component stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.RtpStreamId">
            <summary>
            Gets or sets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.RepairedRtpStreamId">
            <summary>
            Gets or sets the repaired RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.Track">
            <summary>
            Gets or sets the track's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.Codec">
            <summary>
            Gets or sets the codec stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.NackCount">
            <summary>
            Gets or sets the NACK count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.SliCount">
            <summary>
            Gets or sets the SLI count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.PliCount">
            <summary>
            Gets or sets the PLI count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.FirCount">
            <summary>
            Gets or sets the FIR count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentStats.LrrCount">
            <summary>
            Gets or sets the LRR count.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaConfig`1">
            <summary>
            A media configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaConfig`1.ClockRate">
            <summary>
            Gets the clock rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaConfig`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaConfig`1"/> class.
            </summary>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaConfig`1.IsEquivalent(`0)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverInfo">
            <summary>
            Media receiver information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverInfo.Sink">
            <summary>
            Gets or sets sink.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverInfo.Report">
            <summary>
            Gets or sets report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaReceiverInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJson(FM.LiveSwitch.MediaReceiverInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaReceiver">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaReceiverJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.ToJsonArray(FM.LiveSwitch.MediaReceiverInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaReceivers">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaReceiversJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverStats">
            <summary>
            Media receiver stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsReceived">
            <summary>
            Gets the number of packets received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsLost">
            <summary>
            Gets the number of packets lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.Jitter">
            <summary>
            Gets the jitter in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsDiscarded">
            <summary>
            Gets the number of packets discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsDuplicated">
            <summary>
            Gets the number of packets duplicated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.PacketsRepaired">
            <summary>
            Gets the number of packets repaired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverStats.Sink">
            <summary>
            Gets the sink stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJson(FM.LiveSwitch.MediaReceiverStats)">
            <summary>
            Serializes media receiver stats to JSON.
            </summary>
            <param name="mediaReceiver">The media receiver's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.FromJson(System.String)">
            <summary>
            Derializes media receiver stats from JSON.
            </summary>
            <param name="mediaReceiverJson">The media receiver's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.ToJsonArray(FM.LiveSwitch.MediaReceiverStats[])">
            <summary>
            Serializes media receiver stats array to JSON.
            </summary>
            <param name="mediaReceivers">The media receivers' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.FromJsonArray(System.String)">
            <summary>
            Derializes media receiver stats array from JSON.
            </summary>
            <param name="mediaReceiversJson">The media receivers' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverStats.IsEquivalent(FM.LiveSwitch.MediaReceiverStats)">
            <summary>
            Checks if a media receiver is equivalent to this one.
            </summary>
            <param name="instance">The media receiver.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderInfo">
            <summary>
            Media sender information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderInfo.Source">
            <summary>
            Gets or sets source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderInfo.Report">
            <summary>
            Gets or sets report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSenderInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJson(FM.LiveSwitch.MediaSenderInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSender">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSenderJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.ToJsonArray(FM.LiveSwitch.MediaSenderInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSenders">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSendersJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderStats">
            <summary>
            Media sender stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.PacketsSent">
            <summary>
            Gets the number of packets sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.RoundTripTime">
            <summary>
            Gets the round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderStats.Source">
            <summary>
            Gets the source stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJson(FM.LiveSwitch.MediaSenderStats)">
            <summary>
            Serializes media sender stats to JSON.
            </summary>
            <param name="mediaSender">The media sender's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.FromJson(System.String)">
            <summary>
            Derializes media sender stats from JSON.
            </summary>
            <param name="mediaSenderJson">The media sender's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.ToJsonArray(FM.LiveSwitch.MediaSenderStats[])">
            <summary>
            Serializes a media sender stats array to JSON.
            </summary>
            <param name="mediaSenders">The media senders' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.FromJsonArray(System.String)">
            <summary>
            Derializes a media sender stats array from JSON.
            </summary>
            <param name="mediaSendersJson">The media senders' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderStats.IsEquivalent(FM.LiveSwitch.MediaSenderStats)">
            <summary>
            Checks if a media sender is equivalent to this one.
            </summary>
            <param name="instance">The media sender.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkInfo">
            <summary>
            Media sink information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.Tag">
            <summary>
            Gets or sets the media sink tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.Label">
            <summary>
            Gets or sets the media sink label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.OutputId">
            <summary>
            Gets or sets the media sink output id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.OutputName">
            <summary>
            Gets or sets the media sink output name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkInfo.InputFormat">
            <summary>
            Gets or sets the media sink input format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSinkInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJson(FM.LiveSwitch.MediaSinkInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSinkInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSinkInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.ToJsonArray(FM.LiveSwitch.MediaSinkInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSinkInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSinkInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSinkStats">
            <summary>
            Media sink stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.Muted">
            <summary>
            Gets or sets the muted flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.OutputId">
            <summary>
            Gets or sets the output identifier.
            </summary> 
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.OutputName">
            <summary>
            Gets or sets the output name.
            </summary>  
        </member>
        <member name="P:FM.LiveSwitch.MediaSinkStats.InputFormat">
            <summary>
            Gets or sets the input format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJson(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>Serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.ToJsonArray(FM.LiveSwitch.MediaSinkStats[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="arrayJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSinkStats.IsEquivalent(FM.LiveSwitch.MediaSinkStats)">
            <summary>
            Checks if a source is equivalent to this one.
            </summary>
            <param name="instance">The source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceStats">
            <summary>
            Media source stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Tag">
            <summary>
            Gets or sets the tag.
            </summary>    
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Label">
            <summary>
            Gets or sets the label.
            </summary> 
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.Muted">
            <summary>
            Gets or sets the muted flag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.InputId">
            <summary>
            Gets or sets the input identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.InputName">
            <summary>
            Gets or sets the input name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceStats.OutputFormat">
            <summary>
            Gets or sets the output format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.ToJson(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The serialized Json.</param>
            <returns>The deserialized VideoSourceInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceStats.IsEquivalent(FM.LiveSwitch.MediaSourceStats)">
            <summary>
            Checks if a source is equivalent to this one.
            </summary>
            <param name="instance">The source.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaStats">
            <summary>
            Media stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStats.Track">
            <summary>
            Gets the first track's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStats.Tracks">
            <summary>
            Gets the tracks' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.GetTrack(System.String)">
            <summary>
            Gets a track by its identifier.
            </summary>
            <param name="trackId">The track identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.ToJson(FM.LiveSwitch.MediaStats)">
            <summary>
            Serializes media stats to JSON.
            </summary>
            <param name="media">The media's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.FromJson(System.String)">
            <summary>
            Derializes media stats from JSON.
            </summary>
            <param name="mediaJson">The media's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EncodingInfo">
            <summary>
            Encoding information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.RtpStreamId">
            <summary>
            Gets or sets the RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Deactivated">
            <summary>
            Gets or sets whether this encoding is deactivated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Bitrate">
            <summary>
            Gets or sets the bitrate, in kbps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.FrameRate">
            <summary>
            Gets or sets the frame-rate, in fps.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.Scale">
            <summary>
            Gets or sets the target scale.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledSize">
            <summary>
            Gets the scaled size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledWidth">
            <summary>
            Gets the scaled width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.ScaledHeight">
            <summary>
            Gets the scaled height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EncodingInfo.IsEmpty">
            <summary>
            Gets or sets whether this encoding is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJson(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="encodingInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="encodingInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToJsonArray(FM.LiveSwitch.EncodingInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="encodingInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="encodingInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo)">
            <summary>
            Determines whether the specified encoding is equivalent.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,System.Boolean)">
            <summary>
            Determines whether the specified encoding is equivalent.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="restrictionsOnly">Whether to check restrictions only.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Determines whether the two encodings are equivalent.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.IsEquivalent(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo,System.Boolean)">
            <summary>
            Determines whether the two encodings are equivalent.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <param name="restrictionsOnly">Whether to check restrictions only.</param>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A string that represents this instance.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(System.String)">
            <summary>
            Converts this instance into an SDP RID attribute.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(System.String,System.Boolean)">
            <summary>
            Converts this instance into an SDP RID attribute.
            </summary>
            <param name="direction">The direction.</param>
            <param name="includeRestrictions">Whether to include restrictions.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(FM.LiveSwitch.EncodingInfo,System.String)">
            <summary>
            Converts an instance into an SDP RID attribute.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.ToSdpRidAttribute(FM.LiveSwitch.EncodingInfo,System.String,System.Boolean)">
            <summary>
            Converts an instance into an SDP RID attribute.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="direction">The direction.</param>
            <param name="includeRestrictions">Whether to include restrictions.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.FromSdpRidAttribute(FM.LiveSwitch.Sdp.Rtp.RidAttribute)">
            <summary>
            Converts an SDP RID attribute into an instance.
            </summary>
            <param name="ridAttribute">The SDP RID attribute.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.Min(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Returns a new encoding with each value
            being the minimum of two input encodings.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <returns>A new encoding.</returns>
        </member>
        <member name="M:FM.LiveSwitch.EncodingInfo.Max(FM.LiveSwitch.EncodingInfo,FM.LiveSwitch.EncodingInfo)">
            <summary>
            Returns a new encoding with each value
            being the maximum of two input encodings.
            </summary>
            <param name="encoding1">The first encoding.</param>
            <param name="encoding2">The second encoding.</param>
            <returns>A new encoding.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaStreamInfo">
            <summary>
            Media stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendMuted">
            <summary>
            Gets or sets whether the media stream has muted sending.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendDisabled">
            <summary>
            Gets or sets whether the media stream has the send direction disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveDisabled">
            <summary>
            Gets or sets whether the media stream has the receive direction disabled.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendFormats">
            <summary>
            Gets or sets the media stream send formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveFormats">
            <summary>
            Gets or sets the media stream receive formats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.SendEncodings">
            <summary>
            Gets or sets the media stream send encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ReceiveEncodings">
            <summary>
            Gets or sets the media stream receive encodings.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Direction">
            <summary>
            Gets or sets the media stream direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.LocalBandwidth">
            <summary>
            Gets or sets the media stream's local bandwidth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.RemoteBandwidth">
            <summary>
            Gets or sets the media stream's remote bandwidth.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.MaxFrameWidth">
            <summary>
            Gets or sets the media stream's maximum frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.MaxFrameHeight">
            <summary>
            Gets or sets the media stream's maximum frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Sender">
            <summary>
            Gets or sets the first media stream sender information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Senders">
            <summary>
            Gets or sets the media stream senders information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Receiver">
            <summary>
            Gets or sets the first media stream receiver information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.Receivers">
            <summary>
            Gets or sets the media stream receivers information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamInfo.ControlTransportId">
            <summary>
            Gets or sets the control transport id.
            This will be <c>null</c> if BUNDLE is active.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJson(FM.LiveSwitch.MediaStreamInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaStreamInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaStreamInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.ToJsonArray(FM.LiveSwitch.MediaStreamInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaStreamInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaStreamInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaStreamStats">
            <summary>
            Media stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.MaxSendBitrate">
            <summary>
            Gets the max send bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.MaxReceiveBitrate">
            <summary>
            Gets the max receive bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Sender">
            <summary>
            Gets the first sender's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Senders">
            <summary>
            Gets the senders' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Receiver">
            <summary>
            Gets the first receiver's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaStreamStats.Receivers">
            <summary>
            Gets the receivers' stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJson(FM.LiveSwitch.MediaStreamStats)">
            <summary>
            Serializes media stream stats to JSON.
            </summary>
            <param name="mediaStream">The media stream's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.FromJson(System.String)">
            <summary>
            Derializes media stream stats from JSON.
            </summary>
            <param name="mediaStreamJson">The media stream's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.ToJsonArray(FM.LiveSwitch.MediaStreamStats[])">
            <summary>
            Serializes an array of media stream stats to JSON.
            </summary>
            <param name="mediaStreams">The media streams' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of media stream stats from JSON.
            </summary>
            <param name="mediaStreamsJson">The media streams' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaStreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackInfo">
            <summary>
            Media track information
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Stopped">
            <summary>
            Gets or sets the whether the media track is stopped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Detached">
            <summary>
            Gets or sets the whether the media track is detached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Muted">
            <summary>
            Gets or sets the whether the media track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackInfo.Report">
            <summary>
            Gets or sets the data stream report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.#ctor">
            <summary>
            Create MediaTrackInfo instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.#ctor(FM.LiveSwitch.MediaTrackStats,FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Create MediaTrackInfo instance.
            </summary>
            <param name="stats"></param>
            <param name="lastStats"></param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJson(FM.LiveSwitch.MediaTrackInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaTrackInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaTrackInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.ToJsonArray(FM.LiveSwitch.MediaTrackInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaTrackInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaTrackInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackStats">
            <summary>
            Media track stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Stopped">
            <summary>
            Gets whether the track is stopped.
            Set by source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Detached">
            <summary>
            Gets whether the track is detached.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Muted">
            <summary>
            Gets whether the track is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.SynchronizationSource">
            <summary>
            Gets the first synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.SynchronizationSources">
            <summary>
            Gets the synchronization sources.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RtpStreamId">
            <summary>
            Gets the first RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RtpStreamIds">
            <summary>
            Gets the RTP stream identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RepairedRtpStreamId">
            <summary>
            Gets the first repaired RTP stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.RepairedRtpStreamIds">
            <summary>
            Gets the repaired RTP stream identifiers.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.MaxBitrate">
            <summary>
            Gets the maximum bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.MinBitrate">
            <summary>
            Gets the minimum bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.Bitrate">
            <summary>
            Gets the bitrate.
            Set by the encoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameWidth">
            <summary>
            Gets the frame width. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameHeight">
            <summary>
            Gets the frame height. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FrameRate">
            <summary>
            Gets the frame rate. Video-only.
            Set by encoder or decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesSent">
            <summary>
            Gets the number of frames sent.
            Set by packetizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesReceived">
            <summary>
            Gets the number of frames received.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesDropped">
            <summary>
            Gets the number of frames dropped. Video-only.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesCorrupted">
            <summary>
            Gets the number of corrupted frames. Video-only.
            Set by depacketizer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesDecoded">
            <summary>
            Gets the number of frames decoded.
            Set by decoder.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackStats.FramesEncoded">
            <summary>
            Gets the number of frames encoded.
            Set by encoder.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJson(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Serializes media track stats to JSON.
            </summary>
            <param name="mediaTrack">The media track's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.FromJson(System.String)">
            <summary>
            Derializes media track stats from JSON.
            </summary>
            <param name="mediaTrackJson">The media track's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.ToJsonArray(FM.LiveSwitch.MediaTrackStats[])">
            <summary>
            Serializes an array of media track stats to JSON.
            </summary>
            <param name="mediaTracks">The media tracks' stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.FromJsonArray(System.String)">
            <summary>
            Derializes an array of media track stats from JSON.
            </summary>
            <param name="mediaTracksJson">The media tracks' stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackStats.IsEquivalent(FM.LiveSwitch.MediaTrackStats)">
            <summary>
            Checks if a track is equivalent to this one.
            </summary>
            <param name="instance">The track.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaSourceInfo">
            <summary>
            Media source information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Tag">
            <summary>
            Gets or sets the media source tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Label">
            <summary>
            Gets or sets the media source label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.Muted">
            <summary>
            Gets or sets the whether the media source is muted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.InputId">
            <summary>
            Gets or sets the media source input identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.InputName">
            <summary>
            Gets or sets the media source input name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSourceInfo.OutputFormat">
            <summary>
            Gets or sets the media source output format.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSourceInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJson(FM.LiveSwitch.MediaSourceInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSourceInfo">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSourceInfoJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.ToJsonArray(FM.LiveSwitch.MediaSourceInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSourceInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSourceInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSourceInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Point">
            <summary>
            A point (x and y coordinates).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.Empty">
            <summary>
            Gets the empty point (0,0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Point.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Point"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Point"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToJson(FM.LiveSwitch.Point)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="point">The point.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="pointJson">The JSON to deserialize.</param>
            <returns>The deserialized point.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToString">
            <summary>
            Returns a string that represents this instance using format "{x},{y}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.IsEquivalent(FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.IsEquivalent(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the two points are equivalent.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:FM.LiveSwitch.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.Equals(FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="point">The point to compare with the current object.</param>
            <returns>true if the specified point is equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.op_Equality(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is equivalent to the current point.
            Does not require the object pointers to match.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>true if the specified point is equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.op_Inequality(FM.LiveSwitch.Point,FM.LiveSwitch.Point)">
            <summary>
            Determines whether the specified point is NOT equivalent to the current point.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>true if the specified point is NOT equivalent to the current point; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Point"/> to a System.Drawing.Point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.ToStruct(FM.LiveSwitch.Point)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Point"/> to a System.Drawing.Point.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Point.FromStruct(System.Drawing.Point)">
            <summary>
            Converts a System.Drawing.Point to a <see cref="T:FM.LiveSwitch.Point"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Rectangle">
            <summary>
            A rectangle (size and origin).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Empty">
            <summary>
            Gets the empty rectangle (0,0/0x0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.X">
            <summary>
            Gets the origin X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Y">
            <summary>
            Gets the origin Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Width">
            <summary>
            Gets the size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Rectangle.Height">
            <summary>
            Gets the size height.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rectangle"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Rectangle"/> class.
            </summary>
            <param name="origin">The origin.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToJson(FM.LiveSwitch.Rectangle)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="rectangleJson">The JSON to deserialize.</param>
            <returns>The deserialized rectangle.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToString">
            <summary>
            Returns a string that represents this instance using format "{origin}/{size}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.IsEquivalent(FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.IsEquivalent(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the two rectangles are equivalent.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.Equals(FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="rectangle">The rectangle to compare with the current object.</param>
            <returns>true if the specified rectangle is equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.op_Equality(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is equivalent to the current rectangle.
            Does not require the object pointers to match.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>true if the specified rectangle is equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.op_Inequality(FM.LiveSwitch.Rectangle,FM.LiveSwitch.Rectangle)">
            <summary>
            Determines whether the specified rectangle is NOT equivalent to the current rectangle.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>true if the specified rectangle is NOT equivalent to the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Rectangle"/> to a System.Drawing.Rectangle.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.ToStruct(FM.LiveSwitch.Rectangle)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Rectangle"/> to a System.Drawing.Rectangle.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Rectangle.FromStruct(System.Drawing.Rectangle)">
            <summary>
            Converts a System.Drawing.Rectangle to a <see cref="T:FM.LiveSwitch.Rectangle"/>.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AddressType">
            <summary>
            Defines valid SDP address types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AddressType.IP4">
            <summary>
            Gets the SDP address type meaning "IP version 4".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AddressType.IP6">
            <summary>
            Gets the SDP address type meaning "IP version 6".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AddressType.GetAddressTypeForAddress(System.String)">
            <summary>
            Gets the SDP address type for the specified IP address.
            </summary>
            <param name="ipAddress">The IP address.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Attribute">
            <summary>
            An SDP attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Attribute.AttributeType">
            <summary>
            Gets or sets this Attribute's Type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Attribute.MultiplexingCategory">
            <summary>
            Gets or sets the Multiplexing Category of this Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.RegisterAttribute(System.Type,System.String,System.Boolean,System.Boolean,FM.LiveSwitch.Function1{FM.LiveSwitch.Sdp.AttributeCreationArgs,FM.LiveSwitch.Sdp.Attribute})">
            <summary>
            Registers an attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            <param name="name">The name.</param>
            <param name="sessionLevel">Whether the attribute applies to sessions.</param>
            <param name="mediaLevel">Whether the attribute applies to media streams.</param>
            <param name="creationDelegate">The creation delegate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.UnregisterAttribute(System.Type)">
            <summary>
            Unregisters an attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.GetTypeName(System.Type)">
            <summary>
            Gets the name of the attribute type.
            </summary>
            <param name="type">The attribute type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.IsSessionLevel(System.Type)">
            <summary>
            Determines whether the type applies to sessions.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.IsMediaLevel(System.Type)">
            <summary>
            Determines whether the type applies to media streams.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Attribute.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCategory">
            <summary>
            Specified Multiplexing category of SDP Attribute.
            Rules governing SDP Attribute multiplexing are as per 
            draft-ietf-mmusic-sdp-mux-attributes
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Normal">
            <summary>
            The attributes in the NORMAL category can be independently specified
            when multiplexed and they retain their original semantics.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Caution">
            <summary>
            The attributes in the CAUTION category are advised against
            multiplexing since their usage under multiplexing might lead to
            incorrect behaviour.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Identical">
            <summary>
            The attributes and their associated values (if any) in the IDENTICAL
            category MUST be repeated across all the media descriptions under
            multiplexing.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Sum">
            <summary>
            The attributes in the SUM category can be set as they are normally
            used but software using them in the multiplexing scenario MUST apply
            the sum of all the attributes being multiplexed instead of trying to
            use them independently.This is typically used for bandwidth or
            other rate limiting attributes to the underlying transport.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Transport">
            <summary>
            The attributes in the TRANSPORT category can be set normally for
            multiple items in a multiplexed group but the software MUST pick the
            one that's associated with the "m=" line whose information is used
            for setting up the underlying transport.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Inherit">
             <summary>
             The attributes in the INHERIT category encapsulate other SDP
             attributes or parameters.  These attributes inherit their
             multiplexing characteristics from the attributes or parameters they
             encapsulate.  Such attributes are defined in [RFC3407], [RFC5939] and
             [RFC6871] as part of a generic framework for indicating and
             negotiating transport, media, and media format related capabilities
             in the SDP.
            
             The inheritance manifests itself when the encapsulated attribute or
             parameter is being leveraged.  In the case of SDP Capability
             Negotiation [RFC5939] for example, this occurs when a capability
             (encapsulating attribute) is used as part of a configuration; the
             configuration inherits the multiplexing category of each of its
             constituent (encapsulated) attributes and parameters.  The inherited
             attributes MUST be coherent in order to form a valid configuration
             from a multiplexing point of view (see Section 14 for further
             details).
             </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.IdenticalPerPT">
            <summary>
            The attributes in the IDENTICAL-PER-PT category define the RTP
            payload configuration on per Payload Type basis and MUST have
            identical values across all the media descriptions for a given RTP
            Payload Type when repeated.  These Payload Types identify the same
            codec configuration as defined in the Section 10.1.2 of
            [I-D.ietf-mmusic-sdp-bundle-negotiation] under this context.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeCategory.Special">
            <summary>
            For the attributes in the SPECIAL category, the text in the
            specification defining the attribute MUST be consulted for further
            handling when multiplexed.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCollection">
            <summary>
            Collection of SDP Attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.#ctor">
            <summary>
            Create a collection of SDP Attributes
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.AddAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a specified attribute to the collection of attributes.
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.Remove(FM.LiveSwitch.Sdp.AttributeType)">
            <summary>
            Removes all the attributes of the specified type from the given collection.
            </summary>
            <param name="attributeType">Attribute type to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.Remove(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Removes the attribute from the given collection if it is present.
            </summary>
            <param name="attribute">Attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.ReplaceAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Replaces existing attribute(s) in the collection with the given attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.TryGetAttribute(FM.LiveSwitch.Sdp.AttributeType,FM.LiveSwitch.Sdp.Attribute@)">
            <summary>
            Returns a value indicating whether attributes of the specified type exist in the collection and populates the out parameter with the first encountered attributes if any are found.
            </summary>
            <param name="type">Sdp attribute type.</param>
            <param name="attribute">Sdp attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.TryGetAttributes(FM.LiveSwitch.Sdp.AttributeType,FM.LiveSwitch.Sdp.Attribute[]@)">
            <summary>
            Returns a value indicating whether attributes of the specified type exist in the collection and populates the out parameter with the attributes if any are found.
            </summary>
            <param name="type">Sdp attribute type.</param>
            <param name="attributes">Sdp attributes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCollection.ToArray">
            <summary>
            Returns an array of attributes that belong to this collection.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeCreationArgs">
            <summary>
            SDP attribute-creation arguments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeCreationArgs.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeCreationArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.AttributeCreationArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeRegistration">
            <summary>
            An SDP attribute registration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.SessionLevel">
            <summary>
            Gets or sets a value indicating whether the attribute applies to sessions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.MediaLevel">
            <summary>
            Gets or sets a value indicating whether the attribute applies to media streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.AttributeRegistration.CreationDelegate">
            <summary>
            Gets or sets the creation delegate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.AttributeRegistration.#ctor(System.String,System.Boolean,System.Boolean,FM.LiveSwitch.Function1{FM.LiveSwitch.Sdp.AttributeCreationArgs,FM.LiveSwitch.Sdp.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.AttributeRegistration"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sessionLevel">A value indicating whether the attribute applies to sessions.</param>
            <param name="mediaLevel">A value indicating whether the attribute applies to media streams.</param>
            <param name="creationDelegate">The creation delegate.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.AttributeType">
            <summary>
            SDP Attribute types
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.UnknownAttribute">
            <summary>
            Unknown SDP Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.DirectionAttribute">
            <summary>
            SDP Direction Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CategoryAttribute">
            <summary>
            SDP Category Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CharacterSetAttribute">
            <summary>
            SDP Character Set Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.ConferenceTypeAttribute">
            <summary>
            SDP Conference Type Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.CryptoAttribute">
            <summary>
            SDP Crypto Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.FormatParametersAttribute">
            <summary>
            SDP Format Parameters Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.FrameRateAttribute">
            <summary>
            SDP Frame Rate Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.KeywordsAttribute">
            <summary>
            SDP Keywords Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.LanguageAttribute">
            <summary>
            SDP Language Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MaxPacketTimeAttribute">
            <summary>
            SDP Max Packet Time Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.OrientationAttribute">
            <summary>
            SDP Orientiation Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.PacketTimeAttribute">
            <summary>
            SDP Packet Time Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.QualityAttribute">
            <summary>
            SDP Quality Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SdpLanguageAttribute">
            <summary>
            SDP Sdp Language Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SetupAttribute">
            <summary>
            SDP Setup Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.ToolAttribute">
            <summary>
            SDP Tool  Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MediaStreamIdSemanticAttribute">
            <summary>
            SDP Media Stream Id Semantic Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.MediaStreamIdAttribute">
            <summary>
            SDP Stream Id Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.BundleOnlyAttribute">
            <summary>
            SDP Bundle-only Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceCandidateAttribute">
            <summary>
            SDP Ice Candidate Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceFingerprintAttribute">
            <summary>
            SDP Ice Fingerprint Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceLiteAttribute">
            <summary>
            SDP Ice Lite Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceMismatchAttribute">
            <summary>
            SDP Ice Mismatch Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceOptionsAttribute">
            <summary>
            SDP Ice Options Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IcePasswordAttribute">
            <summary>
            SDP Ice Password Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceUfragAttribute">
            <summary>
            SDP Ice Ufrag Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.IceRemoteCandidatesAttribute">
            <summary>
            SDP Ice Remote Candidates Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpMapAttribute">
            <summary>
            SDP RTP Map Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpSsrcAttribute">
            <summary>
            SDP RTP SSRC Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpExtMapAttribute">
            <summary>
            SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpAttribute">
            <summary>
            SDP RTCP Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpFeedbackAttribute">
            <summary>
            SDP RTCP Feedback Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtcpMuxAttribute">
            <summary>
            SDP RTCP Mux Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpPortAttribute">
            <summary>
            SDP SCTP Port Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpMapAttribute">
            <summary>
            SDP SCTP Map Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SctpMaxMessageSizeAttribute">
            <summary>
            SDP SCTP Max Message Size Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.GroupAttribute">
            <summary>
            SDP Group Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpRidAttribute">
            <summary>
            SDP RTP RID Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.SimulcastAttribute">
            <summary>
            SDP Simulcast Attribute
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.AttributeType.RtpSsrcGroupAttribute">
            <summary>
            SDP RTP SSRC Group Attribute
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Bandwidth">
            <summary>
            An SDP bandwidth element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType">
            <summary>
            Gets or sets the type of bandwidth. See <see cref="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Bandwidth.Value">
            <summary>
            Gets or sets the bandwidth, typically in kilobits per second.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Bandwidth"/> class.
            </summary>
            <param name="bandwidthType">The type of bandwidth. See <see cref="P:FM.LiveSwitch.Sdp.Bandwidth.BandwidthType"/> for possible values.</param>
            <param name="value">The bandwidth, typically in kilobits per second.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Bandwidth.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Bandwidth"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BandwidthType">
            <summary>
            Defines valid SDP bandwidth types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.ConferenceTotal">
            <summary>
            Gets the SDP bandwidth type meaning "Conference Total".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.ApplicationSpecific">
            <summary>
            Gets the SDP bandwidth type meaning "Application Specific".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.RtcpSenders">
            <summary>
            Gets the SDP bandwidth type meaning "RTCP Senders".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.RtcpReceivers">
            <summary>
            Gets the SDP bandwidth type meaning "RTCP Receivers".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BandwidthType.TransportIndependentApplicationSpecificMaximum">
            <summary>
            Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Base64EncryptionKey">
            <summary>
            An SDP encryption key with a method of "base64".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Base64EncryptionKey.EncodedEncryptionKey">
            <summary>
            Gets or sets the base64-encoded encryption key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Base64EncryptionKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Base64EncryptionKey"/> class.
            </summary>
            <param name="encodedEncryptionKey">The base64-encoded encryption key.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BundleOnlyAttribute">
             <summary>
             Defined in draft-ietf-mmusic-sdp-bundle-negotiation. 
             Attribute is used to identify that a gioven media description can only be used  in bundled group.
             Its formatting in SDP is described by the following BNF:
             Name: bundle-only
            
             Value: N/A
            
             Usage Level: media
            
             Charset Dependent: no
            
             Example:
            
             a=bundle-only
             </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.BundleOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CategoryAttribute">
            <summary>
            This attribute gives the dot-separated hierarchical category of
            the session.  This is to enable a receiver to filter unwanted
            sessions by category.  There is no central registry of
            categories.  It is a session-level attribute, and it is not
            dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CategoryAttribute.Category">
            <summary>
            Gets or sets the dot-separated hierarchical category of the session.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CategoryAttribute"/> class.
            </summary>
            <param name="category">The dot-separated hierarchical category of the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CategoryAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CategoryAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CharacterSetAttribute">
            <summary>
            This specifies the character set to be used to display the
            session name and information data.  By default, the ISO-10646
            character set in UTF-8 encoding is used.  If a more compact
            representation is required, other character sets may be used.
            For example, the ISO 8859-1 is specified with the following SDP
            attribute:
            
               a=charset:ISO-8859-1
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CharacterSetAttribute.CharacterSet">
            <summary>
            Gets or sets the character set to be used to display the session name and information data.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CharacterSetAttribute"/> class.
            </summary>
            <param name="characterSet">The character set to be used to display the session name and information data.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CharacterSetAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CharacterSetAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ClearEncryptionKey">
            <summary>
            An SDP encryption key with a method of "clear".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ClearEncryptionKey.EncryptionKey">
            <summary>
            Gets or sets the untransformed encryption key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ClearEncryptionKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ClearEncryptionKey"/> class.
            </summary>
            <param name="encryptionKey">The untransformed encryption key.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConferenceType">
            <summary>
            Defines valid SDP conference types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Broadcast">
            <summary>
            Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Meeting">
            <summary>
            Gets the SDP conference type meaning "Meeting", which should imply send-receive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Moderated">
            <summary>
            Gets the SDP conference type meaning "Moderated", which should indicate the use of
            a floor control tool and that the media tools are started so as to mute
            new sites joining the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.Test">
            <summary>
            Gets the SDP conference type meaning "Test", which should imply that unless
            explicitly requested otherwise, receivers can safely avoid displaying
            this session description to users.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceType.H332">
            <summary>
            Gets the SDP conference type meaning "H332", which should imply receive-only and
            indicate that this loosely coupled session is part of an H.332 session.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute">
            <summary>
            This specifies the type of the conference.  Suggested values
            are "broadcast", "meeting", "moderated", "test", and "H332".
            "recvonly" should be the default for "type:broadcast" sessions,
            "type:meeting" should imply "sendrecv", and "type:moderated"
            should indicate the use of a floor control tool and that the
            media tools are started so as to mute new sites joining the
            conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType">
            <summary>
            Gets or sets the type of the conference. See <see cref="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute"/> class.
            </summary>
            <param name="conferenceType">The type of the conference. See <see cref="P:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.ConferenceType"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConferenceTypeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConferenceTypeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ConnectionData">
            <summary>
            An SDP connection data element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.ConnectionData.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.ConnectionData.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ConnectionData.ConnectionAddress">
            <summary>
            Gets or sets the connection address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> class.
            </summary>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.Update(System.String)">
            <summary>
            Updates the connection address.
            </summary>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ConnectionData.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.ConnectionData"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoAttribute">
            <summary>
            This gives the maximum amount of media that can be encapsulated
            in each packet, expressed as time in milliseconds.  The time
            SHALL be calculated as the sum of the time the media present in
            the packet represents.  For frame-based codecs, the time SHOULD
            be an integer multiple of the frame size.  This attribute is
            probably only meaningful for audio data, but may be used with
            other media types if it makes sense.  It is a media-level
            attribute, and it is not dependent on charset.  Note that this
            attribute was introduced after RFC 2327, and non-updated
            implementations will ignore this attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.CryptoSuite">
            <summary>
            Gets or sets the crypto suite. See <see cref="P:FM.LiveSwitch.Sdp.CryptoAttribute.CryptoSuite"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.KeyParams">
            <summary>
            Gets or sets the key parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoAttribute.SessionParams">
            <summary>
            Gets or sets the session parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CryptoAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="cryptoSuite">The crypto suite.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.CryptoAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetKey">
            <summary>
            Gets the key from the "inline" key parameter.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetSalt">
            <summary>
            Gets the salt from the "inline" key parameter.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.SetKeySalt(System.Byte[],System.Byte[])">
            <summary>
            Sets the key and salt for the "inline" key parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoKeyMethod">
            <summary>
            Defines valid SDP crypto key methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoKeyMethod.Inline">
            <summary>
            Gets the SDP crypto key method meaning "inline".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoSessionParam">
            <summary>
            Defines valid SDP crypto session parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnencryptedSRTP">
            <summary>
            Gets the SDP crypto session parameter meaning "unencrypted SRTP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnencryptedSRTCP">
            <summary>
            Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSessionParam.UnauthenticatedSRTP">
            <summary>
            Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.CryptoSuite">
            <summary>
            Defines valid SDP crypto suites.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.AesCM128HmacSha180">
            <summary>
            Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.AesCm128HmacSha132">
            <summary>
            Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.NullHmacSha180">
            <summary>
            Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.CryptoSuite.NullHmacSha132">
            <summary>
            Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoSuite.GetEncryptionMode(System.String)">
            <summary>
            Converts a crypto-suite string to an EncryptionMode enum.
            </summary>
            <param name="cryptoSuite">The crypto-suite string.</param>
            <returns>The EncryptionMode enum.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.CryptoSuite.GetCryptoSuite(FM.LiveSwitch.EncryptionMode)">
            <summary>
            Converts an EncryptionMode enum to a crypto-suite string.
            </summary>
            <param name="encryptionMode">The EncryptionMode enum.</param>
            <returns>The crypto-suite string.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.DirectionAttribute">
            <summary>
            This specifies the mode in which tools should be started.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.DirectionAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.DirectionAttribute.GenerateDirectionAttribute(FM.LiveSwitch.StreamDirection)">
            <summary>
            Creates a DirectionAttribute for a required direction.
            </summary>
            <param name="direction">Direction.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.EncryptionKey">
            <summary>
            An SDP encryption key element.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.EncryptionKey.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.EncryptionKey"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.EncryptionKey.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.FormatParametersAttribute">
            <summary>
            This attribute allows parameters that are specific to a
            particular format to be conveyed in a way that SDP does not
            have to understand them.  The format must be one of the formats
            specified for the media.  Format-specific parameters may be any
            set of parameters required to be conveyed by SDP and given
            unchanged to the media tool that will use this format.  At most
            one instance of this attribute is allowed for each format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FormatParametersAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FormatParametersAttribute.FormatSpecificParameters">
            <summary>
            Gets the format-specific parameters.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="formatSpecificParameters">The format-specific parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FormatParametersAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.GetFormatSpecificParameter(System.String)">
            <summary>
            Gets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.TryGetFormatSpecificParameter(System.String,System.String@)">
            <summary>
            Tries to get a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.SetFormatSpecificParameter(System.String,System.String)">
            <summary>
            Sets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.UnsetFormatSpecificParameter(System.String)">
            <summary>
            Unsets a format specific parameter.
            </summary>
            <param name="key">The key.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.DeserializeFormatSpecificParameters">
            <summary>
            Creates a dictionary map from the format specific parameters.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FormatParametersAttribute.SerializeFormatSpecificParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the format specific parameters based on a dictionary map.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.FrameRateAttribute">
            <summary>
            This gives the maximum video frame rate in frames/sec.  It is
            intended as a recommendation for the encoding of video data.
            Decimal representations of fractional values using the notation
            "integer.fraction" are allowed.  It is a media-level
            attribute, defined only for video media, and it is not
            dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.FrameRateAttribute.FrameRate">
            <summary>
            Gets or sets the maximum video frame rate in frames/second.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FrameRateAttribute"/> class.
            </summary>
            <param name="frameRate">The maximum video frame rate in frames/second.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.FrameRateAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.FrameRateAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.BundleGroup">
            <summary>
            A bundle group of SDP Media Description elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.BundleOnly">
            <summary>
            Gets a value indicating whether this group contains Bundle-only elements.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.TaggedMSection">
            <summary>
            Gets or sets the tagged m-section of this bundle group.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.MediaDescriptions">
            <summary>
            Gets the mecia descriptions in this bundle group.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleGroup.AddMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description to this bundle group.
            </summary>
            <param name="mediaDescription"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.Mids">
            <summary>
            Gets media description identifiers associated with this bundle group.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.BundleGroup.GroupType">
            <summary>
            Gets the semntic type of this group.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.BundleGroup.#ctor(FM.LiveSwitch.Sdp.GroupSemanticsType)">
            <summary>
            Creates a BundleGroup object.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.GroupAttribute">
            <summary>
            Defined in RFC 3388. Attribute is used for grouping together different media streams.
            Its formatting in SDP is described by the following BNF:
               group-attribute    = "a=group:" semantics
                                    * (space identification-tag)
               semantics          = "LS" | "FID" | "BUNDLE"
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.GroupAttribute.Ids">
            <summary>
            Gets the group identification tags.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.GroupAttribute.Semantics">
            <summary>
            Gets the semantics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.#ctor(FM.LiveSwitch.Sdp.GroupSemanticsType,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="type">The semantics type.</param>
            <param name="ids">Group identification ID tags.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.GroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.GroupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.GroupSemanticsType">
            <summary>
            SDP Group Semantics
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.LipSynchronization">
            <summary>
            An application that receives a session description that contains "m"
            lines that are grouped together using LS semantics MUST synchronize 
            the playout of the corresponding media streams.Note that LS
            semantics not only apply to a video stream that has to be
            synchronized with an audio stream.The playout of two streams of the
            same type can be synchronized as well.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.FlowIdentification">
            <summary>
            An "m" line in an SDP session description defines a media stream.
            However, SDP does not define what a media stream is.  This definition
            can be found in the RTSP specification.The RTSP RFC[5] defines a
            media stream as "a single media instance, e.g., an audio stream or a
            video stream as well as a single whiteboard or shared application
            group. When using RTP, a stream consists of all RTP and RTCP packets
            created by a source within an RTP session".
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.Bundling">
            <summary>
            The extension can be used with the Session Description Protocol(SDP) 
            Offer/Answer mechanism[RFC3264] to negotiate which "m=" sections will 
            become part of a BUNDLE group.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.GroupSemanticsType.Unknown">
            <summary>
            Unknown Group semantics type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute">
            <summary>
            The candidate attribute is a media-level attribute only.  It contains
            a transport address for a candidate that can be used for connectivity
            checks.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Foundation">
            <summary>
            Gets or sets the candidate's foundation.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.ComponentId">
            <summary>
            Gets or sets the ID of the component for which this is a candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Protocol">
            <summary>
            Gets or sets the protocol of this candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Priority">
            <summary>
            Gets or sets the priority of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.ConnectionAddress">
            <summary>
            Gets or sets the IP address of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Port">
            <summary>
            Gets or sets the port of the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType">
            <summary>
            Gets or sets the type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.RelatedAddress">
            <summary>
            Gets or sets the IP address related to the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.RelatedPort">
            <summary>
            Gets or sets the port related to the candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.Extensions">
            <summary>
            Gets or sets the extensions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.#ctor(System.String,System.Int64,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute" /> class.
            </summary>
            <param name="foundation">The candidate's foundation.</param>
            <param name="priority">The priority of the candidate.</param>
            <param name="connectionAddress">The IP address of the candidate.</param>
            <param name="port">The port of the candidate.</param>
            <param name="candidateType">The type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType" /> for possible values.</param>
            <param name="componentId">The component identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.#ctor(System.String,System.Int64,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute" /> class.
            </summary>
            <param name="foundation">The candidate's foundation.</param>
            <param name="priority">The priority of the candidate.</param>
            <param name="connectionAddress">The IP address of the candidate.</param>
            <param name="port">The port of the candidate.</param>
            <param name="candidateType">The type of the candidate. See <see cref="P:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.CandidateType" /> for possible values.</param>
            <param name="relatedAddress">The IP address related to the candidate.</param>
            <param name="relatedPort">The port related to the candidate.</param>
            <param name="protocol">The protocol.</param>
            <param name="componentId">The ID of the component for which this is a candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.CandidateAttribute"/> class.
            </summary>
            <param name="value">The attribute as a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.CandidateAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.CandidateType">
            <summary>
            Defines valid SDP candidate types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.Host">
            <summary>
            Gets the SDP candidate type meaning "Host".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.ServerReflexive">
            <summary>
            Gets the SDP candidate type meaning "Server Reflexive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.PeerReflexive">
            <summary>
            Gets the SDP candidate type meaning "Peer Reflexive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.CandidateType.Relayed">
            <summary>
            Gets the SDP candidate type meaning "Relayed".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute">
            <summary>
            The SDP session attribute "fingerprint" provides an encryption
            certificate fingerprint to a remote peer for use with DTLS.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.HashFunction">
            <summary>
            Gets or sets the hash function (i.e. sha-256).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.Fingerprint">
            <summary>
            Gets or sets the fingerprint.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute"/> class.
            </summary>
            <param name="hashFunction">The hash function.</param>
            <param name="fingerprint">The fingerprint.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute"/> class.
            </summary>
            <param name="value">The attribute as a string.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.FingerprintAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute">
            <summary>
            "ice-lite" is a session-level attribute only, and indicates that an
            agent is a lite implementation.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.LiteAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.LiteAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute">
            <summary>
            "ice-mismatch" is a media-level
            attribute only, and when present in an answer, indicates that the
            offer arrived with a default destination for a media component that
            didn't have a corresponding candidate attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.MismatchAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.MismatchAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute">
            <summary>
            The "ice-options" attribute is a session-level attribute.  It
            contains a series of tokens that identify the options supported by
            the agent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.TrickleOptionSet">
            <summary>
            Gets or sets a value indicating whether trickle-ice is supported.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.Tags">
            <summary>
            Gets or sets the tokens that identify options supported by the agent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.#ctor(System.Collections.Generic.List{FM.LiveSwitch.Sdp.Ice.OptionTag})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
            <param name="tags">The tokens that identify options supported by the agent.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionsAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionTag">
            <summary>
            A tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionTag.Trickle">
            <summary>
            Gets the "trickle" option string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.OptionTag.Type">
            <summary>
            Gets or sets the type of this tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionTag.ToString">
            <summary>
            Gets the string representation of this tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.OptionTag.Parse(System.String)">
            <summary>
            Generates a tag object from a string.
            </summary>
            <param name="tagString">The tag string.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.OptionTagType">
            <summary>
            A list of known types for <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionTag"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.Ice.OptionTagType.Unknown">
            <summary>
            Indicates an unknown option tag.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.Ice.OptionTagType.Trickle">
            <summary>
            Indicates the trickle-ice option tag.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute">
            <summary>
            The "ice-pwd" attribute conveys the password used by
            ICE for message integrity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.Password">
            <summary>
            Gets or sets the password used by ICE for message integrity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
            <param name="password">The password used by ICE for message integrity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.PasswordAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.PasswordAttribute.GeneratePassword">
            <summary>
            Generates a random password.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate">
            <summary>
            An SDP remote candidate element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ComponentId">
            <summary>
            Gets or sets the ID of the component for which this is a remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ConnectionAddress">
            <summary>
            Gets or sets the IP address of the remote candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.Port">
            <summary>
            Gets or sets the port of the remote candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate"/> class.
            </summary>
            <param name="componentId">The ID of the component for which this is a remote candidate.</param>
            <param name="connectionAddress">The IP address of the remote candidate.</param>
            <param name="port">The port of the remote candidate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidate.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidate"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute">
            <summary>
            The attribute contains a connection-address and port for each
            component.  The ordering of components is irrelevant.  However, a
            value MUST be present for each component of a media stream.  This
            attribute MUST be included in an offer by a controlling agent for a
            media stream that is Completed, and MUST NOT be included in any other
            case.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.Candidates">
            <summary>
            Gets or sets the array of remote candidates.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.#ctor(FM.LiveSwitch.Sdp.Ice.RemoteCandidate[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute"/> class.
            </summary>
            <param name="candidates">The array of remote candidates.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.RemoteCandidatesAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.TransportProtocol">
            <summary>
            Defines valid SDP transport protocols.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.TransportProtocol.Udp">
            <summary>
            Gets the SDP transport protocol meaning "udp".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.TransportProtocol.Tcp">
            <summary>
            Gets the SDP transport protocol meaning "tcp".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag">
            <summary>
            A trickle-ice tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.TrickleIceOptionTag.ToString">
            <summary>
            Gets the string representation of this tag
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute">
            <summary>
            The "ice-ufrag" attribute conveys the username fragment
            used by ICE for message integrity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.UfragAttribute.Ufrag">
            <summary>
            Gets or sets the username fragment used by ICE for message integrity.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
            <param name="ufrag">The username fragment used by ICE for message integrity.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UfragAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.GetAttributeValue">
            <summary>
            Gets the value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UfragAttribute.GenerateUfrag">
            <summary>
            Generates a username fragment.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag">
            <summary>
            An unknown tag for an <see cref="T:FM.LiveSwitch.Sdp.Ice.OptionsAttribute"/>
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.TagString">
            <summary>
            Gets the tag string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Ice.UnknownIceOptionTag.ToString">
            <summary>
            Gets the string representation of this tag.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.InactiveAttribute">
            <summary>
            This specifies that the tools should be started in inactive
            mode.  This is necessary for interactive conferences where
            users can put other users on hold.  No media is sent over an
            inactive media stream.  Note that an RTP-based system SHOULD
            still send RTCP, even if started inactive.  It can be either a
            session or media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.InactiveAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.InactiveAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.InactiveAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.InactiveAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.KeywordsAttribute">
            <summary>
            Like the cat attribute, this is to assist identifying wanted
            sessions at the receiver.  This allows a receiver to select
            interesting session based on keywords describing the purpose of
            the session; there is no central registry of keywords.  It is a
            session-level attribute.  It is a charset-dependent attribute,
            meaning that its value should be interpreted in the charset
            specified for the session description if one is specified, or
            by default in ISO 10646/UTF-8.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.KeywordsAttribute.Keywords">
            <summary>
            Gets or sets the keywords describing the purpose of the session.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.KeywordsAttribute"/> class.
            </summary>
            <param name="keywords">The keywords describing the purpose of the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.KeywordsAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.KeywordsAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.LanguageAttribute">
            <summary>
            This can be a session-level attribute or a media-level
            attribute.  As a session-level attribute, it specifies the
            default language for the session being described.  As a media-
            level attribute, it specifies the language for that media,
            overriding any session-level language specified.  Multiple lang
            attributes can be provided either at session or media level if
            the session description or media use multiple languages, in
            which case the order of the attributes indicates the order of
            importance of the various languages in the session or media
            from most important to least important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.LanguageAttribute.LanguageTag">
            <summary>
            Gets or sets the default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.LanguageAttribute"/> class.
            </summary>
            <param name="languageTag">The default language for the session being described
            (if used as a session-level attribute) or the language for a media
            stream (if used as a media-level attribute).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.LanguageAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.LanguageAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute">
            <summary>
            This gives the maximum amount of media that can be encapsulated
            in each packet, expressed as time in milliseconds.  The time
            SHALL be calculated as the sum of the time the media present in
            the packet represents.  For frame-based codecs, the time SHOULD
            be an integer multiple of the frame size.  This attribute is
            probably only meaningful for audio data, but may be used with
            other media types if it makes sense.  It is a media-level
            attribute, and it is not dependent on charset.  Note that this
            attribute was introduced after RFC 2327, and non-updated
            implementations will ignore this attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.MaxPacketTime">
            <summary>
            Gets or sets the maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute"/> class.
            </summary>
            <param name="maxPacketTime">The maximum amount of media that can be encapsulated,
            in each packet, expressed as time in milliseconds.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MaxPacketTimeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Media">
            <summary>
            An SDP media element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.MediaType">
            <summary>
            Gets or sets the media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.TransportPort">
            <summary>
            Gets or sets the transport port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.TransportProtocol">
            <summary>
            Gets or sets the transport protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.NumberOfPorts">
            <summary>
            Gets or sets the number of ports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Media.FormatDescription">
            <summary>
            Gets or sets the format description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="P:FM.LiveSwitch.Sdp.Media.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="formatDescription">The format description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Media.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Media"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaDescription">
            <summary>
            An SDP media description element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.Media">
            <summary>
            Gets or sets the media name and transport address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsAudio">
            <summary>
            Gets whether this media description represents an audio stream
            (media type == "audio").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsVideo">
            <summary>
            Gets whether this media description represents a video stream
            (media type == "video").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsApplication">
            <summary>
            Gets whether this media description represents an application stream
            (media type == "application").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsText">
            <summary>
            Gets whether this media description represents a text stream
            (media type == "text").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IsMessage">
            <summary>
            Gets whether this media description represents a message stream
            (media type == "message").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.MediaTitle">
            <summary>
            Gets or sets the media title.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.ConnectionData">
            <summary>
            Gets or sets media-level connection data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.Bandwidths">
            <summary>
            Gets the array of proposed bandwidths to be used by the media. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.EncryptionKey">
            <summary>
            Gets or sets the media-level encryption key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.MediaAttributes">
            <summary>
            Gets the array of media-level attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.#ctor(FM.LiveSwitch.Sdp.Media)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaDescription"/> class.
            </summary>
            <param name="media">The media name and transport address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.AddBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Adds a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Removes a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to remove.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.BundleOnly">
            <summary>
            Gets a value indicating whether this media description has been marked as bundle-only.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.AddMediaAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a media-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.InsertMediaAttribute(FM.LiveSwitch.Sdp.Attribute,System.Int32)">
            <summary>
            DEPRECATED: Use AddMediaAttribute instead.
            Inserts a media-level attribute at the given index.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveMediaAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Removes a media-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.MediaDescription"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtcpMultiplexingSupportFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains a value stating whether the given attributes indicate support for RTCP Multiplexing
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.RtcpMultiplexingSupported">
            <summary>
            Gets or sets a value indicating support for RTCP Multiplexing.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpMapAttribute">
            <summary>
            Gets the Sctp Map Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpPortAttribute">
            <summary>
            Gets the Sctp Port Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SctpMaxMessageSizeAttribute">
            <summary>
            Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.StreamDirection">
            <summary>
            Gets or sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetStreamDirectionFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the stream direction indicated in the supplied collection of <see cref="T:FM.LiveSwitch.Sdp.Attribute"/>, if it can be found. Otherwise, returns StreamDirection.Unset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCandidateAttributes">
            <summary>
            Obtains Ice Candidate attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceOptionAttributes">
            <summary>
            Obtains Ice Options attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceOptionAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains Ice Options attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpExtMapAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains RTP extmap attributes associated with this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetBundleOnlyAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains bundle-only attribute from this media description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.RtcpAttribute">
            <summary>
            Gets or sets Rtcp Attributes associated with this media description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.FingerprintAttribute">
            <summary>
            Gets the Fingerprint Attribute from this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFingerprintAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the FingerpritAttribute from the given collection of attributes
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SupportsIce">
            <summary>
            Gets a value indicating whether this SDP MediaDescription suggests support for ICE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSupportsIceFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Gets a value indicating whether the given set of attributes suggests support for ICE.
            </summary>
            <param name="attributes">The attribute collection</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IceUfragAttribute">
            <summary>
            Gets the IceUfragAttribute associated with this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIceUfragAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the GetIceUfragAttribute from the given collection of attributes.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IcePasswordAttribute">
            <summary>
            Gets the IcePasswordAttribute associated with this MediaDescription
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetIcePasswordAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the IcePasswordAttribute from the given collection of attributes
            </summary>
            <param name="attributes">SDP attributes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetGroupAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the Group attributes from the given collection of attributes
            </summary>
            <param name="collection">SDP attributes.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.SetupAttribute">
            <summary>
            Gets or sets the SetupAttribute associated with this MediaDescription.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.QualityAttribute">
            <summary>
            Gets or sets the QualityAttribute associated with this MediaDescription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.UpdateQualityAttributeValue(System.Int32)">
            <summary>
            Updates SDP Quality Attribute associated with this media description if one is present. Otherwise, 
            creates a new one and inserts it into this media description.
            </summary>
            <param name="quality"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSetupAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the SetupAttribute associated with the given MediaDescription.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetQualityAttributeFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains the QualityAttribute associated with the given MediaDescription.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.CryptoAttributes">
            <summary>
            Gets CryptoAttributes associated with this MediaDescription.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCryptoAttributesFromCollection(FM.LiveSwitch.Sdp.AttributeCollection)">
            <summary>
            Obtains CryptoAttributes from the given collection of attributes.
            </summary>
            <param name="attributes">Attribute HashTable</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.Int32)">
            <summary>
            Obtains the RTP map attribute for a given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.Int32,System.Int32@)">
            <summary>
            Obtains the RTP map attribute for a given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="rtpMapAttributeIndex">The index of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32,System.String)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttribute(System.String,System.Int32,System.String,System.Int32@)">
            <summary>
            Obtains the RTP map attribute for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
            <param name="rtpMapAttributeIndex">The index of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes">
            <summary>
            Obtains the RTP map attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetPreferredRtpMapAttributes">
            <summary>
            Obtains the RTP map attributes in preference order.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpExtMapAttributes">
            <summary>
            Obtains the RTP ext-map attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes(System.String,System.Int32,System.String)">
            <summary>
            Obtains the RTP map attributes for a given format.
            </summary>        
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtpMapAttributes(System.String,System.Int32,System.String,System.Int32[]@)">
            <summary>
            Obtains the RTP map attributes for a given format.
            </summary>
            <param name="formatName">Format name.</param>
            <param name="clockRate">Clock rate.</param>
            <param name="formatParameters">Format parameters.</param>
            <param name="rtpMapAttributeIndices">The indeces of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute" />.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetPacketTimeAttribute">
            <summary>
            Obtains the packet time attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFormatParametersAttribute(System.Int32)">
            <summary>
            Gets the format parameters attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRtcpFeedbackAttribute(System.Int32,System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackPliFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack pli" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackSliFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack sli" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetNackRpsiFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "nack rpsi" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCcmFirFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "ccm fir" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCcmLrrFeedbackAttribute(System.Int32)">
            <summary>
            Gets the RTCP "ccm lrr" feedback attribute for the given payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetMaxPacketTimeAttribute">
            <summary>
            Obtains the maximum packet time attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetMediaStreamIdentifierAttribute">
            <summary>
            Obtains the media stream identifier attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSimulcastAttribute">
            <summary>
            Obtains the simulcast attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttribute(System.String)">
            <summary>
            Obtains an RID attribute by its RID.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttributes">
            <summary>
            Obtains the RID attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetRidAttributes(System.String)">
            <summary>
            Obtains the RID attributes.
            </summary>
            <param name="direction">The RID attribute direction.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes">
            <summary>
            Obtains the SSRC attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.String)">
            <summary>
            Obtains the SSRC attributes.
            </summary>
            <param name="name">The SSRC attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcGroupAttributes">
            <summary>
            Obtains the SSRC Group attributes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcGroupSsrcs(System.String)">
            <summary>
            Obtains the SSRCS from the first SSRC Group with matching semantics.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.Int64)">
            <summary>
            Obtains the SSRC attributes matching a given synchronization source.
            </summary>
            <param name="ssrc">The synchronization source.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttribute(System.Int64,System.String)">
            <summary>
            Obtains the first SSRC attribute matching a given synchronization source and name.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttributes(System.Int64,System.String)">
            <summary>
            Obtains the SSRC attributes matching a given synchronization source and name.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetSsrcAttribute(System.Int64,System.String,System.String)">
            <summary>
            Obtains the SSRC attribute matching a given synchronization source, name, and value.
            </summary>
            <param name="ssrc">The synchronization source.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetFormatParameterValue(System.Int32,System.String)">
            <summary>
            Sets a format parameter value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.SetFormatParameterValue(System.Int32,System.String,System.String)">
            <summary>
            Sets a format parameter value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String)">
            <summary>
            Removes a format by name.
            </summary>
            <param name="name">The format name.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String,System.Int32)">
            <summary>
            Removes a format by name and clock rate.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.PurgeFormat(System.String,System.Int32,System.Int32)">
            <summary>
            Removes a format by name, clock rate, and channel count.
            </summary>
            <param name="name">The format name.</param>
            <param name="clockRate">The clock rate.</param>
            <param name="channelCount">The channel count.</param>
            <returns><c>true</c> if the format was found and removed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.OrderFormats(System.String[])">
            <summary>
            Orders the formats in preference order.
            </summary>
            <param name="names">The format names.</param>
            <returns><c>false</c> if a media element does not exist; otherwise <c>true</c>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.GetCategoryAttributes(FM.LiveSwitch.Sdp.AttributeCategory)">
            <summary>
            Gets attributes of a given category in this media description.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.IdenticalCategoryAttributes">
            <summary>
            Gets the attributes with Identical Multiplexing Category present in this description.
            </summary>
            <returns>Attributes with Identical Multiplexing Category present in this description.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaDescription.TransportCategoryAttributes">
            <summary>
            Gets the attributes with Transport Multiplexing Category present in this description.
            </summary>
            <returns>Attributes with Transport Multiplexing Category present in this description.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaDescription.RemoveBundleCategoryAttributes">
            <summary>
            Removes Bundle (i.e. Transport and Identical) Category Attributes.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute">
            <summary>
            https://tools.ietf.org/html/rfc5888#page-4
            "Media stream identification" media attribute, which is used for identifying media streams within a session description.
            Its formatting in SDP [RFC4566] is described by
            the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
            
            mid-attribute      = "a=mid:" identification-tag
            identification-tag = token
                                 ; token is defined in RFC 4566
            The identification-tag MUST be unique within an SDP session description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.IdentificationTag">
            <summary>
            Gets the identification tag.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute">
            <summary>
            https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
            Used here for compatibility with Google Chrome and Mozilla Firefox.
            
            A session-level attribute is defined for signalling the semantics
            associated with an msid grouping.This allows msid groupings with
            different semantics to coexist.
            
            This OPTIONAL attribute gives the group identifier and its group
            semantic; it carries the same meaning as the ssrc-group-attr of RFC
            5576 section 4.2, but uses the identifier of the group rather than a
            list of SSRC values.
            
            This attribute MUST be present if "a=msid" is used.
            
            An empty list of identifiers is an indication that the sender
            supports the indicated semantic, but has no msid groupings of the
            given type in the present SDP.
            
            An identifier of "*" is an indication that all "a=msid" lines in the
            SDP have this specific semantic.  If "*" is not used, each msid-id in
            the SDP MUST appear in one and only one "msid-semantic" line.
            The name of the attribute is "msid-semantic".
            The value of the attribute is given by the following ABNF:
            
            msid-semantic-value = msid - semantic msid-list
            msid-semantic = token ; see RFC 4566
            msid-list = *(" " msid-id) / " *"
            
            The semantic field holds values from the IANA registriy "Semantics
            for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
            
            An example msid-semantic might look like this, if a semantic LS was
            registered by IANA for the same purpose as the existing LS grouping
            semantic:
            
            a= msid-semantic:LS xyzzy forolow
            
            This means that the SDP description has two lip sync groups, with the
            group identifiers xyzzy and forolow, respectively.
            
            The msid-semantic attribute can occur more than once, but MUST NOT
            occur more than once with the same msid-semantic value.
            </summary>
            <seealso cref="T:FM.LiveSwitch.Sdp.Attribute" />
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.MsIdList">
            <summary>
            Gets or sets the space-delimited list of msids for which a given semantic is used. 
            An empty list of identifiers is an indication that the sender
            supports the indicated semantic, but has no msid groupings of the
            given type in the present SDP.
            
            An identifier of "*" is an indication that all "a=msid" lines in the
            SDP have this specific semantic.  If "*" is not used, each msid-id in
            the SDP MUST appear in one and only one "msid-semantic" line.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.#ctor(FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute" /> class.
            </summary>
            <param name="semanticToken">The semantic token.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.#ctor(FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute" /> class.
            </summary>
            <param name="semanticToken">The semantic token.</param>
            <param name="msidList">The msid list for the given semantic token.</param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.SemanticToken">
            <summary>
            Gets or sets the semantic token.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken">
            <summary>
            Media Stream Id Semantic Tokens
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Sdp.MediaStreamIdSemanticToken.Wms">
            <summary>
            WebRTC Media Stream Semantic
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.MediaType">
            <summary>
            Defines valid SDP media types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Audio">
            <summary>
            Gets the SDP media type meaning "Audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Video">
            <summary>
            Gets the SDP media type meaning "Video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Text">
            <summary>
            Gets the SDP media type meaning "Text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Application">
            <summary>
            Gets the SDP media type meaning "Application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.MediaType.Message">
            <summary>
            Gets the SDP media type meaning "Message".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaType.ToStreamType(System.String)">
            <summary>
            Converts an SDP media type to a StreamType enum.
            </summary>
            <param name="mediaType">The SDP media type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.MediaType.FromStreamType(FM.LiveSwitch.StreamType)">
            <summary>
            Convert a StreamType enum to an SDP media type.
            </summary>
            <param name="streamType">The StreamType enum.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Message">
            <summary>
            An SDP message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ProtocolVersion">
            <summary>
            Gets or sets the version of the Session Description Protocol.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionName">
            <summary>
            Gets or sets the textual session name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Origin">
            <summary>
            Gets or sets the originator of the session plus a session identifier and version number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionInformation">
            <summary>
            Gets or sets textual information about the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Uri">
            <summary>
            Gets or sets the pointer to additional information about the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.EmailAddress">
            <summary>
            Gets or sets the email address for the person responsible for the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.PhoneNumber">
            <summary>
            Gets or sets the phone number for the person responsible for the conference.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ConnectionData">
            <summary>
            Gets or sets session-level connection data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.Bandwidths">
            <summary>
            Gets the array of proposed bandwidths to be used by the session. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TimeDescriptions">
            <summary>
            Gets the array of start, stop, and repeat times for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TimeZoneAdjustments">
            <summary>
            Gets or sets the time zone adjustments.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.EncryptionKey">
            <summary>
            Gets or sets the session-level encryption key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SessionAttributes">
            <summary>
            Gets the array of session-level attributes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MediaDescriptions">
            <summary>
            Gets the array of media descriptions.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.AudioDescription">
            <summary>
            Gets the first media description of type "audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.AudioDescriptions">
            <summary>
            Gets any media descriptions of type "audio".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.VideoDescription">
            <summary>
            Gets the first media description of type "video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.VideoDescriptions">
            <summary>
            Gets any media descriptions of type "video".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ApplicationDescription">
            <summary>
            Gets the first media description of type "application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.ApplicationDescriptions">
            <summary>
            Gets any media descriptions of type "application".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TextDescription">
            <summary>
            Gets the first media description of type "text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.TextDescriptions">
            <summary>
            Gets any media descriptions of type "text".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MessageDescription">
            <summary>
            Gets the first media description of type "message".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.MessageDescriptions">
            <summary>
            Gets any media descriptions of type "message".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.BundleGroups">
            <summary>
            Gets bundle groups in this media description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
            <param name="sessionName">The textual session name.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.#ctor(FM.LiveSwitch.Sdp.Origin,System.String,FM.LiveSwitch.Sdp.TimeDescription[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Message"/> class.
            </summary>
            <param name="origin">The originator of the session plus a session identifier and version number.</param>
            <param name="sessionName">The textual session name.</param>
            <param name="timeDescriptions">The array of start, stop, and repeat times for the session.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Adds a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveBandwidth(FM.LiveSwitch.Sdp.Bandwidth)">
            <summary>
            Removes a proposed bandwidth.
            </summary>
            <param name="bandwidth">The proposed bandwidth to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddTimeDescription(FM.LiveSwitch.Sdp.TimeDescription)">
            <summary>
            Adds a start, stop, and repeat time.
            </summary>
            <param name="timeDescription">The start, stop, and repeat time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveTimeDescription(FM.LiveSwitch.Sdp.TimeDescription)">
            <summary>
            Removes a start, stop, and repeat time.
            </summary>
            <param name="timeDescription">The start, stop, and repeat time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveTimeDescriptions">
            <summary>
            Removes all time descriptions.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddSessionAttribute(FM.LiveSwitch.Sdp.Attribute)">
            <summary>
            Adds a session-level attribute.
            </summary>
            <param name="attribute">The session-level attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveSessionAttribute(FM.LiveSwitch.Sdp.AttributeType)">
            <summary>
            Removes a session-level attribute.
            </summary>
            <param name="attributeType">The session-level attribute type to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelDirection">
            <summary>
            Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
            Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelRtcpMultiplexingSupport">
            <summary>
            Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
            Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelCryptoAttributes">
            <summary>
            Obtains Crypto attributes from the session-level attributes in this message.
            Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelFingerprintAttribute">
            <summary>
            Obtains Fingerprint attribute from the session-level attributes in this message.
            Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIceOptionAttributes">
            <summary>
            Obtains session-level Ice Options attributes associated with the Sdp Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelRtpExtMapAttributes">
            <summary>
            Obtains session-level RTP ext-map attributes associated with the Sdp Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIcePasswordAttribute">
            <summary>
            Obtains Ice Password Attribute from the session-level attributes in this message.
            Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelIceUfragAttribute">
            <summary>
            Obtains Ice Ufrag Attribute from the session-level attributes in this message.
            Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.GetSessionLevelSetupAttribute">
            <summary>
            Obtains Setup Attribute from the session-level attributes in this message.
            Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.AddMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description.
            </summary>
            <param name="mediaDescription">The media description to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.InsertMediaDescription(System.Int32,FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Adds a media description at the given index.
            </summary>
            <param name="index">The index at which to add the media description.</param>
            <param name="mediaDescription">The media description to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.RemoveMediaDescription(FM.LiveSwitch.Sdp.MediaDescription)">
            <summary>
            Removes a media description.
            </summary>
            <param name="mediaDescription">The media description to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.UpdateSetupValue(System.String)">
            <summary>
            Updates SDP Setup Value associated with the session description.
            </summary>
            <param name="setupValue"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Message.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Message"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Message.SupportsTrickleIce">
            <summary>
            Gets or sets a value indicating whether Trickle-ICE is supported.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.NetworkType">
            <summary>
            Defines valid SDP network types.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.NetworkType.Internet">
            <summary>
            Gets the SDP network type meaning "Internet".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Orientation">
            <summary>
            Defines valid SDP orientations.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Portrait">
            <summary>
            Gets the SDP orientation meaning "Portrait".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Landscape">
            <summary>
            Gets the SDP orientation meaning "Landscape".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Orientation.Seascape">
            <summary>
            Gets the SDP orientation meaning "Upside-Down Landscape".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.OrientationAttribute">
            <summary>
            Normally this is only used for a whiteboard or presentation
            tool.  It specifies the orientation of a the workspace on the
            screen.  It is a media-level attribute.  Permitted values are
            "portrait", "landscape", and "seascape" (upside-down
            landscape).  It is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation">
            <summary>
            Gets or sets the orientation of a workspace on the screen. See <see cref="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.OrientationAttribute"/> class.
            </summary>
            <param name="orientation">The orientation of a workspace on the screen. See <see cref="P:FM.LiveSwitch.Sdp.OrientationAttribute.Orientation"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.OrientationAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.OrientationAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Origin">
            <summary>
            An SDP origin element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.Username">
            <summary>
            Gets or sets the user's login on the originating host.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.SessionId">
            <summary>
            Gets or sets the globally unique identifier for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.SessionVersion">
            <summary>
            Gets or sets the version number for the session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.Origin.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.Origin.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Origin.UnicastAddress">
            <summary>
            Gets or sets the address of the machine from which the session was created.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Origin"/> class.
            </summary>
            <param name="unicastAddress">The address of the machine from which the session was created.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Origin"/> class.
            </summary>
            <param name="unicastAddress">The address of the machine from which the session was created.</param>
            <param name="username">The user's login on the originating host.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Origin.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Origin"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.PacketTimeAttribute">
            <summary>
            This gives the length of time in milliseconds represented by
            the media in a packet.  This is probably only meaningful for
            audio data, but may be used with other media types if it makes
            sense.  It should not be necessary to know ptime to decode RTP
            or vat audio, and it is intended as a recommendation for the
            encoding/packetisation of audio.  It is a media-level
            attribute, and it is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.PacketTimeAttribute.PacketTime">
            <summary>
            Gets or sets the length of time in milliseconds represented by
            the media in a packet.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.PacketTimeAttribute"/> class.
            </summary>
            <param name="packetTime">The length of time in milliseconds represented by
            the media in a packet.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.PacketTimeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.PacketTimeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.PromptEncryptionKey">
            <summary>
            An SDP encryption key with a method of "prompt".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.QualityAttribute">
            <summary>
            This gives a suggestion for the quality of the encoding as an
            integer value.  The intention of the quality attribute for
            video is to specify a non-default trade-off between frame-rate
            and still-image quality.  For video, the value is in the range
            0 to 10, with the following suggested meaning:
            
               10 - the best still-image quality the compression scheme can
                    give.
               5  - the default behaviour given no quality suggestion.
               0  - the worst still-image quality the codec designer thinks
                    is still usable.
            
            It is a media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.QualityAttribute.Quality">
            <summary>
            Gets or sets the suggested quality of the encoding as an integer value from 0-10.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.QualityAttribute"/> class.
            </summary>
            <param name="quality">The suggested quality of the encoding as an integer value from 0-10.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.QualityAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.QualityAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute">
            <summary>
            This specifies that the tools should be started in receive-only
            mode where applicable.  It can be either a session- or media-
            level attribute, and it is not dependent on charset.  Note that
            recvonly applies to the media only, not to any associated
            control protocol (e.g., an RTP-based system in recvonly mode
            SHOULD still send RTCP packets).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ReceiveOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.RepeatTime">
            <summary>
            An SDP repeat time element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.RepeatInterval">
            <summary>
            Gets or sets the repeat interval.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.ActiveDuration">
            <summary>
            Gets or sets the active duration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.RepeatTime.Offsets">
            <summary>
            Gets the array of offsets from the start time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> class.
            </summary>
            <param name="repeatInterval">The repeat interval.</param>
            <param name="activeDuration">The active duration.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> class.
            </summary>
            <param name="repeatInterval">The repeat interval.</param>
            <param name="activeDuration">The active duration.</param>
            <param name="offsets">The offsets from the start time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.AddOffset(System.TimeSpan)">
            <summary>
            Adds an offset from the start time.
            </summary>
            <param name="offset">The offset from the start time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.RemoveOffset(System.TimeSpan)">
            <summary>
            Removes an offset from the start time.
            </summary>
            <param name="offset">The offset from the start time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.RepeatTime.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.RepeatTime"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.Attribute">
            <summary>
            The RTCP attribute is used to document the RTCP port used for media
            stream, when that port is not the next higher (odd) port number
            following the RTP port described in the media line.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.Port">
            <summary>
            Gets or sets the RTCP port number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.NetworkType">
            <summary>
            Gets or sets the type of network. See <see cref="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.NetworkType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.AddressType">
            <summary>
            Gets or sets the type of the address. See <see cref="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.AddressType"/> for possible values.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.Attribute.ConnectionAddress">
            <summary>
            Gets or sets the RTCP connection address.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.Attribute"/> class.
            </summary>
            <param name="port">The RTCP port number.</param>
            <param name="connectionAddress">The RTCP connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.Update(System.Int32,System.String)">
            <summary>
            Updates the port and connection address.
            </summary>
            <param name="port">The port.</param>
            <param name="connectionAddress">The connection address.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.Attribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.Attribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute">
            <summary>
            This attribute is used to indicate the capability of
            using RTCP feedback.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.PayloadType">
            <summary>
            Gets or sets the payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.WildcardPayloadType">
            <summary>
            Gets the payload type that represents
            wildcard feedback attributes ('*').
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.SubType">
            <summary>
            Gets or sets the sub-type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute" /> class.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute" /> class.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subtype">The subtype.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackAttribute(System.Int32)">
            <summary>
            Creates a "nack" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackPliAttribute(System.Int32)">
            <summary>
            Creates a "nack pli" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackSliAttribute(System.Int32)">
            <summary>
            Creates a "nack sli" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.NackRpsiAttribute(System.Int32)">
            <summary>
            Creates a "nack rpsi" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmFirAttribute(System.Int32)">
            <summary>
            Creates a "ccm fir" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmLrrAttribute(System.Int32)">
            <summary>
            Creates a "ccm lrr" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmTmmbrAttribute(System.Int32)">
            <summary>
            Creates a "ccm tmmbr" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.CcmTmmbnAttribute(System.Int32)">
            <summary>
            Creates a "ccm tmmbn" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute.RembAttribute(System.Int32)">
            <summary>
            Creates a "goog-remb" feedback attribute.
            </summary>
            <param name="payloadType">The payload type.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType">
            <summary>
            A feedback attribute sub type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Pli">
            <summary>
            Gets the "picture loss indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Sli">
            <summary>
            Gets the "slice loss indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Rpsi">
            <summary>
            Gets the "reference picture selection indication" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Fir">
            <summary>
            Gets the "full intraframe refresh" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Lrr">
            <summary>
            Gets the "layer refresh request" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Tmmbr">
            <summary>
            Gets the "temporary maximum media-stream bitrate request" sub-type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeSubType.Tmmbn">
            <summary>
            Gets the "temporary maximum media-stream bitrate notification" sub-type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType">
            <summary>
            A feedback attribute type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Ack">
            <summary>
            Gets the "positive acknowledgement" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.App">
            <summary>
            Gets the application-defined type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Ccm">
            <summary>
            Gets the "codec control message" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Nack">
            <summary>
            Gets the "negative acknowledgement" type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtcp.FeedbackAttributeType.Remb">
            <summary>
            Gets the "receiver estimated maximum bitrate" type.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute">
            <summary>
            This attribute is used to signal that RTP and RTCP traffic should be
            multiplexed on a single port.  It is a property attribute, which does
            not take a value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtcp.MuxAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute">
             <summary>
             https://tools.ietf.org/html/rfc5285#section-5
             Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
             local identifiers used in the header extension to a larger namespace.
             
             A usable mapping MUST use IDs in the valid range, and each ID in this
             range MUST be used only once for each media (or only once if the
             mappings are session level).  Mappings that do not conform to these
             rules MAY be presented, for instance, during offer/answer negotiation
             as described in the next section, but remapping to conformant values
             is necessary before they can be applied.
             
             Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
             string using an attribute of the form:
             a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
             Where URI is a URI, as above, VALUE is the local identifier (ID)
             of this extension and is an integer in the valid range inclusive (0
             is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
             and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
             Example:
            
             a=extmap:1 http://example.com/082005/ext.htm#ttime
             a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short
             </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Id">
            <summary>
            Gets or sets the local identifier of this extension.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Uri">
            <summary>
            Gets the well-known URI of this extension
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.ExtensionAttributes">
            <summary>
            Gets or sets extension attributes (optional).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.Direction">
            <summary>
            Gets or sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.#ctor(System.Int32,System.String)">
            <summary>
            RTP Extension Map Attribute.
            </summary>
            <param name="id">Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.</param>
            <param name="uri">Well known extension identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.#ctor(System.Int32,System.String,FM.LiveSwitch.StreamDirection)">
            <summary>
            RTP Extension Map Attribute.
            </summary>
            <param name="id">Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.</param>
            <param name="uri">Well known extension identifier.</param>
            <param name="direction">Disered direction of this RTP Extension Header.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.ExtMapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection">
            <summary>
            Collection of FeedbackAttributes.
            AB: This rally should be merged with the AttributeCollection using generics or subclassing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.#ctor">
            <summary>
            Create a collection of SDP Attributes
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.AddAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Adds a specified FeedbackAttribute to the collection of attributes.
            Returns a value indicating whether the attribute has been added or
            was skipped because it already eisted in the connection.
            </summary>
            <param name="attribute">Attribute to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.Remove(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Removes the attribute from the given collection if it is present.
            </summary>
            <param name="attribute">Attribute to remove.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.Clear">
            <summary>
            Removes all the attributes from the current collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.ToArray">
            <summary>
            Returns an array of feedback attributes that belong to this collection.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.TryGetFeedbackAttribute(System.Int32,System.String,System.String,FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute@)">
            <summary>
            Returns a value indicating whether FeedbackAttribute with the specified parameters exists in the collection and updates a reference to it accordingly.
            </summary>
            <param name="payloadType"></param>
            <param name="feedbackAttributeType"></param>
            <param name="subType"></param>
            <param name="feedbackAttribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.FeedbackAttributeCollection.CalculateFeedbackAttributeKey(System.Int32,System.String,System.String)">
            <summary>
            Gets the key for the given feedback attribute.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute">
            <summary>
            This attribute maps from an RTP payload type number (as used in
            an "m=" line) to an format name denoting the payload format
            to be used.  It also provides information on the clock rate and
            format parameters.  It is a media-level attribute that is not
            dependent on charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetIanaMapAttribute(System.Int32)">
            <summary>
            Gets the RTP map attribute for an IANA-reserved payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRtcpFeedbackAttribute(System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given type and subtype associated with this payload type.
            </summary>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRtcpFeedbackAttribute(System.Int32,System.String,System.String)">
            <summary>
            Gets the RTCP feedback attribute for the given payload type, type and subtype associated with this payload type.
            </summary>
            <param name="payloadType">The payload type.</param>
            <param name="type">The type.</param>
            <param name="subType">The sub-type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackFeedbackAttribute">
            <summary>
            Gets the RTCP "nack" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackPliFeedbackAttribute">
            <summary>
            Gets the RTCP "nack pli" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackSliFeedbackAttribute">
            <summary>
            Gets the RTCP "nack sli" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedNackRpsiFeedbackAttribute">
            <summary>
            Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmFirFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm fir" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmLrrFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm lrr" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmTmmbrFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm tmmbr" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedCcmTmmbnFeedbackAttribute">
            <summary>
            Gets the RTCP "ccm tmmbn" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetRelatedRembFeedbackAttribute">
            <summary>
            Gets the RTCP "goog-remb" feedback attribute associated with this payload type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RelatedRtcpFeedbackAttributes">
            <summary>
            Gets Rtcp Feedback attributes associated with this Map Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.ResetRtcpFeedbackAttributes(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute[])">
            <summary>
            Resets Rtcp Feedback attributes associated with this Map Attribute.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.AddRelatedRtcpFeedbackAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Adds an Rtcp Feedback attribute associated with this Map Attribute.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RemoveRelatedRtcpFeedbackAttribute(FM.LiveSwitch.Sdp.Rtcp.FeedbackAttribute)">
            <summary>
            Removes an Rtcp Feedback attribute associated with this Map Attribute.
            Returns true if the attribute was reomved; if the attribute was not present, returns false.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.RelatedFormatParametersAttribute">
            <summary>
            Gets or sets Format Parameters attribute associated with this Map Attribute
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.PayloadType">
            <summary>
            Gets or sets the RTP payload type number.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FormatName">
            <summary>
            Gets or sets the format name denoting the payload format to be used.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.ClockRate">
            <summary>
            Gets or sets the payload clock rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FormatParameters">
            <summary>
            Gets or sets format parameters for the payload.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="payloadType">The RTP payload type number.</param>
            <param name="formatName">The format name denoting the payload format to be used.</param>
            <param name="clockRate">The payload clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="payloadType">The RTP payload type number.</param>
            <param name="formatName">The format name denoting the payload format to be used.</param>
            <param name="clockRate">The payload clock rate.</param>
            <param name="formatParameters">The format parameters for the payload.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.MapAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.MapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.Media">
            <summary>
            An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpSavpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended Secure RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpAvpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpSavpTransportProtocol">
            <summary>
            Gets the protocol keyword for the Secure RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.RtpAvpTransportProtocol">
            <summary>
            Gets the protocol keyword for the RTP audio/video profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.UdpTlsRtpSavpfTransportProtocol">
            <summary>
            Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.Media.UdpTlsRtpSavpTransportProtocol">
            <summary>
            Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.SupportsEncryption(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.SupportsRtcpBasedFeedback(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GenerateRtpProfile(FM.LiveSwitch.StreamType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.
            </summary>
            <param name="type">Stream type.</param>
            <param name="rtcpFeedbackSupported">Indicates whether Rtcp-based feedback is supported.</param>
            <param name="useDtls">Indicates whether (D)TLS is in use.</param>
            <param name="useEncryption">Indicates whether encryption is in use.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.#ctor(System.String,System.Int32,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.Media"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="rtpPayloadTypeNumbers">The RTP payload type numbers.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetPayloadTypes(System.String)">
            <summary>
            Gets the payload types.
            </summary>
            <param name="formatDesciption">The media format desciption.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetWellKnownPayloadName(System.Int32)">
            <summary>
            Returns the name of a well-known payload type.
            </summary>
            <param name="payloadType">The well-known payload type to get the name of.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.Media.GetWellKnownPayloadClockRate(System.Int32)">
            <summary>
            Returns the clockrate of a well-known payload type.
            </summary>
            <param name="payloadType">The well-known payload type to get the clockrate of.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream">
            <summary>
            A stream for a simulcast stream description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.Ids">
            <summary>
            Gets the identifiers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStream.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStream"/> class.
            </summary>
            <param name="ids">The identifiers.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection">
            <summary>
            The allowed directions for a simulcast attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection.Send">
            <summary>
            Gets the send direction ("send").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastDirection.Receive">
            <summary>
            Gets the receive direction ("recv").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription">
            <summary>
            A stream description for a simulcast attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.Streams">
            <summary>
            Gets the streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription.#ctor(System.String,FM.LiveSwitch.Sdp.Rtp.SimulcastStream[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription"/> class.
            </summary>
            <param name="direction">The direction.</param>
            <param name="streams">The streams.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidDirection">
            <summary>
            The allowed directions for an RID attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidDirection.Send">
            <summary>
            Gets the send direction ("send").
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidDirection.Receive">
            <summary>
            Gets the receive direction ("recv").
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction">
            <summary>
            A restriction for an RID attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxWidthKey">
            <summary>
            Gets the "max-width" key, for spatial resolution in pixels. In the case that
            stream orientation signaling is used to modify the intended
            display orientation, this attribute refers to the width of the
            stream when a rotation of zero degrees is encoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxHeightKey">
            <summary>
            Gets the "max-height" key, for spatial resolution in pixels. In the case that
            stream orientation signaling is used to modify the intended
            display orientation, this attribute refers to the height of the
            stream when a rotation of zero degrees is encoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxFramesPerSecondKey">
            <summary>
            Gets the "max-fps" key, for frame rate in frames per second. For encoders that
            do not use a fixed framerate for encoding, this value is used to
            restrict the minimum amount of time between frames: the time
            between any two consecutive frames SHOULD NOT be less than 1 / max -
            fps seconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxFrameSizeKey">
            <summary>
            Gets the "max-fs" key, for frame size in pixels per frame. This is the product
            of frame width and frame height, in pixels, for rectangular frames.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxBitrateKey">
            <summary>
            Gets the "max-br" key, for bit rate in bits per second. The restriction applies
            to the media payload only, and does not include overhead
            introduced by other layers(e.g., RTP, UDP, IP, or Ethernet).  The
            exact means of keeping within this limit are left up to the
            implementation, and instantaneous excursions outside the limit are
            permissible. For any given one-second sliding window, however,
            the total number of bits in the payload portion of RTP SHOULD NOT
            exceed the value specified in "max-br."
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxPixelsPerSecondKey">
            <summary>
            Gets the "max-pps" key, for pixel rate in pixels per second. This value SHOULD
            be handled identically to max-fps, after performing the following
            conversion: max-fps = max-pps / (width* height).  If the stream
            resolution changes, this value is recalculated. Due to this
            recalculation, excursions outside the specified maximum are
            possible near resolution change boundaries.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.MaxBitsPerPixelKey">
            <summary>
            Gets the "max-bpp" key, for maximum number of bits per pixel, calculated as an
            average of all samples of any given coded picture. This is
            expressed as a floating point value, with an allowed range of
            0.0001 to 48.0.  These values MUST NOT be encoded with more than
            four digits to the right of the decimal point.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.DependKey">
            <summary>
            Gets the "depend" key, for spatial resolution in pixels. The
            value is a comma-separated list of rid-ids.These rid-ids
            identify RTP streams that this stream depends on in order to allow
            for proper interpretation.  The mechanism defined in this document
            allows for such dependencies to be expressed only when the streams
            are in the same media section.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.Key">
            <summary>
            Gets the restriction key.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidRestriction.Value">
            <summary>
            Gets or sets the restriction value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidRestriction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidRestriction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidRestriction"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute">
            <summary>
            The SDP media attribute "rid" specifies restrictions defining a
            unique RTP payload configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Direction">
            <summary>
            Gets the direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.PayloadTypes">
            <summary>
            Gets or sets the payload types that can
            be used in the associated stream. This
            property is optional and may be null.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.RidAttribute.Restrictions">
            <summary>
            Gets or sets the codec-agnostic restrictions
            to which the corresponding stream will conform.
            This property is optional and may be null.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="payloadTypes">The payload types.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,FM.LiveSwitch.Sdp.Rtp.RidRestriction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="restrictions">The restrictions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.#ctor(System.String,System.String,System.Int32[],FM.LiveSwitch.Sdp.Rtp.RidRestriction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="direction">The direction.</param>
            <param name="payloadTypes">The payload types.</param>
            <param name="restrictions">The restrictions.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.ValidateId(System.String)">
            <summary>
            Validates that the identifier conforms to RFC syntax,
            which means that it only contains alpha-numeric
            characters and/or the hyphen and underscore.
            See https://tools.ietf.org/html/draft-ietf-avtext-rid/ and
            https://tools.ietf.org/html/draft-ietf-mmusic-rid/ for more info.
            </summary>
            <param name="id">The identifier</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.GetRestrictionValue(System.String)">
            <summary>
            Gets a restriction value.
            </summary>
            <param name="restrictionKey">The restriction key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.RidAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.RidAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute">
            <summary>
            The SDP media attribute "simulcast" describes, independently for send
            and receive directions, the number of simulcast RTP streams as well
            as potential alternative formats for each simulcast RTP stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.DraftVersion">
            <summary>
            Gets or sets the version of the IETF draft to comply with.
            https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.Description1">
            <summary>
            Gets the first description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.Description2">
            <summary>
            Gets the second description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.SendDescription">
            <summary>
            Gets the 'send' description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.ReceiveDescription">
            <summary>
            Gets the 'receive' description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.#ctor(FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription,FM.LiveSwitch.Sdp.Rtp.SimulcastStreamDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="description1">The first description.</param>
            <param name="description2">The second description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId">
            <summary>
            A simulcast stream identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.Paused">
            <summary>
            Gets whether the stream is paused.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SimulcastStreamId"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="paused">Whether the stream is paused.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute">
            <summary>
            The SDP media attribute "ssrc-group" expresses a relationship among
            several sources of an RTP session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.Semantics">
            <summary>
            Gets the semantics.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.SynchronizationSources">
            <summary>
            Gets the synchronization sources.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.#ctor(System.String,System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute"/> class.
            </summary>
            <param name="semantics">The semantics.</param>
            <param name="synchronizationSources">The synchronization sources.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcGroupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute">
            <summary>
            The SDP media attribute "ssrc" indicates a property (known as a
            "source-level attribute") of a media source (RTP stream) within an
            RTP session.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.SynchronizationSource">
            <summary>
            Gets or sets the synchronization source.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="synchronizationSource">The synchronization source.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Rtp.SsrcAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName">
            <summary>
            SSRC atribute names.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.CName">
            <summary>
            Gets a value indicating canonical name. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.PreviousSsrc">
            <summary>
            Gets a value indicating previous SSRC.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.FormatParameters">
            <summary>
            Gets a value indicating format parameters.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.MediaStreamId">
            <summary>
            Gets a value indicating media stream ID.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.MediaStreamLabel">
            <summary>
            Gets a value indicating media stream label.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Rtp.SsrcAttributeName.Label">
            <summary>
            Gets a value indicating label.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.MapAttribute">
            <summary>
             AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
             The sctpmap attribute maps from a port number (as used in an "m="
             line) to an encoding name denoting the payload format to be used on
             top of the SCTP association or the actual protocol running on top of it.
             Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
             Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.Port">
            <summary>
            Gets or sets the SCTP port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.SctpProtocol">
            <summary>
            Gets or sets the SCTP sub-protocol (association usage).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MapAttribute.Streams">
            <summary>
            Gets the number of incoming streams.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute" /> class.
            </summary>
            <param name="port">The SCTP port.</param>
            <param name="protocol">The protocol.</param>
            <param name="streams">The streams.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MapAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute">
            <summary>
            The attribute can be associated with an m- line to indicate
            the maximum message size (indicated in bytes) that an SCTP endpoint
            is willing to receive on the SCTP association associated with the m-
            line. Different attribute values can be used in each direction.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute"/> class.
            </summary>
            <param name="maxMessageSize">The maximum message size in bytes.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.MaxMessageSizeAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.Media">
            <summary>
            An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.WebRtcDatachannelAssociationUsage">
            <summary>
            Gets the Association Usage name registry for WebRTC Datachannel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.SctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.SctpDtlsTransportProtocol">
            <summary>
            Gets the protocol keyword for the DTLS over SCTP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.DtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.UdpDtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.Media.TcpDtlsSctpTransportProtocol">
            <summary>
            Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.SupportsEncryption(System.String)">
            <summary>
            Returns a value indicating whther a given protocol supports encryption.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol supports encryption.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.IsSupported(System.String)">
            <summary>
            Returns a value indicating whther a given protocol is supported.
            </summary>
            <param name="protocol">Protocol keyword.</param>
            <returns>Value indicating whther a given protocol is supported.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.Media.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.Media" /> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType" /> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="transportProtocol">The transport protocol.</param>
            <param name="associationUsage">The association usage.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute">
            <summary>
            The attribute can be associated with an SDP media description (m-
            line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
            which case the m- line port value indicates the port of the
            underlying transport-layer protocol (UDP or TCP), on which SCTP is
            carried, and the 'sctp-port' value indicates the SCTP port.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Sctp.PortAttribute.Port">
            <summary>
            Gets or sets the SCTP port.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="port">The SCTP port.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Sctp.PortAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Sctp.PortAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute">
            <summary>
            This can be a session-level attribute or a media-level
            attribute.  As a session-level attribute, it specifies the
            language for the session description.  As a media-level
            attribute, it specifies the language for any media-level SDP
            information field associated with that media.  Multiple sdplang
            attributes can be provided either at session or media level if
            multiple languages in the session description or media use
            multiple languages, in which case the order of the attributes
            indicates the order of importance of the various languages in
            the session or media from most important to least important.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SdpLanguageAttribute.LanguageTag">
            <summary>
            Gets or sets the language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute"/> class.
            </summary>
            <param name="languageTag">The language for either the session description
            (if used as a session-level attribute) or any media-level SDP
            information field associated with that media (if used as a
            media-level attribute).</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SdpLanguageAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SdpLanguageAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SendOnlyAttribute">
            <summary>
            This specifies that the tools should be started in send-only
            mode.  An example may be where a different unicast address is
            to be used for a traffic destination than for a traffic source.
            In such a case, two media descriptions may be used, one
            sendonly and one recvonly.  It can be either a session- or
            media-level attribute, but would normally only be used as a
            media attribute.  It is not dependent on charset.  Note that
            sendonly applies only to the media, and any associated control
            protocol (e.g., RTCP) SHOULD still be received and processed as
            normal.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendOnlyAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SendOnlyAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendOnlyAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendOnlyAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SendReceiveAttribute">
            <summary>
            This specifies that the tools should be started in send and
            receive mode.  This is necessary for interactive conferences
            with tools that default to receive-only mode.  It can be either
            a session or media-level attribute, and it is not dependent on
            charset.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendReceiveAttribute"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SendReceiveAttribute.StreamDirection">
            <summary>
            Gets the stream direction.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SendReceiveAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SendReceiveAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Setup">
            <summary>
            Defines valid SDP setups.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.ActPass">
            <summary>
            Gets the SDP setup meaning "Active or Passive".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.Active">
            <summary>
            Gets the SDP setup meaning "Active".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Setup.Passive">
            <summary>
            Gets the SDP setup meaning "Passive".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.SetupAttribute">
            <summary>
            The 'setup' attribute indicates which of the end points should
            initiate the TCP connection establishment (i.e., send the initial TCP
            SYN).  The 'setup' attribute is charset-independent and can be a
            session-level or a media-level attribute.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup">
            <summary>
            Gets or sets which end point should initiate the connection establishment. See <see cref="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup"/> for possible values.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SetupAttribute"/> class.
            </summary>
            <param name="setup">Which end point should initiate the connection establishment. See <see cref="P:FM.LiveSwitch.Sdp.SetupAttribute.Setup"/> for possible values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.SetupAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.SetupAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeDescription">
            <summary>
            An SDP time description element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeDescription.Timing">
            <summary>
            Gets or sets the start and stop time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeDescription.RepeatTimes">
            <summary>
            Gets the array of repeat times.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.#ctor(FM.LiveSwitch.Sdp.Timing)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeDescription"/> class.
            </summary>
            <param name="timing">The start and stop time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.AddRepeatTime(FM.LiveSwitch.Sdp.RepeatTime)">
            <summary>
            Adds a repeat time.
            </summary>
            <param name="repeatTime">The repeat time to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.RemoveRepeatTime(FM.LiveSwitch.Sdp.RepeatTime)">
            <summary>
            Removes a repeat time.
            </summary>
            <param name="repeatTime">The repeat time to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeDescription.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeDescription"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeZone">
            <summary>
            An SDP time zone element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZone.AdjustmentTime">
            <summary>
            Gets or sets the time that a time zone adjustment happens (network time protocol).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZone.Offset">
            <summary>
            Gets or sets the offset from the time when the session was first scheduled.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.#ctor(System.Double,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeZone"/> class.
            </summary>
            <param name="adjustmentTime">The time that a time zone adjustment happens (network time protocol).</param>
            <param name="offset">The offset from the time when the session was first scheduled.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZone.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeZone"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.TimeZones">
            <summary>
            An SDP time zones element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.TimeZones.Values">
            <summary>
            Gets the array of time zone adjustments.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.#ctor(FM.LiveSwitch.Sdp.TimeZone[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.TimeZones" /> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.AddTimeZone(FM.LiveSwitch.Sdp.TimeZone)">
            <summary>
            Adds a time zone adjustment.
            </summary>
            <param name="value">The time zone adjustment to add.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.RemoveTimeZone(FM.LiveSwitch.Sdp.TimeZone)">
            <summary>
            Removes a time zone adjustment.
            </summary>
            <param name="value">The time zone adjustment to remove.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.TimeZones.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.TimeZones"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.Timing">
            <summary>
            An SDP timing element.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Timing.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.Timing.StopTime">
            <summary>
            Gets or sets the stop time.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Timing"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.Timing"/> class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="stopTime">The stop time.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.ToString">
            <summary>
            Converts this instance to a string.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.Sdp.Timing.Parse(System.String)">
            <summary>
            Creates an <see cref="T:FM.LiveSwitch.Sdp.Timing"/> instance from a string.
            </summary>
            <param name="s">The string to parse.</param>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.ToolAttribute">
            <summary>
            This gives the name and version number of the tool used to
            create the session description.  It is a session-level
            attribute, and it is not dependent on charset.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.ToolAttribute.Tool">
            <summary>
            Gets or sets the name and version number of the
            tool used to create the session description.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ToolAttribute"/> class.
            </summary>
            <param name="tool">The name and version number of the
            tool used to create the session description.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.FromAttributeValue(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.ToolAttribute"/> class.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.ToolAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UdpMedia">
            <summary>
            An SDP media description with a transport protocol of "udp".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UdpMedia.UdpTransportProtocol">
            <summary>
            Gets the protocol keyword for UDP.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UdpMedia.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UdpMedia"/> class.
            </summary>
            <param name="mediaType">The media type. See <see cref="T:FM.LiveSwitch.Sdp.MediaType"/> for possible values.</param>
            <param name="transportPort">The transport port.</param>
            <param name="formatDescription">The format description.</param>
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UnknownAttribute">
            <summary>
            This attribute is used to encapsulate unrecognized SDP attributes.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UnknownAttribute.Name">
            <summary>
            Gets or sets the attribute name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UnknownAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UnknownAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UnknownAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UnknownAttribute.GetAttributeValue">
            <summary>
            Gets the internal value of the attribute.
            </summary>
            
        </member>
        <member name="T:FM.LiveSwitch.Sdp.UriEncryptionKey">
            <summary>
            An SDP encryption key with a method of "uri".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Sdp.UriEncryptionKey.Uri">
            <summary>
            Gets or sets the URI referring to the data containing the key.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Sdp.UriEncryptionKey.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Sdp.UriEncryptionKey"/> class.
            </summary>
            <param name="uri">The URI referring to the data containing the key.</param>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescription">
            <summary>
            A session description.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SessionId">
            <summary>
            Gets the session id of the remote description, if remote description is set. Returns null otherwise.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SessionVersion">
            <summary>
            Gets the version of the remote description, if remote description is set. Returns null otherwise.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.SdpMessage">
            <summary>
            Gets or sets the SDP message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.TieBreaker">
            <summary>
            Gets or sets the tie breaker in case of a role conflict.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.IsOffer">
            <summary>
            Gets a value indicating whether this instance is offer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasAudio">
            <summary>
            Gets a value indicating whether an audio stream is described.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasVideo">
            <summary>
            Gets a value indicating whether a video stream is described.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.SessionDescription.HasData">
            <summary>
            Gets a value indicating whether a data stream is described.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.ToJson(FM.LiveSwitch.SessionDescription)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="sessionDescription">The session description.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.SessionDescription.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sessionDescriptionJson">The JSON to deserialize.</param>
            <returns>The deserialized session description.</returns>
        </member>
        <member name="T:FM.LiveSwitch.SessionDescriptionType">
            <summary>
            A session description type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SessionDescriptionType.Offer">
            <summary>
            Indicates an offer.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.SessionDescriptionType.Answer">
            <summary>
            Indicates an answer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Size">
            <summary>
            A size (width and height).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Empty">
            <summary>
            Gets the empty size (0x0).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Size"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.Size"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToJson(FM.LiveSwitch.Size)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="size">The size.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="sizeJson">The JSON to deserialize.</param>
            <returns>The deserialized size.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToString">
            <summary>
            Returns a string that represents this instance using format "{width}x{height}".
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.IsEquivalent(FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.IsEquivalent(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the two sizes are equivalent.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
        </member>
        <member name="M:FM.LiveSwitch.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equivalent to the current object; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.Equals(FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="size">The size to compare with the current object.</param>
            <returns>true if the specified size is equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.op_Equality(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is equivalent to the current size.
            Does not require the object pointers to match.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
            <returns>true if the specified size is equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.op_Inequality(FM.LiveSwitch.Size,FM.LiveSwitch.Size)">
            <summary>
            Determines whether the specified size is NOT equivalent to the current size.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
            <returns>true if the specified size is NOT equivalent to the current size; otherwise, false.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToStruct">
            <summary>
            Converts this <see cref="T:FM.LiveSwitch.Size"/> to a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.ToStruct(FM.LiveSwitch.Size)">
            <summary>
            Converts a <see cref="T:FM.LiveSwitch.Size"/> to a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.FromStruct(System.Drawing.Size)">
            <summary>
            Converts a System.Drawing.Size to a <see cref="T:FM.LiveSwitch.Size"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Size.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified size and returns an indication of their relative values.
            </summary>
            <param name="size">A size to compare.</param>
            <returns> A signed number indicating the relative values of this instance and size.</returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamDirection">
            <summary>
            A stream direction.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.SendReceive">
            <summary>
            Indicates a stream that can send and can receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.SendOnly">
            <summary>
            Indicates a stream that can send.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.ReceiveOnly">
            <summary>
            Indicates a stream that can receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.Inactive">
            <summary>
            Indicates a stream that cannot send or receive.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamDirection.Unset">
            <summary>
            Indicates that a stream direction has not been set.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamDirectionHelper">
            <summary>
            Class containing utility methods to manipulate <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.DirectionToString(FM.LiveSwitch.StreamDirection)">
            <summary>
            Obtains the string representation of <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The direction string.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.DirectionFromString(System.String)">
            <summary>
            Converts string representations of stream directions to <see cref="T:FM.LiveSwitch.StreamDirection"/>.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsSendDisabled(System.String)">
            <summary>
            Checks the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The send flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsSendDisabled(FM.LiveSwitch.StreamDirection)">
            <summary>
            Checks the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The send flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetSendDisabled(System.String,System.Boolean)">
            <summary>
            Sets the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <param name="disabled">Whether to disable the send flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetSendDisabled(FM.LiveSwitch.StreamDirection,System.Boolean)">
            <summary>
            Sets the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="disabled">Whether to disable the send flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsReceiveDisabled(System.String)">
            <summary>
            Checks the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The receive flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.IsReceiveDisabled(FM.LiveSwitch.StreamDirection)">
            <summary>
            Checks the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The receive flag.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetReceiveDisabled(System.String,System.Boolean)">
            <summary>
            Sets the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <param name="disabled">Whether to disable the receive flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.SetReceiveDisabled(FM.LiveSwitch.StreamDirection,System.Boolean)">
            <summary>
            Sets the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <param name="disabled">Whether to disable the receive flag.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleSend(System.String)">
            <summary>
            Toggles the send flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleSend(FM.LiveSwitch.StreamDirection)">
            <summary>
            Toggles the send flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleReceive(System.String)">
            <summary>
            Toggles the receive flag.
            </summary>
            <param name="directionString">The direction string.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="M:FM.LiveSwitch.StreamDirectionHelper.ToggleReceive(FM.LiveSwitch.StreamDirection)">
            <summary>
            Toggles the receive flag.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The new direction.</returns>
        </member>
        <member name="T:FM.LiveSwitch.StreamInfo">
            <summary>
            Stream information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamInfo.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamInfo.TransportId">
            <summary>
            Gets or sets the transport id.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamState">
            <summary>
            The state of a stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.New">
            <summary>
            Indicates that the stream is new and has not been started.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Initializing">
            <summary>
            Indicates that the stream is being initialized but no connecting attempts have been made.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Connecting">
            <summary>
            Indicates that the stream is currently connecting.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Connected">
            <summary>
            Indicates that the stream is currently connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Failing">
            <summary>
            Indicates that the stream has encountered an error and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Failed">
            <summary>
            Indicates that the stream has encountered an error and has cleaned up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Closing">
            <summary>
            Indicates that the stream has been instructed to close and is cleaning up.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamState.Closed">
            <summary>
            Indicates that the stream has been instructed to close and has cleaned up.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.StreamStats">
            <summary>
            Stream stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.Transport">
            <summary>
            Gets the transport's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsRelayed">
            <summary>
            Gets whether the transport's active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsReflexive">
            <summary>
            Gets whether the transport's active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.StreamStats.IsHost">
            <summary>
            Gets whether the transport's active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.StreamStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.StreamStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.StreamType">
            <summary>
            A stream type.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Audio">
            <summary>
            Indicates an audio stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Video">
            <summary>
            Indicates a video stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Application">
            <summary>
            Indicates an application stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Message">
            <summary>
            Indicates a message stream.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.StreamType.Text">
            <summary>
            Indicates a text stream.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TransportInfo">
            <summary>
            Transport Information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.LocalCertificate">
            <summary>
            Gets or sets the local certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.RemoteCertificate">
            <summary>
            Gets or sets the remote certificate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.LocalCandidates">
            <summary>
            Gets or sets the local candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.RemoteCandidates">
            <summary>
            Gets or sets the remote candidates.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.CandidatePairs">
            <summary>
            Gets or sets the candidate pairs.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.ActiveCandidatePairId">
            <summary>
            Gets or sets the active candidate pair identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportInfo.Report">
            <summary>
            Gets or sets the transport report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportInfo"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJson(FM.LiveSwitch.TransportInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="transportReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a TransportReport.
            </summary>
            <param name="transportReportJson">The serialized Json.</param>
            <returns>The deserialized TransportReport.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.ToJsonArray(FM.LiveSwitch.TransportInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="transportInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="transportInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.TransportStats">
            <summary>
            Transport stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.BytesSent">
            <summary>
            Gets or sets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.BytesReceived">
            <summary>
            Gets or sets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RtcpTransport">
            <summary>
            Gets or sets the RTCP transport's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.LocalCandidates">
            <summary>
            Gets or sets the local candidates' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RemoteCandidates">
            <summary>
            Gets or sets the remote candidates' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.CandidatePairs">
            <summary>
            Gets or sets the candidate pairs' stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.ActiveCandidatePair">
            <summary>
            Gets or sets the active candidate pair's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.LocalCertificate">
            <summary>
            Gets or sets the local certificate's stats.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.RemoteCertificate">
            <summary>
            Gets or sets the remote certificate's stats.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetLocalCandidate(System.String)">
            <summary>
            Gets a local candidate by its identifier.
            </summary>
            <param name="candidateId">The candidate identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetRemoteCandidate(System.String)">
            <summary>
            Gets a remote candidate by its identifier.
            </summary>
            <param name="candidateId">The candidate identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.GetCandidatePair(System.String)">
            <summary>
            Gets a candidate pair by its identifier.
            </summary>
            <param name="candidatePairId">The candidate pair identifier.</param>
            <returns></returns>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsRelayed">
            <summary>
            Gets whether the active candidate pair has a relayed candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsReflexive">
            <summary>
            Gets whether the active candidate pair has a reflexive candidate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportStats.IsHost">
            <summary>
            Gets whether the active candidate pair has a host candidate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.ToJson">
            <summary>
            Serializes this to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.ToJson(FM.LiveSwitch.TransportStats)">
            <summary>
            Serializes transport stats to JSON.
            </summary>
            <param name="transport">The transport's stats.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.FromJson(System.String)">
            <summary>
            Derializes transport stats from JSON.
            </summary>
            <param name="transportJson">The transport's stats JSON.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportStats.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Utility">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utility.FirstOrDefault``1(``0[])">
            <summary>
            Gets the first element in the array or the default
            value if the array is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.FirstOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the first element in the list or the default
            value if the list is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.LastOrDefault``1(``0[])">
            <summary>
            Gets the last element in the array or the default
            value if the array is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.LastOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the last element in the list or the default
            value if the list is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.SingleOrDefault``1(``0[])">
            <summary>
            Gets the only element in the array or the default value
            if the array is null or does not have exactly one value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.SingleOrDefault``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the only element in the list or the default value
            if the list is null or does not have exactly one value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.TreeSearch``1(``0,FM.LiveSwitch.Function1{``0,``0[]},FM.LiveSwitch.Action1{``0})">
            <summary>
            Enumerates over all nodes in the tree, invoking the callback for each one.
            </summary>
            <typeparam name="T">The generic to search.</typeparam>
            <param name="root">The root.</param>
            <param name="childrenCallback">The children callback.</param>
            <param name="nodeCallback">The node callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Utility.TreeFindLeaves``1(``0,FM.LiveSwitch.Function1{``0,``0[]},FM.LiveSwitch.Action1{``0})">
            <summary>
            Enumerates over all nodes in the tree, invoking the callback for each one.
            </summary>
            <typeparam name="T">The generic to search.</typeparam>
            <param name="root">The root.</param>
            <param name="childrenCallback">The children callback.</param>
            <param name="nodeCallback">The node callback.</param>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Clone``1(System.Collections.Generic.List{``0})">
            <summary>
            Clones the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToList``1(``0[])">
            <summary>
            Converts an array to a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.FormatDoubleAsPercent(System.Double,System.Int32)">
            <summary>
            Formats a double as a percentage string.
            </summary>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places to include.</param>
            
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateSynchronizationSource">
            <summary>
            Generates a synchronization source.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GetRtpSequenceNumberDelta(System.Int32,System.Int32)">
            <summary>
            Retrieves the difference between two RTP sequence numbers
            while accounting for overflow rollover.
            </summary>
            <param name="rtpSequenceNumber">The current RTP sequence number.</param>
            <param name="lastRtpSequenceNumber">The last (previous) RTP sequence number.</param>
            <returns>The difference between the two RTP sequence numbers.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GetRtpTimestampDelta(System.Int64,System.Int64)">
            <summary>
            Retrieves the difference between two RTP timestamps
            while accounting for overflow rollover.
            </summary>
            <param name="rtpTimestamp">The current RTP timestamp.</param>
            <param name="lastRtpTimestamp">The last (previous) RTP timestamp.</param>
            <returns>The difference between the two RTP timestamps.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateTieBreaker">
            <summary>
            Generates a tie-breaker.
            Obsolete. Alias for <see cref="M:FM.LiveSwitch.Utility.GenerateId"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.GenerateId">
            <summary>
            Generates a unique identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,System.Int32,FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="removeCount">The number of items to remove.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,``0[],FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="addItems">The items to add.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.Splice``1(``0[],System.Int32,System.Int32,``0[],FM.LiveSwitch.Function1{System.Int32,``0[]})">
            <summary>
            Splices an array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The splice index.</param>
            <param name="removeCount">The number of items to remove.</param>
            <param name="addItems">The items to add.</param>
            <param name="createArray">A function that creates an array of the given size.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToLongArray(System.Collections.Generic.List{System.Int64})">
            <summary>
            Converts a list of long values to an array of long values.
            </summary>
            <param name="longList">A list of long values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToIntArray(System.Collections.Generic.List{System.Int32})">
            <summary>
            Converts a list of int values to an array of int values.
            </summary>
            <param name="intList">A list of int values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.ToStringArray(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list of string values to an array of string values.
            </summary>
            <param name="stringList">A list of string values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneIntArray(System.Int32[])">
            <summary>
            Clones an array of int values.
            </summary>
            <param name="intArray">An array of int values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneLongArray(System.Int64[])">
            <summary>
            Clones an array of long values.
            </summary>
            <param name="longArray">An array of long values.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Utility.CloneStringArray(System.String[])">
            <summary>
            Clones an array of string values.
            </summary>
            <param name="stringArray">An array of string values.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ScreenConfig">
            <summary>
            A screen configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Origin">
            <summary>
            Gets or sets the region origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.X">
            <summary>
            Gets the region origin X coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Y">
            <summary>
            Gets the region origin Y coordinate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Size">
            <summary>
            Gets or sets the region size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Width">
            <summary>
            Gets the region size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.Height">
            <summary>
            Gets the region size height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ScreenConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="x">The region origin X coordinate.</param>
            <param name="y">The region origin Y coordinate.</param>
            <param name="width">The region size width.</param>
            <param name="height">The region size height.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="x">The region origin X coordinate.</param>
            <param name="y">The region origin Y coordinate.</param>
            <param name="width">The region size width.</param>
            <param name="height">The region size height.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="origin">The region origin.</param>
            <param name="size">The region size.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Point,FM.LiveSwitch.Size,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="origin">The region origin.</param>
            <param name="size">The region size.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Rectangle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="region">The region.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.#ctor(FM.LiveSwitch.Rectangle,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ScreenConfig" /> class.
            </summary>
            <param name="region">The region.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ScreenConfig.IsEquivalent(FM.LiveSwitch.ScreenConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:FM.LiveSwitch.VideoConfig">
            <summary>
            A video configuration.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Width">
            <summary>
            Gets the size width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.Height">
            <summary>
            Gets the size height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.FrameRate">
            <summary>
            Gets or sets the frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(FM.LiveSwitch.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="size">The size.</param>
            <param name="frameRate">The frame rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.#ctor(FM.LiveSwitch.Size,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.VideoConfig" /> class.
            </summary>
            <param name="size">The size.</param>
            <param name="frameRate">The frame rate.</param>
            <param name="clockRate">The clock rate.</param>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.VideoConfig.IsEquivalent(FM.LiveSwitch.VideoConfig)">
            <summary>
            Determines whether the specified configuration is equivalent.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="P:FM.LiveSwitch.VideoConfig.FrameDuration">
            <summary>
            Gets the frame duration in milliseconds.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaServer.ClusterJoinInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.RecordingConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.RecordingConfig.Enabled">
            <summary>
            Gets or sets whether to record or not.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ApplicationInfo">
            <summary>
            Application information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.ToJson(FM.LiveSwitch.ApplicationInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="application">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ApplicationInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ApplicationInfo.
            </summary>
            <param name="applicationInfoJson">The serialized Json.</param>
            <returns>The deserialized ApplicationInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.CandidatePairReport">
            <summary>
            Candidate pair report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.BytesSent">
            <summary>
            Gets or sets the number of candidate pair bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.BytesReceived">
            <summary>
            Gets or sets the number of candidate pair bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.RequestsSent">
            <summary>
            Gets or sets the number of candidate pair requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.RequestsReceived">
            <summary>
            Gets or sets the number of candidate pair requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ResponsesSent">
            <summary>
            Gets or sets the number of candidate pair responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ResponsesReceived">
            <summary>
            Gets or sets the number of candidate pair responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentRequestsSent">
            <summary>
            Gets or sets the number of candidate pair consent requests sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentRequestsReceived">
            <summary>
            Gets or sets the number of candidate pair consent requests received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentResponsesSent">
            <summary>
            Gets or sets the number of candidate pair consent responses sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.ConsentResponsesReceived">
            <summary>
            Gets or sets the number of candidate pair consent responses received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.TotalRoundTripTime">
            <summary>
            Gets or sets the candidate pair total round trip time in milliseconds.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.CandidatePairReport.CurrentRoundTripTime">
            <summary>
            Gets or sets the candidate pair current round trip time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.CandidatePairReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJson(FM.LiveSwitch.CandidatePairReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.ToJsonArray(FM.LiveSwitch.CandidatePairReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.CandidatePairReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.ChannelReport">
            <summary>
            Channel report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessageBytesSent">
            <summary>
            Gets or sets the number of message bytes sent on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelReport.MessageBytesReceived">
            <summary>
            Gets or sets the number of message bytes received on this channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJson(FM.LiveSwitch.ChannelReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <returns>The instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.ToJsonArray(FM.LiveSwitch.ChannelReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.DataStreamReport">
            <summary>
            Data stream report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataStreamReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this data stream.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataStreamReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.ToJson(FM.LiveSwitch.DataStreamReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataStreamReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataStreamReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataStreamReport.
            </summary>
            <param name="dataStreamReportJson">The serialized Json.</param>
            <returns>The deserialized DataChannelReport.</returns>
        </member>
        <member name="T:FM.LiveSwitch.EventBatch">
            <summary>
            An event batch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventBatch.Events">
            <summary>
            Gets or sets the events.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.ToJson(FM.LiveSwitch.EventBatch)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventBatch.DeserializeProperty(System.String,System.String)">
            <summary>
            Deserializes the property.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.EventType">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStarted">
            <summary>
            Gets the 'gateway.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStopped">
            <summary>
            Gets the 'gateway.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.GatewayStats">
            <summary>
            Gets the 'gateway.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStarted">
            <summary>
            Gets the 'mediaserver.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStopped">
            <summary>
            Gets the 'mediaserver.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerRegistered">
            <summary>
            Gets the 'mediaserver.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerUnregistered">
            <summary>
            Gets the 'mediaserver.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.MediaServerStats">
            <summary>
            Gets the 'mediaserver.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStarted">
            <summary>
            Gets the 'sipconnector.started' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStopped">
            <summary>
            Gets the 'sipconnector.stopped' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorRegistered">
            <summary>
            Gets the 'sipconnector.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorUnregistered">
            <summary>
            Gets the 'sipconnector.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.SipConnectorStats">
            <summary>
            Gets the 'sipconnector.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientRegistered">
            <summary>
            Gets the 'client.registered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientUnregistered">
            <summary>
            Gets the 'client.unregistered' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientStats">
            <summary>
            Gets the 'client.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ClientUpdated">
            <summary>
            Gets the 'client.updated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelActivated">
            <summary>
            Gets the 'channel.activated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelDeactivated">
            <summary>
            Gets the 'channel.deactivated' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelClientJoined">
            <summary>
            Gets the 'channel.client.joined' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ChannelClientLeft">
            <summary>
            Gets the 'channel.client.left' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionInitializing">
            <summary>
            Gets the 'connection.initializing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionConnecting">
            <summary>
            Gets the 'connection.connecting' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionConnected">
            <summary>
            Gets the 'connection.connected' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionClosing">
            <summary>
            Gets the 'connection.closing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionClosed">
            <summary>
            Gets the 'connection.closed' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionFailing">
            <summary>
            Gets the 'connection.failing' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionFailed">
            <summary>
            Gets the 'connection.failed' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionStats">
            <summary>
            Gets the 'connection.stats' event type string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.EventType.ConnectionUpdated">
            <summary>
            Gets the 'connection.updated' event type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MediaComponentReport">
            <summary>
            Media component report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.NackCount">
            <summary>
            Gets or sets the number of negative-acknowledgement (NACK) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.PliCount">
            <summary>
            Gets or sets the number of picture loss indication (PLI) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.FirCount">
            <summary>
            Gets or sets the number of full intra refresh (FIR) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.LrrCount">
            <summary>
            Gets or sets the number of layer refresh request (LRR) messages sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaComponentReport.SliCount">
            <summary>
            Gets or sets the number of slice loss indication (SLI) messages sent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaComponentReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaComponentReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaTrackReport">
            <summary>
            Media track report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.MaxBitrate">
            <summary>
            Gets or sets the maximum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.MinBitrate">
            <summary>
            Gets or sets the minimum bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameWidth">
            <summary>
            Gets or sets the frame width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameHeight">
            <summary>
            Gets or sets the frame height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FrameRate">
            <summary>
            Gets or sets the frame rate.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesSent">
            <summary>
            Gets or sets the number of frames sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesReceived">
            <summary>
            Gets or sets the number of frames received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesDropped">
            <summary>
            Gets or sets the number of frames dropped.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesCorrupted">
            <summary>
            Gets or sets the number of frames corrupted.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesDecoded">
            <summary>
            Gets or sets the number of frames decoded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaTrackReport.FramesEncoded">
            <summary>
            Gets or sets the number of frames encoded.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaTrackReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJson(FM.LiveSwitch.MediaTrackReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The serialized instance JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="instanceJson">The instance JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.ToJsonArray(FM.LiveSwitch.MediaTrackReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="array">The array.</param>
            <returns>The serialized array JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.FromJsonArray(System.String)">
            <summary>
            Derializes an array from JSON.
            </summary>
            <param name="arrayJson">The array JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaTrackReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.ChannelClaim">
            <summary>
            A channel claim.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Id">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Broadcast">
            <summary>
            Gets or sets if this is a broadcast channel or not.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendMessage">
            <summary>
            Gets or sets whether the user is NOT authorized to send messages.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisablePeer">
            <summary>
            Gets or sets whether the user is NOT authorized to create peer connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSfu">
            <summary>
            Gets or sets whether the user is NOT authorized to create SFU connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableMcu">
            <summary>
            Gets or sets whether the user is NOT authorized to create MCU connections.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendAudio">
            <summary>
            Gets or sets whether the user is NOT authorized to send audio.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendVideo">
            <summary>
            Gets or sets whether the user is NOT authorized to send video.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableSendData">
            <summary>
            Gets or sets whether the user is NOT authorized to send data.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DisableRemoteClientEvents">
            <summary>
            Gets or sets whether to disable the NotifyJoin, NotifyLeave, and NotifyUpdate messages and events.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.AudioReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's audio can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.VideoReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's video can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.DataReceiveWhitelist">
            <summary>
            Gets or sets a whitelist of roles whose member's data can be received from. Null disables the whitelist whereas an empty list
            disables all receiving.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.Action">
            <summary>
            Gets or sets the action of this channel claim. Possible values are in the <see cref="T:FM.LiveSwitch.ClaimAction"/> class.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.CanUpdate">
            <summary>
            Gets or sets whether the user is authorized to update a media server channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelClaim.CanKick">
            <summary>
            Gets or sets whether the user is authorized kick other users from this channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.#ctor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelClaim"/> class.
            </summary>
            <param name="id">The channel identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJson">
            <summary>
            Serializes this channel claim to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJson(FM.LiveSwitch.ChannelClaim)">
            <summary>
            Serializes a channel claim to JSON.
            </summary>
            <param name="channelClaim">The channel claim to serialize.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.FromJson(System.String)">
            <summary>
            Deserializes a channel claim from JSON.
            </summary>
            <param name="channelClaimJson">The channel claim JSON.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.ToJsonArray(FM.LiveSwitch.ChannelClaim[])">
            <summary>
            Serializes an array of channel claims to JSON.
            </summary>
            <param name="channelClaims">The channel claims.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelClaim.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of channel claims from JSON.
            </summary>
            <param name="channelClaimsJson">The channel claims JSON.</param>
            <returns></returns>
        </member>
        <member name="T:FM.LiveSwitch.ChannelInfo">
            <summary>
            Channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.Recording">
            <summary>
            Gets or sets whether the channel is recording.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelInfo.Report">
            <summary>
            Gets or sets the channel report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.ToJson(FM.LiveSwitch.ChannelInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="channel">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ChannelInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ChannelInfo.
            </summary>
            <param name="channelInfoJson">The serialized Json.</param>
            <returns>The deserialized ChannelInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ClientInfo">
            <summary>
            Client information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Version">
            <summary>
            Gets or sets the client version.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.ExternalId">
            <summary>
            Gets or sets the client external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Tag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Region">
            <summary>
            Gets or sets the client region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Roles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.SourceLanguage">
            <summary>
            Gets or sets the client source language.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.MachineName">
            <summary>
            Gets or sets the client machine name.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.CoreCount">
            <summary>
            Gets or sets the client core count.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.PhysicalMemory">
            <summary>
            Gets or sets the connector physical memory.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.OperatingSystem">
            <summary>
            Gets or sets the client operating system.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.OperatingSystemVersion">
            <summary>
            Gets or sets the client operating system version.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ClientInfo.Architecture">
            <summary>
            Gets or sets the client architecture.
            </summary>​
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="id">The client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="id">The client identifier.</param>
            <param name="tag">The client tag.</param>
            <param name="roles">The client roles.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ClientInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="id">The client identifier.</param>
            <param name="tag">The client tag.</param>
            <param name="roles">The client roles.</param>
            <param name="region">The client's region.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJson(FM.LiveSwitch.ClientInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="clientInfo">The client info to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="clientInfoJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client info.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.ToJsonArray(FM.LiveSwitch.ClientInfo[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="clientInfos">The client infos to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="clientInfosJson">The JSON to deserialize.</param>
            <returns>
            The deserialized client infos.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(System.String,System.String,System.String)">
            <summary>
            Tests equivalency.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="id">The client identifier.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(FM.LiveSwitch.ClientInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="clientInfo">The client information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.IsEquivalent(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.GetHashCode">
            <summary>
            Returns a hashcode identifying this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ClientInfo.Equals(System.Object)">
            <summary>
            Checks equality between two different ClientInfos.
            </summary>
            <param name="obj">The object to check.</param>
        </member>
        <member name="T:FM.LiveSwitch.ClientState">
            <summary>
            The state of a client.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.New">
            <summary>
            Indicates that the client is new and has not yet registered with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Registering">
            <summary>
            Indicates that the client is registering with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Registered">
            <summary>
            Indicates that the client is registered with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Unregistering">
            <summary>
            Indicates that the client is unregistering with the gateway.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClientState.Unregistered">
            <summary>
            Indicates that the client is unregistered with the gateway.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionInfo">
            <summary>
            Connection information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientTag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ClientRoles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.ExternalId">
            <summary>
            Gets or sets the connection external identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.State">
            <summary>
            Gets or sets the connection state.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Tag">
            <summary>
            Gets or sets the connection tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Type">
            <summary>
            Gets or sets the connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Recording">
            <summary>
            Gets or sets whether the connection is recording.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Error">
            <summary>
            Gets or sets the connection error, if an error exists.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.MediaId">
            <summary>
            Gets or sets the media identifier, for MCU or SFU upstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteConnectionId">
            <summary>
            Gets or sets the remote connection identifier, for peer or SFU downstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteMediaId">
            <summary>
            Gets or sets the remote media identifier, for SFU downstream connections.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioStream">
            <summary>
            Gets or sets the first connection audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioStreams">
            <summary>
            Gets or sets the connection audio streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoStream">
            <summary>
            Gets or sets the first connection video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoStreams">
            <summary>
            Gets or sets the connection video streams.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DataStream">
            <summary>
            Gets or sets the connection data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.Transports">
            <summary>
            Gets or sets the connection transport information.
            This will be <c>null</c> if BUNDLE is inactive.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasAudio">
            <summary>
            Gets a value indicating whether the connection
            has an audio stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasVideo">
            <summary>
            Gets a value indicating whether the connection
            has a video stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.HasData">
            <summary>
            Gets a value indicating whether the connection
            has a data stream.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalAudioMuted">
            <summary>
            Gets or sets if the local audio is muted.
            Obsolete. Use AudioStream.Muted instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalVideoMuted">
            <summary>
            Gets or sets if the local video is muted.
            Obsolete. Use VideoStream.Muted instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalAudioDisabled">
            <summary>
            Gets or sets if local audio is disabled.
            Obsolete. Use AudioStream.SendDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.LocalVideoDisabled">
            <summary>
            Gets or sets if local video is disabled.
            Obsolete. Use VideoStream.SendDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteAudioDisabled">
            <summary>
            Gets or sets if remote audio is disabled.
            Obsolete. Use AudioStream.ReceiveDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.RemoteVideoDisabled">
            <summary>
            Gets or sets if remote video is disabled.
            Obsolete. Use VideoStream.ReceiveDisabled instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioDirection">
            <summary>
            Gets or sets the audio stream direction.
            Obsolete. Use AudioStream.Direction instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoDirection">
            <summary>
            Gets or sets the video stream direction.
            Obsolete. Use VideoStream.Direction instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.DataDirection">
            <summary>
            Gets or sets the data stream direction.
            Obsolete.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.AudioFormats">
            <summary>
            Gets the audio formats, if applicable.
            Obsolete. Use AudioStream.Formats instead.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionInfo.VideoFormats">
            <summary>
            Gets the video formats, if applicable.
            Obsolete. Use VideoStream.Formats instead.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,FM.LiveSwitch.FormatInfo[],FM.LiveSwitch.FormatInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientTag">The client tag.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="id">The connection identifier.</param>
            <param name="tag">The connection tag.</param>
            <param name="type">The connection type.</param>
            <param name="mediaId">The media identifier.</param>
            <param name="localAudioMuted">The audio muted boolean.</param>
            <param name="localVideoMuted">The video muted boolean.</param>
            <param name="audioDirection">The audio direction.</param>
            <param name="videoDirection">The video direction.</param>
            <param name="dataDirection">The data direction.</param>
            <param name="audioFormats">The audio formats.</param>
            <param name="videoFormats">The video formats.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.String,FM.LiveSwitch.FormatInfo[],FM.LiveSwitch.FormatInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="id">The connection identifier.</param>
            <param name="tag">The connection tag.</param>
            <param name="type">The connection type.</param>
            <param name="mediaId">The media identifier.</param>
            <param name="localAudioMuted">The audio muted boolean.</param>
            <param name="localVideoMuted">The video muted boolean.</param>
            <param name="audioDirection">The audio direction.</param>
            <param name="videoDirection">The video direction.</param>
            <param name="dataDirection">The data direction.</param>
            <param name="audioFormats">The audio formats.</param>
            <param name="videoFormats">The video formats.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ConnectionInfo" /> class.
            </summary>
            <param name="id">The connection identifier.</param>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">the channel nidentifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="deviceId">Device identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeLocalAudioMuted">
            <summary>
            Gets whether to serialize the legacy local audio muted property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeLocalVideoMuted">
            <summary>
            Gets whether to serialize the legacy local video muted property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeAudioDirection">
            <summary>
            Gets whether to serialize the legacy audio direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeVideoDirection">
            <summary>
            Gets whether to serialize the legacy video direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeDataDirection">
            <summary>
            Gets whether to serialize the legacy data direction property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeAudioFormats">
            <summary>
            Gets whether to serialize the legacy audio formats property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ShouldSerializeVideoFormats">
            <summary>
            Gets whether to serialize the legacy video formats property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJson(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="connectionInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ConnectionInfo.
            </summary>
            <param name="connectionInfoJson">The serialized Json.</param>
            <returns>The deserialized ConnectionInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.ToJsonArray(FM.LiveSwitch.ConnectionInfo[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="connectionInfos">The connection infos to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="connectionInfosJson">The JSON to deserialize.</param>
            <returns>
            The deserialized connection infos.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.IsEquivalent(System.String,System.String,System.String,System.String)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="id">The connection identifier.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.IsEquivalent(FM.LiveSwitch.ConnectionInfo)">
            <summary>
            Tests for equivalency.
            </summary>
            <param name="connectionInfo">The connection information.</param>
            <returns>
              <c>true</c> if equivalent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.CreateClientInfo">
            <summary>
            Creates a client info object with details
            from this connection info object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.GetHashCode">
            <summary>
            Returns a hashcode identifying this instance.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ConnectionInfo.Equals(System.Object)">
            <summary>
            Checks equality between two different ClientInfos.
            </summary>
            <param name="obj">The object to check.</param>
        </member>
        <member name="T:FM.LiveSwitch.ConnectionType">
            <summary>
            A connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Mcu">
            <summary>
            Gets the "mcu" connection type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Sfu">
            <summary>
            Gets the "sfu" connection type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ConnectionType.Peer">
            <summary>
            Gets the "peer" connection type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.DataChannelReport">
            <summary>
            Data channel report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.MessagesSent">
            <summary>
            Gets or sets the number of messages sent on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.MessagesReceived">
            <summary>
            Gets or sets the number of messages received on this data channel.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.DataChannelReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this data channel.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.DataChannelReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.ToJson(FM.LiveSwitch.DataChannelReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="dataChannelReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.DataChannelReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a DataChannelReport.
            </summary>
            <param name="dataChannelReportJson">The serialized Json.</param>
            <returns>The deserialized DataChannelReport.</returns>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenMissing">
            <summary>
            Gets the error type associated with "tokenMissing".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenApplicationMismatch">
            <summary>
            Gets the error type associated with "tokenApplicationMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenUserMismatch">
            <summary>
            Gets the error type associated with "tokenUserMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenDeviceMismatch">
            <summary>
            Gets the error type associated with "tokenDeviceMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenClientMismatch">
            <summary>
            Gets the error type associated with "tokenClientMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenClientRoleMismatch">
            <summary>
            Gets the error type associated with "tokenClientRoleMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenRegionMismatch">
            <summary>
            Gets the error type associated with "tokenRegionMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenAuthFailure">
            <summary>
            Gets the error type associated with "tokenAuthFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenParseFailure">
            <summary>
            Gets the error type associated with "tokenParseFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenMissingChannelClaim">
            <summary>
            Gets the error type associated with "tokenMissingChannelClaim".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.TokenExpired">
            <summary>
            Gets the error type associated with "tokenExpired".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageParseFailure">
            <summary>
            Gets the error type associated with "messageParseFailure".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageRegisterExpected">
            <summary>
            Gets the error type associated with "messageRegisterExpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageRegisterUnexpected">
            <summary>
            Gets the error type associated with "messageRegisterUnexpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.MessageUnregisterUnexpected">
            <summary>
            Gets the error type associated with "messageUnregisterUnexpected".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.AccessMessageBlocked">
            <summary>
            Gets the error type associated with "accessMessageBlocked".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.AccessChannelClaimDenied">
            <summary>
            Gets the error type associated with "accessChannelClaimDenied".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerUpgradeRequired">
            <summary>
            Gets the error type associated with "serverUpgradeRequired".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerLicenseInvalid">
            <summary>
            Gets the error type associated with "serverLicenseInvalid".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerLicenseMissing">
            <summary>
            Gets the error type associated with "serverLicenseMissing".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoMediaServersAvailable">
            <summary>
            Gets the error type associated with "serverNoMediaServersAvailable".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerUnknownError">
            <summary>
            Gets the error type associated with "serverUnknownError".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoAudioCodecs">
            <summary>
            Gets the error type associated with "serverNoAudioCodecs".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ServerNoVideoCodecs">
            <summary>
            Gets the error type associated with "serverNoVideoCodecs".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpCodecMismatch">
            <summary>
            Gets the error type associated with "sdpCodecMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpStreamMismatch">
            <summary>
            Gets the error type associated with "sdpStreamMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SdpSimulcastMismatch">
            <summary>
            Gets the error type associated with "sdpSimulcastMismatch".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.SfuInvalidUpstream">
            <summary>
            Gets the error type associated with "sfuInvalidUpstream".
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ErrorType.ClientInvalidId">
            <summary>
            Gets the error type associated with "clientInvalidId".
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.EventInfo">
            <summary>
            Event information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Timestamp">
            <summary>
            Gets or sets the event timestamp in milliseconds since epoch.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Origin">
            <summary>
            Gets or sets the event origin.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Type">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Forced">
            <summary>
            Gets or sets whether this event was forced.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Gateway">
            <summary>
            Gets or sets the gateway information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.MediaServer">
            <summary>
            Gets or sets the media server information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.SipConnector">
            <summary>
            Gets or sets the SIP connector information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Client">
            <summary>
            Gets or sets the client information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Channel">
            <summary>
            Gets or sets the channel information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventInfo.Connection">
            <summary>
            Gets or sets the connection information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.#ctor">
            <summary>
            Initializes a new event.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.#ctor(System.String)">
            <summary>
            Initializes a new event.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJson(FM.LiveSwitch.EventInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.ToJsonArray(FM.LiveSwitch.EventInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.EventInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.EventOrigin">
            <summary>
            Event origins.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.Gateway">
            <summary>
            Gets the 'gateway' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.MediaServer">
            <summary>
            Gets the 'mediaserver' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.SipConnector">
            <summary>
            Gets the 'sipconnector' event origin string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.EventOrigin.Client">
            <summary>
            Gets the 'client' event origin string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ExternalNetworkInfo">
            <summary>
            External network information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ExternalNetworkInfo.PublicIPAddress">
            <summary>
            Gets or sets the public IP address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ExternalNetworkInfo.PublicHostname">
            <summary>
            Gets or sets the public hostname.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.ToJson(FM.LiveSwitch.ExternalNetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a ExternalNetworkInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized ExternalNetworkInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.ExternalNetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.InternalNetworkInfo">
            <summary>
            Internal network information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.ToJson(FM.LiveSwitch.InternalNetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a InternalNetworkInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized InternalNetworkInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.InternalNetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.InvitationState">
            <summary>
            The invite feedback states.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Unknown">
            <summary>
            Gets the unknown state.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Pending">
            <summary>
            Gets the state for "pending". 
            This state is for when no feedback has been received yet.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Proceeding">
            <summary>
            Gets the state for "proceeding". 
            This state is for when we are waiting for the invited party to respond.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Sent">
            <summary>
            Gets the state for "sent".
            This state is for when the invite is sent in a way that does not allow feedback to be returned.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Cancelled">
            <summary>
            Gets the state for "canceled".
            This state is for when the invite has been canceled.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Cancelling">
            <summary>
            Gets the state for "cancelling".
            This state is for when the invite is in the process of being cancelled. May fail due to timing.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Rejected">
            <summary>
            Gets the state for "rejected".
            This state is for when the invitation was explicitly rejected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Accepted">
            <summary>
            Gets the state for "accepted".
            This state is for when the invitation was accepted.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.NotFound">
            <summary>
            Gets the state for "notFound".
            This state is for when the invited user id cannot be found.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Busy">
            <summary>
            Gets the state for "busy".
            This state is for when the invited user signals they are busy.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.NoResponse">
            <summary>
            Gets the state for "noResponse".
            This state is for when the invitation did not receive a response.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.Invalid">
            <summary>
            Gets the state for "invalid".
            This state is when the invitation cannot be processed.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.InvitationState.AlreadyInvited">
            <summary>
            Gets the state for "alreadyInvited".
            This state is when another invite for the same user id, protocol, and channel already exists.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.InviteFeedback">
            <summary>
            A class containing the feedback from invite requests.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.Protocol">
            <summary>
            Gets the protocol the user was invited on.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.UserId">
            <summary>
            Gets the user id for the user being invited.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.State">
            <summary>
            Gets the current state of the invite.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.InviteFeedback.Reason">
            <summary>
            Gets the detailed reason for the state if available.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.#ctor(System.String,System.String,FM.LiveSwitch.InvitationState,System.String)">
            <summary>
            Creates an instance of a InviteFeedback class.
            </summary>
            <param name="userId">The user id of the user being invited.</param>
            <param name="protocol">The protocol the original invite was using.</param>
            <param name="state">The current state of the invite.</param>
            <param name="reason">The detailed reason if available.</param>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.ToJson(FM.LiveSwitch.InviteFeedback)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="feedback">The invite feedback to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.InviteFeedback.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="feedbackJson">The JSON to deserialize.</param>
            <returns>
            The deserialized invite feedback.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.LogEventInfo">
            <summary>
            Log event information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Level">
            <summary>
            Gets or sets the log event level.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Tag">
            <summary>
            Gets or sets the log event tag.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Scope">
            <summary>
            Gets or sets the log event scope.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Message">
            <summary>
            Gets or sets the log event message.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.Exception">
            <summary>
            Gets or sets the log event exception message.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.LogEventInfo.ThreadId">
            <summary>
            Gets or sets the log event thread ID.
            </summary>​
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.ToJson(FM.LiveSwitch.LogEventInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="logEventInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.LogEventInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a LogEventInfo.
            </summary>
            <param name="logEventInfoJson">The serialized Json.</param>
            <returns>The deserialized LogEventInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.MediaInfo">
            <summary>
            Media information.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaReceiverReport">
            <summary>
            Media receiver report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsReceived">
            <summary>
            Gets or sets the number of packets received.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsDiscarded">
            <summary>
            Gets or sets the number of packets discarded.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsDuplicated">
            <summary>
            Gets or sets the number of packets duplicated.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsRepaired">
            <summary>
            Gets or sets the number of packets repaired.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.PacketsLost">
            <summary>
            Gets or sets the number of packets lost.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaReceiverReport.Jitter">
            <summary>
            Gets or sets the jitter in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaReceiverReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJson(FM.LiveSwitch.MediaReceiverReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaReceiverReport">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaReceiverReportJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.ToJsonArray(FM.LiveSwitch.MediaReceiverReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaReceiverReports">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaReceiverReportsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaReceiverReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.MediaSenderReport">
            <summary>
            Media sender report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.PacketsSent">
            <summary>
            Gets or sets the number of packets sent.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MediaSenderReport.RoundTripTime">
            <summary>
            Gets or sets the round-trip-time in milliseconds.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.MediaSenderReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJson(FM.LiveSwitch.MediaSenderReport)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="mediaSenderReport">The instance to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="mediaSenderReportJson">The serialized JSON.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.ToJsonArray(FM.LiveSwitch.MediaSenderReport[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="mediaSenderReports">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.FromJsonArray(System.String)">
            <summary>
            Deserializes an array from JSON.
            </summary>
            <param name="mediaSenderReportsJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MediaSenderReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.Message">
            <summary>
            A message.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Timestamp">
            <summary>
            Gets or sets the message timestamp.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.MediaServerId">
            <summary>
            Gets or sets the media server identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectorId">
            <summary>
            Gets or sets the connector identifer.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ChannelReports">
            <summary>
            Gets or sets the channel reports.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.UserAlias">
            <summary>
            Gets or sets the user alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.DeviceAlias">
            <summary>
            Gets or sets the device alias.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientTag">
            <summary>
            Gets or sets the client tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ClientRoles">
            <summary>
            Gets or sets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionTag">
            <summary>
            Gets or sets the connection tag.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ConnectionType">
            <summary>
            Gets or sets the connection type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.MediaId">
            <summary>
            Gets or sets the broadcast identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteUserId">
            <summary>
            Gets or sets the remote user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteDeviceId">
            <summary>
            Gets or sets the remote device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteClientId">
            <summary>
            Gets or sets the remote client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteConnectionId">
            <summary>
            Gets or sets the remote connection identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.RemoteMediaId">
            <summary>
            Gets or sets the remote broadcast identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Message.ApiVersion">
            <summary>
            Gets the API Version.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.Clone">
            <summary>
            Creates a copy of the Message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateEventMessage(System.String)">
            <summary>
            Creates an "event" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUnregisterMessage">
            <summary>
            Creates an "unregister" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUnregisterMessage(FM.LiveSwitch.ChannelReport[])">
            <summary>
            Creates an "unregister" message.
            </summary>
            <param name="channelReports">The channel reports.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCandidateMessage(System.String)">
            <summary>
            Creates a "candidate" message.
            </summary>
            <param name="candidateJson">The candidate.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCloseMessage">
            <summary>
            Creates a "close" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateInviteMessage(System.String,System.String)">
            <summary>
            Creates a "invite" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCancelInviteMessage(System.String,System.String)">
            <summary>
            Creates a "cancelInvite" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRegisterMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Creates a "register" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="userAlias">The user alias.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="deviceAlias">The device alias.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientTag">The client tag.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="region">The region.</param>
            <param name="token">The auth token.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateJoinMessage(System.String,System.String)">
            <summary>
            Creates a "join" message.
            </summary>
            <param name="channelId">The channel to join.</param>
            <param name="token">The auth token.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateLeaveMessage(System.String,FM.LiveSwitch.ChannelReport)">
            <summary>
            Creates a "leave" message.
            </summary>
            <param name="channelId">The channel to leave.</param>
            <param name="channelReport">The channel report.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateIceServersMessage">
            <summary>
            Creates an "iceServers" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMcuOfferMessage(System.String,System.String)">
            <summary>
            Creates an MCU "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String)">
            <summary>
            Creates an SFU upstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an SFU downstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <param name="remoteConnectionId">The remote connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateSfuOfferMessage(System.String,System.String,System.String)">
            <summary>
            Creates an SFU downstream "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteMediaId">The remote media identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerOfferMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a peer "offer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="offerJson">The offer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerAnswerMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a peer "answer" message.
            </summary>
            <param name="tag">The tag.</param>
            <param name="answerJson">The answer.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerRejectMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "reject" message.
            </summary>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <param name="remoteConnectionId">The remote connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerCandidateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "candidate" message.
            </summary>
            <param name="candidateJson">The candidate.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreatePeerCloseMessage(System.String,System.String,System.String)">
            <summary>
            Creates a "close" message.
            </summary>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateMessageMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "message" message.
            </summary>
            <param name="message">The message.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUpdateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a 'update' message.
            </summary>
            <param name="configJson">The config to send to the server.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateUpdateMessage(System.String)">
            <summary>
            Creates a 'update' message.
            </summary>
            <param name="configJson">The config to send to the server.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateErrorMessage(System.String)">
            <summary>
            Creates a "error" message.
            </summary>
            <param name="error">The error type.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateErrorMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "error" message.
            </summary>
            <param name="error">The error type.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateKeyFrameRequestMessage(System.Int64[])">
            <summary>
            Creates a "keyFrameRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateRequestMessage(FM.LiveSwitch.BitrateRequest)">
            <summary>
            Creates a "bitrateRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateRequestMessage(FM.LiveSwitch.BitrateRequest[])">
            <summary>
            Creates a "bitrateRequest" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateNotificationMessage(FM.LiveSwitch.BitrateNotification)">
            <summary>
            Creates a "bitrateNotification" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateBitrateNotificationMessage(FM.LiveSwitch.BitrateNotification[])">
            <summary>
            Creates a "bitrateNotification" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateDtmfTonesMessage(FM.LiveSwitch.Dtmf.Tone[])">
            <summary>
            Creates a "dtmfTones" message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateKickMessage(System.String,System.String)">
            <summary>
            Creates a "kick" message.
            </summary>
            <param name="channelId">The channel identifier.</param>
            <param name="clientId">The ID of the client to kick.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateInviteFeedbackMessage(FM.LiveSwitch.InviteFeedback,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "inviteFeedback" message.
            </summary>
            <param name="feedback">The invitation feedback.</param>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
            <param name="userId">The user id.</param>
            <param name="deviceId">The device id.</param>
            <param name="clientId">The client id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateNotifyUpstreamCloseMessage(FM.LiveSwitch.ConnectionInfo[])">
            <summary>
            Creates a "notifyUpstreamClose" message.
            The connection infos are expected to be deflated.
            </summary>
            <param name="connectionInfos">The connection infos.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateHeartbeatMessage(System.String)">
            <summary>
            Creates a "heartbeat" message.
            </summary>
            <param name="clusterId">The cluster identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateClusterJoinMessage(System.String,System.String,System.String,FM.LiveSwitch.MediaServer.ClusterJoinInfo)">
            <summary>
            Creates a "clusterJoin" message.
            </summary>
            <param name="mediaServerId">The meida server id.</param>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
            <param name="joinInfo">The cluster join info.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateClusterLeaveMessage(System.Guid,System.String,System.String)">
            <summary>
            Creates a "clusterLeave" message.
            </summary>
            <param name="mediaServerId">The meida server id.</param>
            <param name="applicationId">The application id.</param>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateCloseMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "close" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateFailMessage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a "fail" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="connectionId">The connection identifier.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateNotifyJoinMessage(System.String,System.String,FM.LiveSwitch.ClientInfo[])">
            <summary>
            Creates a "notifyJoin" message.
            The client infos are expected to be inflated.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="clientInfos">The client infos.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateNotifyLeaveMessage(System.String,System.String,FM.LiveSwitch.ClientInfo[],System.String,System.String,System.String)">
            <summary>
            Creates a "notifyLeave" message.
            The client infos are expected to be deflated.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="clientInfos">The client infos.</param>
            <param name="remoteUserId">The remote user identifier.</param>
            <param name="remoteDeviceId">The remote device identifier.</param>
            <param name="remoteClientId">The remote client identifier.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRecordMessage(System.String,System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.RecordingConfig)">
            <summary>
            Creates a "record" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="connectionId">The connection identifier.</param>
            <param name="recordingConfig">The recording config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRecordMessage(System.String,System.String,System.String,System.String,System.String,FM.LiveSwitch.RecordingConfig)">
            <summary>
            Creates a "record" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="recordingConfig">The recording config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRecordMessage(System.String,System.String,System.String,System.String,FM.LiveSwitch.RecordingConfig)">
            <summary>
            Creates a "record" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="recordingConfig">The recording config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRecordMessage(System.String,System.String,System.String,FM.LiveSwitch.RecordingConfig)">
            <summary>
            Creates a "record" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="recordingConfig">The recording config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.CreateRecordMessage(System.String,System.String,FM.LiveSwitch.RecordingConfig)">
            <summary>
            Creates a "record" message.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="recordingConfig">The recording config.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJson(FM.LiveSwitch.Message)">
            <summary>
            Serializes an instance to JSON.
            </summary>
            <param name="message">The message to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
            <param name="messageJson">The JSON to deserialize.</param>
            <returns>
            The deserialized message.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.PropertiesToJson(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes properties to JSON.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.PropertyFromJson(System.String,System.String)">
            <summary>
            Deserializes a property from JSON.
            </summary>
            <param name="name">The name.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Message.ToJsonArray(FM.LiveSwitch.Message[])">
            <summary>
            Serializes an array of instances to JSON.
            </summary>
            <param name="messages">The messages to serialize.</param>
            <returns>
            The serialized JSON.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Message.FromJsonArray(System.String)">
            <summary>
            Deserializes an array of instances from JSON.
            </summary>
            <param name="messagesJson">The JSON to deserialize.</param>
            <returns>
            The deserialized messages.
            </returns>
        </member>
        <member name="T:FM.LiveSwitch.MessageInfo">
            <summary>
            Message information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.DeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageInfo.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.ToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.ToJson(FM.LiveSwitch.MessageInfo)">
            <summary>
            Serializes an instance to JSON.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MessageInfo.FromJson(System.String)">
            <summary>
            Deserializes an instance from JSON.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MessageType">
            <summary>
            A message type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Register">
            <summary>
            Gets the "register" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Unregister">
            <summary>
            Gets the "unregister" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Join">
            <summary>
            Gets the "join" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Leave">
            <summary>
            Gets the "leave" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Offer">
            <summary>
            Gets the "offer" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Answer">
            <summary>
            Gets the "answer" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Reject">
            <summary>
            Gets the "reject" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Candidate">
            <summary>
            Gets the "candidate" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Close">
            <summary>
            Gets the "close" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.IceServers">
            <summary>
            Gets the "iceServers" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Fail">
            <summary>
            Gets the "fail" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Error">
            <summary>
            Gets the "error" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyJoin">
            <summary>
            Gets the "notifyJoin" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyLeave">
            <summary>
            Gets the "notifyLeave" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamOpen">
            <summary>
            Gets the "notifyUpstreamOpen" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamUpdate">
            <summary>
            Gets the "notifyUpstreamUpdate" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyUpstreamClose">
            <summary>
            Gets the "notifyUpstreamClose" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Event">
            <summary>
            Gets the "event" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Report">
            <summary>
            Gets the "report" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyServiceState">
            <summary>
            Gets the "notifyServiceState" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Message">
            <summary>
            Gets the "message" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Record">
            <summary>
            Gets the "record" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Kick">
            <summary>
            Gets the "kick" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Update">
            <summary>
            Gets the "update" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Invite">
            <summary>
            Gets the "invite" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.CancelInvite">
            <summary>
            Gets the "cancelInvite" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.InviteFeedback">
            <summary>
            Gets the "inviteFeedback" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.McuVideoLayout">
            <summary>
            Gets the "mcuVideoLayout" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.NotifyConnectionState">
            <summary>
            Gets the "notifyConnectionState" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.Heartbeat">
            <summary>
            Gets the "heartbeat" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.ClusterJoin">
            <summary>
            Gets the "clusterJoin" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.ClusterLeave">
            <summary>
            Gets the "clusterLeave" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.KeyFrameRequest">
            <summary>
            Gets the "keyFrameRequest" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.BitrateRequest">
            <summary>
            Gets the "bitrateRequest" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.BitrateNotification">
            <summary>
            Gets the "bitrateNotification" message type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MessageType.DtmfTones">
            <summary>
            Gets the "dtmfTones" message type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.MixerReport">
            <summary>
            Mixer report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.Disabled">
            <summary>
            Gets or sets whether the mixer is disabled.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.InputFormat">
            <summary>
            Gets or sets the mixer input format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputFormat">
            <summary>
            Gets or sets the mixer output format.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputWidth">
            <summary>
            Gets or sets the mixer output width.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputHeight">
            <summary>
            Gets or sets the mixer output height.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.MixerReport.OutputFrameRate">
            <summary>
            Gets or sets the mixer output frame-rate.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.MixerReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.MixerReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkInfo">
            <summary>
            Network information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInfo.IPAddresses">
            <summary>
            Gets or sets the IP addresses.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInfo.Ports">
            <summary>
            Gets or sets the ports.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.ToJson(FM.LiveSwitch.NetworkInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="networkInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a GatewayInfo.
            </summary>
            <param name="networkInfoJson">The serialized Json.</param>
            <returns>The deserialized GatewayInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.NetworkInterfaceInfo">
            <summary>
            Network interface information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.IPAddress">
            <summary>
            Gets or sets the network interface address.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.Mask">
            <summary>
            Gets or sets the network interface subnet mask.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.NetworkInterfaceInfo.AdapterSpeed">
            <summary>
            Gets or sets the network interface adapter speed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJson(FM.LiveSwitch.NetworkInterfaceInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="client">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a NetworkInterfaceInfo.
            </summary>
            <param name="networkInterfaceInfoJson">The serialized Json.</param>
            <returns>The deserialized NetworkInterfaceInfo.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.ToJsonArray(FM.LiveSwitch.NetworkInterfaceInfo[])">
            <summary>
            Serializes an array to JSON.
            </summary>
            <param name="networkInterfaceInfos">The array to serialize.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:FM.LiveSwitch.NetworkInterfaceInfo.FromJsonArray(System.String)">
            <summary>
            Deserializes JSON to an array.
            </summary>
            <param name="networkInterfaceInfosJson">The serialized JSON.</param>
            <returns>The deserialized array.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Report">
            <summary>
            Report.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Report.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.Report.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessBoolean(System.Boolean,System.Boolean)">
            <summary>
            Processes a boolean for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessShort(System.Int16,System.Int16)">
            <summary>
            Processes a short for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessInteger(System.Int32,System.Int32)">
            <summary>
            Processes an integer for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessLong(System.Int64,System.Int64)">
            <summary>
            Processes a long for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloat(System.Single,System.Single)">
            <summary>
            Processes a float for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessDouble(System.Double,System.Double)">
            <summary>
            Processes a double for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessString(System.String,System.String)">
            <summary>
            Processes a string for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessBooleanArray(System.Boolean[],System.Boolean[])">
            <summary>
            Processes a boolean array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessShortArray(System.Int16[],System.Int16[])">
            <summary>
            Processes a short array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessIntegerArray(System.Int32[],System.Int32[])">
            <summary>
            Processes a integer array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessLongArray(System.Int64[],System.Int64[])">
            <summary>
            Processes a long array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloatArray(System.Single[],System.Single[])">
            <summary>
            Processes a float array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessFloatArray(System.Double[],System.Double[])">
            <summary>
            Processes a double array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values do not equal the old values; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessObject``1(``0,``0)">
            <summary>
            Processes an array for a report.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns>The new value, if the new value does not equal the old value; otherwise null.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Report.ProcessArray``1(``0[],``0[])">
            <summary>
            Processes an array for a report.
            </summary>
            <param name="newValues">The new values.</param>
            <param name="oldValues">The old values.</param>
            <returns>The new values, if the new values are not equivalent to the old values; otherwise null.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Token">
            <summary>
            A token.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.HmacSha256Algorithm">
            <summary>
            Gets the HMAC SHA-256 algorithm string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.RsaSha256Algorithm">
            <summary>
            Gets the RSA SHA-256 algorithm string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.DefaultExpiry">
            <summary>
            Gets the default token expiry (120 seconds).
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Algorithm">
            <summary>
            Gets the algorithm.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.IssuedAt">
            <summary>
            Gets the "issued at" date/time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ExpirationTime">
            <summary>
            Gets the "expires at" date/time.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.MediaServerId">
            <summary>
            Gets the media server identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ConnectorId">
            <summary>
            Gets the connector identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.UserId">
            <summary>
            Gets the user identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ClientId">
            <summary>
            Gets the client identifier.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ClientRoles">
            <summary>
            Gets the client roles.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.Region">
            <summary>
            Gets the region.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ChannelClaims">
            <summary>
            Gets an array of channel claims.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Token.ChannelClaim">
            <summary>
            Gets the first channel claim.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateEventToken(System.String,System.String)">
            <summary>
            Generates a signed event token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateEventToken(System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed event token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The expiration time.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateConnectorRegisterToken(System.String,System.String)">
            <summary>
            Generates a signed connector register token.
            </summary>
            <param name="connectorId">The connector identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateConnectorRegisterToken(System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed connector register token.
            </summary>
            <param name="connectorId">The connector identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateConnectorRegisterToken(System.String,FM.LiveSwitch.RsaKey)">
            <summary>
            Generates a signed connector register token.
            </summary>
            <param name="connectorId">The connector identifier.</param>
            <param name="privateKey">The private key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateMediaServerRegisterToken(System.String,System.String)">
            <summary>
            Generates a signed media server register token.
            </summary>
            <param name="mediaServerId">The media server identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateMediaServerRegisterToken(System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed media server register token.
            </summary>
            <param name="mediaServerId">The media server identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateMediaServerRegisterToken(System.String,FM.LiveSwitch.RsaKey)">
            <summary>
            Generates a signed media server register token.
            </summary>
            <param name="mediaServerId">The media server identifier.</param>
            <param name="privateKey">The private key.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelIds">The channel identifiers.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientRegisterToken(System.String,System.String,System.String,System.String,System.String[],FM.LiveSwitch.ChannelClaim[],System.String,System.DateTime,System.String)">
            <summary>
            Generates a signed client register token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="clientRoles">The client roles.</param>
            <param name="channelClaims">The channel claims.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <param name="region">The region of the client.</param>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,FM.LiveSwitch.ChannelClaim,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,FM.LiveSwitch.ChannelClaim,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelClaim">The channel claim.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.GenerateClientJoinToken(System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Generates a signed client join token.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="deviceId">The device identifier.</param>
            <param name="clientId">The client identifier.</param>
            <param name="channelId">The channel identifier.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="expirationTime">The time the token will expire in UTC.</param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(System.String)">
            <summary>
            Verifies the token signature.
            </summary>
            <param name="sharedSecret">The shared secret.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(FM.LiveSwitch.RsaKey)">
            <summary>
            Verifies the token signature.
            </summary>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(System.String,FM.LiveSwitch.RsaKey)">
            <summary>
            Parses a token and verifies its signature.
            </summary>
            <param name="tokenString">The token string.</param>
            <param name="publicKey">The public key.</param>
            <returns>
              <c>true</c> if the token string could be parsed and the signature is valid; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Verify(System.String,System.String)">
            <summary>
            Parses a token and verifies its signature.
            </summary>
            <param name="tokenString">The token string.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns>
              <c>true</c> if the token string could be parsed and the signature is valid; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.Token.Parse(System.String)">
            <summary>
            Parses a token string.
            </summary>
            <param name="tokenString">The token string.</param>
            <returns>The token.</returns>
        </member>
        <member name="T:FM.LiveSwitch.ClaimAction">
            <summary>
            A claim action.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Join">
            <summary>
            Gets the "join" claim action string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Claim">
            <summary>
            Gets the "claim" claim action string.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ClaimAction.Drop">
            <summary>
            Gets the "drop" claim action string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TokenType">
            <summary>
            A token type.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Register">
            <summary>
            Gets the "register" token type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Join">
            <summary>
            Gets the "join" token type string.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TokenType.Event">
            <summary>
            Gets the "event" token type string.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.TransportReport">
            <summary>
            Transport report.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportReport.BytesSent">
            <summary>
            Gets or sets the number of bytes sent on this transport.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.TransportReport.BytesReceived">
            <summary>
            Gets or sets the number of bytes received on this transport.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.TransportReport"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.ToJson(FM.LiveSwitch.TransportReport)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="transportReport">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.FromJson(System.String)">
            <summary>
            Deserializes Json to a TransportReport.
            </summary>
            <param name="transportReportJson">The serialized Json.</param>
            <returns>The deserialized TransportReport.</returns>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.TransportReport.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="T:FM.LiveSwitch.WebhookInfo">
            <summary>
            Webhook information.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.WebhookInfo.Url">
            <summary>
            Gets or sets the webhook URL.
            </summary>​
        </member>
        <member name="P:FM.LiveSwitch.WebhookInfo.Result">
            <summary>
            Gets or sets the webhook result.
            </summary>​​
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.ToJson">
            <summary>
            Serializes this instance to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.SerializeProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes the properties.
            </summary>
            <param name="jsonObject">The JSON object.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.DeserializeProperties(System.String,System.String)">
            <summary>
            Deserializes the properties.
            </summary>
            <param name="key">The key.</param>
            <param name="valueJson">The value in JSON format.</param>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.ToJson(FM.LiveSwitch.WebhookInfo)">
            <summary>
            Serializes an instance to Json.
            </summary>
            <param name="webhookInfo">The instance to serialize.</param>
            <returns>Serialized Json.</returns>
        </member>
        <member name="M:FM.LiveSwitch.WebhookInfo.FromJson(System.String)">
            <summary>
            Deserializes Json to a WebhookInfo.
            </summary>
            <param name="webhookInfoJson">The serialized Json.</param>
            <returns>The deserialized WebhookInfo.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Service.Configuration.FMXmlConfigurationProvider">
            <summary>
            Represents an XML file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Configuration.FMXmlConfigurationProvider.#ctor(FM.LiveSwitch.Service.Configuration.FMXmlConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Configuration.FMXmlConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads the XML data from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="T:FM.LiveSwitch.Service.Configuration.FMXmlConfigurationSource">
            <summary>
            An XML file based <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Configuration.FMXmlConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/></returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.ServiceUrl">
            <summary>
            Gets the gateway service url for this LiveSwitch site.
            </summary>
            <returns>The service endpoint url.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.ReportInterval">
            <summary>
            Gets the interval in which media server reports are sent to the gateway.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.ServiceType">
            <summary>
            Gets the type of service this is; Gateway, Media Server, or Sip Connector.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.ClusterBindings">
            <summary>
            Gets the cluster bindings scoped to this region.
            </summary>
            <returns>A <see cref="T:FM.LiveSwitch.Models.ClusterBindingConfig"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.StunUrls">
            <summary>
            Gets the configured STUN Urls.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.ServiceStatsInterval">
            <summary>
            Gets the service stats interval scoped to the deployment.
            </summary>
            <returns>The scoped service stats interval.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.RecordingPath">
            <summary>
            Gets the recording path scoped to the region.
            </summary>
            <returns>The scoped recording path.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.RecordingStrategy">
            <summary>
            Gets the recording strategy for this deployment.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.HttpBindings">
            <summary>
            Gets the http binding configuration.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:FM.LiveSwitch.Models.HttpBindingConfig"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.HttpsBindings">
            <summary>
            Gets the https binding configurations.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:FM.LiveSwitch.Models.HttpsBindingConfig"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.TurnBindings">
            <summary>
            Gets the TURN configuration.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:FM.LiveSwitch.Models.TurnBindingConfig"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Configuration.HostService.TurnsBindings">
            <summary>
            Gets the TURNS configuration.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:FM.LiveSwitch.Models.TurnsBindingConfig"/>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.Configuration.HostService.GetWebhooks">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the webhooks.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the webhooks.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.Configuration.HostService.GetLogTargets">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of configured log targets.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:FM.LiveSwitch.Models.LogTargetConfig"/></returns>
        </member>
        <member name="T:FM.LiveSwitch.Service.Embedded">
            <summary>
            Contains methods to assist with embedded resource management.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Embedded.GetString(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an embedded resource.
            </summary>
            <param name="assembly">The assembly in which the embedded source is located.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The contents of the embedded resource.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.Embedded.GetBytes(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an embedded resource.
            </summary>
            <param name="assembly">The assembly in which the embedded source is located.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The contents of the embedded resource.</returns>
        </member>
        <member name="T:FM.LiveSwitch.Service.Logging.RemappingLoggerProvider">
            <summary>
            Microsoft extensions logger provider that provides a logger which can
            alter elements of the log message to make logs generated across 3rd party
            libraries more consistent.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Logging.RemappingLoggerProvider.AddLogLevelRule(System.String,FM.LiveSwitch.Service.Logging.RemappingLoggerProvider.LogLevelRule)">
            <summary>
            Add a rule to apply to categories that start with the categoryNamePrefix.  If there
            are multiple rules, there is no guarantee which rule will run first.  All rules must
            be added before a logger is created.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.PendingConnections">
            <summary>
            Gets or sets the number of connections that are currently in the process of connecting.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.FailedConnections">
            <summary>
            Gets or sets the number of connections that had connected previously but now have failed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.FailedConnectionAttempts">
            <summary>
            Gets or sets the number of connections that failed during the connecting process.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.ActiveConnections">
            <summary>
            Gets or sets the current number of active connections on this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.ClosedConnections">
            <summary>
            Gets or sets the current number of closed connections on this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.MediaServerReport.ConnectionStatsReport.ClosedPendingConnection">
            <summary>
            Gets or sets the current number of connections that were closed before they completed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.MessageQueue.IConnection.CreateQueue(System.String)">
            <summary>
            Creates a non-exclusive queue for use across multiple channels.
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.MessageQueue.IConnection.GetPersistentQueue``1(System.String)">
            <summary>
            Gets a <seealso cref="!:IQueue"/> object.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.MessageQueue.IConnection.GetExclusiveQueue``1(System.String)">
            <summary>
            Gets an exclusive queue that closes when <seealso cref="!:IQueue"/> is disposed.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.MessageQueue.IConnection.GetWorkQueue``1(System.String)">
            <summary>
            Gets a work item queue. These are single queues with multiple consumers.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.MessageQueue.IConnection.DeleteQueue(System.String)">
            <summary>
            Deletes a non-exlcusive queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.AtomicCounter.Increment">
            <summary>
            Atomically increment the value by 1 and reports the new value as a Gauge to a metrics provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.AtomicGauge.RegisterTask(System.Int32)">
            <summary>
            Returns a task that will resolve once the counter of this gauge reaches a target <paramref name="count"/>.
            If the counter reaches the target count while in the middle of registering a task, the task may not resolve until the next time it reaches the target.
            </summary>
            <param name="count">The value of the counter to register for.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.AtomicGauge.Reset">
            <summary>
            Sets the gauge back to zero.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.AtomicGauge.Increment">
            <summary>
            Atomically increment the value by 1 and reports the new value as a Gauge to a metrics provider.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.AtomicGauge.Decrement">
            <summary>
            Atomically decrement the value by 1  and reports the new value as a Gauge to a metrics provider.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider">
            <summary>
            Metrics provider to send metrics to datadog.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider.#ctor(Microsoft.Extensions.Options.IOptions{FM.LiveSwitch.Service.Metrics.MetricOptions},FM.LiveSwitch.Service.Configuration.IHostService)">
            <summary>
            Instantiate a new instance of the DogStatsMetricProvider class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider.Increment(System.String,System.Int64,System.String[])">
            <summary>
            Increment the count of a metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The amount to increment the count by.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider.Increment(System.String,System.String[])">
            <summary>
            Increment the count of a metric by 1.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider.Gauge(System.String,System.Double,System.String[])">
            <summary>
            Log a value to a gauge metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The current value of the guage.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.DogStatsMetricProvider.StartNewTimer(System.String,System.String[])">
            <summary>
            Create a new timer to time code execution.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="T:FM.LiveSwitch.Service.Metrics.IMetricProvider">
            <summary>
            Base class for all metric provider implementations.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.IMetricProvider.Increment(System.String,System.Int64,System.String[])">
            <summary>
            Increment the count of a metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The amount to increment the count by.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.IMetricProvider.Increment(System.String,System.String[])">
            <summary>
            Increment the count of a metric by 1.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.IMetricProvider.Gauge(System.String,System.Double,System.String[])">
            <summary>
            Log a value to a gauge metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The current value of the guage.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.IMetricProvider.StartNewTimer(System.String,System.String[])">
            <summary>
            Create a new timer to time code execution.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="T:FM.LiveSwitch.Service.Metrics.NullMetricProvider">
            <summary>
            Null metrics provider that doesn't send metrics anywhere.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Service.Metrics.NullMetricTimer">
            <summary>
            A metric timer that is disposable but doesn't do anything.  This is used
            when there is no metric provider provided timer so code that uses a timer
            can still function without a null error occurring.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.NullMetricTimer.Dispose">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider">
            <summary>
            Metrics provider to send metrics to a StatsD server.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider.#ctor(Microsoft.Extensions.Options.IOptions{FM.LiveSwitch.Service.Metrics.MetricOptions},FM.LiveSwitch.Service.Configuration.IHostService)">
            <summary>
            Instantiate a new instance of an IMetricProvider class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider.Increment(System.String,System.Int64,System.String[])">
            <summary>
            Increment the count of a metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The amount to increment the count by.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider.Increment(System.String,System.String[])">
            <summary>
            Increment the count of a metric by 1.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider.Gauge(System.String,System.Double,System.String[])">
            <summary>
            Log a value to a gauge metric.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="value">The current value of the guage.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Metrics.StatsDMetricProvider.StartNewTimer(System.String,System.String[])">
            <summary>
            Create a new timer to time code execution.
            </summary>
            <param name="eventName">The name of this metric.</param>
            <param name="tags">Tags to apply to the event if the provider supports it.</param>
        </member>
        <member name="T:FM.LiveSwitch.Service.Utilities.Duplicator">
            <summary>
            Uses Linq.Expressions to build high performant deep clone methods.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.MaxBatchSize">
            <summary>
            Gets or sets the maximum batch size.
            A value less than or equal to zero indicates no limit.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Completed">
            <summary>
            Gets a value indicating whether this queue is completed.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Completion">
            <summary>
            Gets a task that resolves when the dispatch queue is empty and complete.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.#ctor(System.Action{`0[]})">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1"/> class.
            </summary>
            <param name="action">The action to be performed on the items.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.#ctor(System.Func{`0[],System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1"/> class.
            </summary>
            <param name="function">The action to be performed on the items.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Complete">
            <summary>
            Marks the queue as complete preventing new items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Destroy">
            <summary>
            Discards remaining items in the queue allowing immediate completion.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.BatchDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item to enqueue.</param>
            <returns><c>true</c> if the item could be added.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.Completion">
            <summary>
            Gets a task that is resolved when the queue is marked as completed and finished processing.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.#ctor(FM.LiveSwitch.Models.Webhook,System.Guid,FM.LiveSwitch.Service.Licensing.ILicenseKeyService,FM.LiveSwitch.Service.Persistence.IPersistenceService,System.Net.Http.IHttpClientFactory,FM.LiveSwitch.Service.Metrics.IMetricProvider)">
            <summary>
            Creates a new instance of the <see cref="T:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue"/> class.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.Complete">
            <summary>
            Mark the queue as completed and prevent new items.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.Enqueue(System.String)">
            <summary>
            Enqueues a JSON entity for processing.
            </summary>
            <param name="json">The JSON entity to be queued for processing.</param>
        </member>
        <member name="M:FM.LiveSwitch.Service.Webhooks.WebhookDispatchQueue.ProcessJson(System.String)">
            <summary>
            Processes a JSON blob.
            </summary>
            <param name="json">The JSON blob.</param>
            <returns><c>true</c> if the request was processed sucessfully; <c>false</c> if the queue is complete and this blob has not been sent successfully.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.Thresholds.ThresholdsService.GetThresholds(System.Guid)">
            <summary>
            Gets the capacity thresholds for a deployemnt.
            </summary>
            <param name="deploymentId">The deployment id for which thresholds are required.</param>
            <returns>A <see cref="T:FM.LiveSwitch.Models.AvailabilityThresholdsConfig"/>.</returns>
        </member>
        <member name="M:FM.LiveSwitch.Service.Thresholds.ThresholdsService.GetAllocationStrategyAsync(System.Guid)">
            <summary>
            Gets the allocation strategy for a deployemnt.
            </summary>
            <param name="deploymentId">The deployment id for whichthresholds are required.</param>
            <returns>A <see cref="T:FM.LiveSwitch.AllocationStrategy"/>.</returns>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.SafeMcuConnectionsPerCpuThreshold">
            <summary>
            Gets or sets the safe number of MCU connections per CPU threshold to determine if server is over capacity.
            EXPERIMENTAL. Subject to change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.UnsafeMcuConnectionsPerCpuThreshold">
            <summary>
            Gets or sets the the critical (unsafe) number of MCU connections per CPU threshold to determine if server is over capacity.
            Media Server will never be allocated more than this many connecions.
            EXPERIMENTAL. Subject to change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.SafeSfuConnectionsPerCpuThreshold">
            <summary>
            Gets or sets the number of SFU connections per CPU threshold to determine if server is over capacity.
            EXPERIMENTAL. Subject to change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.UnsafeSfuConnectionsPerCpuThreshold">
            <summary>
            Gets or sets the number of SFU connections per CPU threshold to determine if server is over capacity.
            Media Server will never be allocated more than this many connecions.
            EXPERIMENTAL. Subject to change.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.Enabled">
            <summary>
            True if thresholds should apply to this media server.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.CpuThreshold">
            <summary>
            The CPU percentage used to determine if a media server is overcapacity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.MemoryThreshold">
            <summary>
            The memory usage (in bytes) used to determine if a media server is over capacity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.BandwidthThreshold">
            <summary>
            The bandwidth thoughput (in bytes) used to determine if a media server is over capacity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.OverCapacityDelay">
            <summary>
            The minimum amount of time to wait (in seconds) before removing the overcapacity state. 
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.FailedConnectionThreshold">
            <summary>
            The nuber of failed connections (within a time window) it takes to determine a media server is over capacity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.FailedConnectionsExpiry">
            <summary>
            The time window (in seconds) used for <see cref="P:FM.LiveSwitch.Models.AvailabilityThresholdsConfig.FailedConnectionThreshold"/>.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Models.RecordingStrategy.HierarchicalDirectories">
            <summary>
            Stores recordings in a folder hierarchy that matches the application -> channel -> user -> device -> client -> connection hierarchy. 
            The event log is stored in the root folder and contains all the events that occur.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.Models.RecordingStrategy.FlatDirectory">
            <summary>
            Stores recordings without any folder hierachy. Each connection has a metadata json file that contains the events. This file gets written out once the recordings are done.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ChannelDispatchQueue`1">
            <summary>
            A channel-based dispatch queue.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ChannelDispatchQueue`1.QueueCount">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Action1{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="action">The processing action.</param>
            <param name="singleWriter">Whether a single writer can be guaranteed.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
            <param name="singleWriter">Whether a single writer can be guaranteed.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.#ctor(FM.LiveSwitch.Function1{`0,FM.LiveSwitch.Future{System.Object}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FM.LiveSwitch.ChannelDispatchQueue`1"/> class.
            </summary>
            <param name="func">The processing function.</param>
            <param name="singleWriter">Whether a single writer can be guaranteed.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.WaitForCompletion">
            <summary>
            Blocks until the queue is empty.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item for processing.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FM.LiveSwitch.ChannelDispatchQueue`1.Destroy">
            <summary>
            Destroys the queue. 
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.New">
            <summary>
            This state is for when the offer is sent to the media server.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.Answered">
            <summary>
            The offer has been answered.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.Connected">
            <summary>
            The connection has been successfully connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.FailedPreConnected">
            <summary>
            The connection failed before it connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.FailedConnected">
            <summary>
            The connection failed after it connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.ClosedConnected">
            <summary>
            The connection was closed after it was connected.
            </summary>
        </member>
        <member name="F:FM.LiveSwitch.ConnectionStatus.ClosedPreConnection">
            <summary>
            The connection was closed before it connected.
            </summary>
        </member>
        <member name="T:FM.LiveSwitch.ActivityRecord">
            <summary>
            An Activity Record
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Id">
            <summary>
            Gets or sets the unique identifier. Used for EF.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.LicenseId">
            <summary>
            Gets or sets the license id. Not serialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Timestamp">
            <summary>
            Gets or sets the timestamp this activity occurred.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Message">
            <summary>
            Gets or sets the LiveSwitch message used to create this activity.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Authenticated">
            <summary>
            Gets or sets if the gateway that sent this record was authenticated using its account id.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.Verified">
            <summary>
            Gets or sets if this record is verfied or not. Not serialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.IPAddress">
            <summary>
            Gets or sets the ip address that uploaded this record. Not serialized.
            </summary>
        </member>
        <member name="P:FM.LiveSwitch.ActivityRecord.PrivateIPAddresses">
            <summary>
            Gets or sets the private ip addresses of the gateway that uploaded this record.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ActivityRecord.#ctor(System.DateTime,FM.LiveSwitch.Message,System.String[],System.String)">
            <summary>
            Creates a new activity record from a LiveSwitch Message.
            </summary>
            <param name="timestamp">The timestamp when the activity occurred.</param>
            <param name="msg">The LiveSwitch Message.</param>
            <param name="privateIPAddresses">Array of ip addresses used in this gateway.</param>
        </member>
        <member name="M:FM.LiveSwitch.ActivityRecord.Serialize">
            <summary>
            Serializes this instance to a string.
            </summary>
        </member>
        <member name="M:FM.LiveSwitch.ActivityRecord.Serialize(FM.LiveSwitch.ActivityRecord)">
            <summary>
            Serializes an instance to a strings.
            </summary>
            <param name="activityRecord">The usage record to serialize.</param>
            <returns>
            A serialized string.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ActivityRecord.Deserialize(System.String)">
            <summary>
            Deserializes an instance from a string.
            </summary>
            <param name="activityRecordString">The string to deserialize.</param>
            <returns>
            The deserialized activity record.
            </returns>
        </member>
        <member name="M:FM.LiveSwitch.ActivityRecord.Verify(System.String)">
            <summary>
            Verifies the signature.
            </summary>
            <param name="licensePassword">The license password.</param>
        </member>
    </members>
</doc>
